{"version":3,"sources":["../src/lib/path.js"],"names":["AllowedFields","factoryPathGraph","ParentClassGraph","PathGraph","collection","selector","config","arguments","fromFields","Error","toFields","length","fr","indexOf","to","modifier","callback","context","launched","hasOwnProperty","add"],"mappings":"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","file":"path.js","sourcesContent":["var AllowedFields = ['source', 'target', 'id'];\n\n/**\n * This method allows you to use PathGraph class to its inheritance chain.\n * Field launched is required!\n * Manage field launched.\n * \n * @param {Class} ParentClassGraph\n * @return {Class} PathGraph\n * @description `import { factoryPathGraph } from 'ancient-graph-spreading';`\n */\nfunction factoryPathGraph(ParentClassGraph) {\n  class PathGraph extends ParentClassGraph {\n    \n    /**\n     * Parent constrctor arguments taken in args array.\n     * \n     * @param {} collection - A pointer to the collection dannymineobhodimye daapteru to work with the graph. This may be a connection to the SQL database and table name, for example, or a collection of Mongo. \n     * @param {Object} fields - Comparison of the data in the collection of data in the graph. It is necessary for the adapter.\n     * @param {Object} config - Additional config.\n     * @param {string[]} config.fromFields - Start direction in path link\n     * @param {string[]} config.toFields - End direction in path link\n     */\n    constructor(collection, selector, config) {\n      super(...arguments);\n      \n      if (config.fromFields) {\n        this.fromFields = config.fromFields;\n      } else throw new Error('config.fromFields is not defined');\n      \n      if (config.toFields) {\n        this.toFields = config.toFields;\n      } else throw new Error('config.toFields is not defined');\n      \n      if (!this.fromFields.length) {\n        throw new Error('config.fromFields can not be empty');\n      }\n      \n      if (!this.toFields.length) {\n        throw new Error('config.fromFields can not be empty');\n      }\n      \n      for (var fr in this.fromFields) {\n        if (AllowedFields.indexOf(this.fromFields[fr]) == -1) {\n          throw new Error('config.fromFields may includes only `sourec`, `target` and `id`, but '+this.toFields[to]);\n        }\n        for (var to in this.toFields) {\n          if (AllowedFields.indexOf(this.toFields[to]) == -1) {\n            throw new Error('config.toFields may includes only `sourec`, `target` and `id`, but '+this.toFields[to]);\n          }\n          if (this.fromFields[fr] == this.toFields[to]) {\n            throw new Error('The start and end of the path con not be at one reference of the link.');\n          }\n        }\n      }\n    }\n    \n    /**\n     * Parent insert with added launched field. You can override it field in modifier.\n     */\n    insert(modifier, callback, context) {\n      if (!modifier.launched) modifier.launched = ['spread'];\n      return super.insert(modifier, callback, context);\n    }\n    \n    /**\n     * Parent update, but if source or target changed, then to the launched field will be added values unspread and spread. You can override it field in modifier.\n     */\n    update(selector, modifier, callback, context) {\n      if (\n        !modifier.hasOwnProperty('launched')\n      ) {\n        modifier.launched = { add: ['unspread', 'spread'] };\n      }\n      return super.update(selector, modifier, callback, context);\n    }\n    \n    /**\n     * The method is strictly designed so that the class inherits from ExistedGraph.\n     * Adds to launched field unspread value.\n     */\n    remove(selector, callback, context) {\n      if (!context) var context = {};\n      if (!context.modifier) context.modifier = {};\n      context.modifier.launched = ['unspread'];\n      return super.remove(selector, callback, context);\n    }\n  }\n  \n  return PathGraph;\n};\n\nexport { factoryPathGraph };"]}