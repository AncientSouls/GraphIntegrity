{"version":3,"sources":["../src/lib/spreading.js"],"names":["GraphSpreading","spreadGraph","pathGraphs","coll","iteratee","callback","each","pathGraph","push","fromField","pathLink","context","handler","fetch","variableField","undefined","error","spreadLinks","length","spreadLink","next","spreadFromSpreadLinkByPathLink","fromFields","_spreadByPathLink","newSpreadLink","_spreadingHandler","insert","spreadFromSpreadLinkByPathGraph","pathLinks","_spreadFromSpreadLinkByPathGraph","toField","constantField","id","root","toFields","_spreadFromSpreadLinkByPathLink","prev","spreadLinkId","remove","count","pathLinkId","path","_unspreadingHandler","permission","nextPathGraph","nextToField","nextPathLink","spreadByPathLink"],"mappings":"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","file":"spreading.js","sourcesContent":["import async from 'async';\r\n\r\n/**\r\n * Class with methods for spread and unspread of the spreadGraph on pathGraph(s).\r\n * \r\n * @class\r\n * @description `import { GraphSpreading } from 'ancient-graph-spreading';`\r\n */\r\nclass GraphSpreading {\r\n  \r\n  /**\r\n   * @param {SpreadGraph} spreadGraph\r\n   */\r\n  constructor(spreadGraph) {\r\n    this.spreadGraph = spreadGraph;\r\n    this.pathGraphs = [];\r\n  }\r\n  \r\n  /**\r\n   * Custom async callbacks support\r\n   * \r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {function} iteratee - A function to apply to each item in coll.\r\n   * @param {function} callback - A callback which is called when all iteratee functions have finished.\r\n   */\r\n  each(coll, iteratee, callback) {\r\n    async.each(coll, iteratee, callback);\r\n  }\r\n  \r\n  /**\r\n   * @param {PathGraph} pathGraph\r\n   */\r\n  addPathGraph(pathGraph) {\r\n    this.pathGraphs.push(pathGraph);\r\n  }\r\n  \r\n  /**\r\n   * Spread by pathLink and specified fromField with available spreadLinks.\r\n   * \r\n   * @oaram {string} fromField\r\n   * @param {PathGraph} pathGraph\r\n   * @param {PathLink} pathLink\r\n   * @param {Object} [context]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathLinkCallback} [handler]\r\n   * @param {GraphSpreading~spreadByPathLinkCallback} [callback]\r\n   */\r\n  _spreadByPathLink(fromField, pathGraph, pathLink, context, handler, callback) {\r\n    this.spreadGraph.fetch({\r\n      [this.spreadGraph.variableField]: pathLink[fromField]\r\n    }, undefined, (error, spreadLinks) => {\r\n      if (spreadLinks.length) {\r\n        this.each(spreadLinks, (spreadLink, next) => {\r\n          this.spreadFromSpreadLinkByPathLink(spreadLink, pathGraph, pathLink, context, handler, () => { next(); });\r\n        }, () => {\r\n          if (callback) callback();\r\n        });\r\n      } else {\r\n        if (callback) callback();\r\n      }\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Spread by pathLink with available spreadLinks.\r\n   * \r\n   * @param {PathGraph} pathGraph\r\n   * @param {PathLink} pathLink\r\n   * @param {Object} [context]\r\n   * @param {String[]} [context.fromFields]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathLinkCallback} [handler]\r\n   * @param {GraphSpreading~spreadByPathLinkCallback} [callback]\r\n   */\r\n  spreadByPathLink(pathGraph, pathLink, context, handler, callback) {\r\n    var fromFields = context&&context.fromFields||pathGraph.fromFields;\r\n    this.each(fromFields, (fromField, next) => {\r\n      this._spreadByPathLink(fromField, pathGraph, pathLink, context, handler, next);\r\n    }, callback);\r\n  }\r\n  \r\n  /**\r\n   * Optional callback.\r\n   *\r\n   * @callback GraphSpreading~spreadByPathLinkCallback\r\n   */\r\n  \r\n  /**\r\n   * Spread root of tree spreadLink.\r\n   * \r\n   * @param {SpreadLink} newSpreadLink\r\n   * @param {Object} [context]\r\n   * @param {Graph~insertCallback} [callback]\r\n   */\r\n  spreadNewSpreadLink(newSpreadLink, context, callback) {\r\n    this.spreadGraph._spreadingHandler(undefined, undefined, undefined, newSpreadLink, context, (newSpreadLink) => {\r\n      if (newSpreadLink) {\r\n        this.spreadGraph.insert(newSpreadLink, callback, context);\r\n      } else {\r\n        if (callback) callback();\r\n      }\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Spread by all available paths from spreadLink.\r\n   * \r\n   * @param {SpreadLink} spreadLink\r\n   * @param {Object} [context]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphHandler} [handler]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphCallback} [callback]\r\n   */\r\n  spreadFromSpreadLink(spreadLink, context, handler, callback) {\r\n    this.each(this.pathGraphs, (pathGraph, next) => {\r\n      this.spreadFromSpreadLinkByPathGraph(spreadLink, pathGraph, context, handler, next);\r\n    }, () => {\r\n      if (callback) callback();\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Spread by all available paths in pathGraph from spreadLink and specified fromField.\r\n   * \r\n   * @param {string} fromField\r\n   * @param {SpreadLink} spreadLink\r\n   * @param {PathGraph} pathGraph\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphHandler} [handler]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphCallback} [callback]\r\n   */\r\n  _spreadFromSpreadLinkByPathGraph(fromField, spreadLink, pathGraph, context, handler, callback) {\r\n    pathGraph.fetch({\r\n      [fromField]: spreadLink[this.spreadGraph.variableField]\r\n    }, undefined, (error, pathLinks) => {\r\n      this.each(pathLinks, (pathLink, next) => {\r\n        this.spreadFromSpreadLinkByPathLink(spreadLink, pathGraph, pathLink, context, handler, next);\r\n      }, () => {\r\n        if (callback) callback();\r\n      });\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Spread by all available paths in pathGraph from spreadLink.\r\n   * \r\n   * @param {SpreadLink} spreadLink\r\n   * @param {PathGraph} pathGraph\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphHandler} [handler]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphCallback} [callback]\r\n   */\r\n  spreadFromSpreadLinkByPathGraph(spreadLink, pathGraph, context, handler, callback) {\r\n    this.each(pathGraph.fromFields, (fromField, next) => {\r\n      this._spreadFromSpreadLinkByPathGraph(fromField, spreadLink, pathGraph, context, handler, next);\r\n    }, callback);\r\n  }\r\n  \r\n  /**\r\n   * Optional handler. If present, called with an error object as the first argument and, if no error, others arguments with results of spreading.\r\n   *\r\n   * @callback GraphSpreading~spreadFromSpreadLinkByPathGraphHandler\r\n   * @param {Error} [error]\r\n   * @param {string} [newSpreadLinkId]\r\n   * @param {SpreadLink} [prevSpreadLink]\r\n   * @param {PathGraph} [pathGraph]\r\n   * @param {PathLink} [pathLink]\r\n   */\r\n  \r\n  /**\r\n   * Optional callback.\r\n   *\r\n   * @callback GraphSpreading~spreadFromSpreadLinkByPathGraphCallback\r\n   */\r\n  \r\n  /**\r\n   * Spread by pathLink and specified toField in pathGraph from spreadLink.\r\n   * \r\n   * @param {SpreadLink} spreadLink\r\n   * @param {PathGraph} pathGraph\r\n   * @param {PathLink} pathLink\r\n   * @param {Object} [context]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathLinkCallback} [callback]\r\n   */\r\n  _spreadFromSpreadLinkByPathLink(toField, spreadLink, pathGraph, pathLink, context, callback) {\r\n    this.spreadGraph._spreadingHandler(spreadLink, pathGraph, pathLink, {\r\n      [this.spreadGraph.constantField]: spreadLink[this.spreadGraph.constantField],\r\n      [this.spreadGraph.variableField]: pathLink[toField],\r\n      prev: spreadLink.id,\r\n      path: pathLink.id,\r\n      root: spreadLink.root?spreadLink.root:spreadLink.id\r\n    }, context, (newSpreadLink) => {\r\n      if (newSpreadLink) {\r\n        this.spreadGraph.insert(newSpreadLink, (error, id) => {\r\n          if (callback) callback(error, id, spreadLink, pathGraph, pathLink);\r\n        }, context);\r\n      } else {\r\n        if (callback) callback();\r\n      }\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Spread by pathLink in pathGraph from spreadLink.\r\n   * \r\n   * @param {SpreadLink} spreadLink\r\n   * @param {PathGraph} pathGraph\r\n   * @param {PathLink} pathLink\r\n   * @param {Object} [context]\r\n   * @param {String[]} [context.toFields]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathLinkHandler} [handler]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathLinkCallback} [callback]\r\n   */\r\n  spreadFromSpreadLinkByPathLink(spreadLink, pathGraph, pathLink, context, handler, callback) {\r\n    var toFields = context&&context.toFields||pathGraph.toFields;\r\n    this.each(toFields, (toField, next) => {\r\n      this._spreadFromSpreadLinkByPathLink(toField, spreadLink, pathGraph, pathLink, context, (error, id, prev, pathGraph, pathLink) => {\r\n        if (handler) handler(error, id, prev, pathGraph, pathLink);\r\n        next();\r\n      });\r\n    }, callback);\r\n  }\r\n  \r\n  /**\r\n   * Optional handler.\r\n   *\r\n   * @callback GraphSpreading~spreadFromSpreadLinkByPathLinkCallback\r\n   * @param {Error} [error]\r\n   * @param {string} [newSpreadLinkId]\r\n   * @param {SpreadLink} [prevSpreadLink]\r\n   * @param {PathGraph} [pathGraph]\r\n   * @param {PathLink} [pathLink]\r\n   */\r\n  \r\n  /**\r\n   * Optional callback. If present, called with an error object as the first argument and, if no error, the unique id of inserted spread link as the second.\r\n   *\r\n   * @callback GraphSpreading~spreadFromSpreadLinkByPathLinkCallback\r\n   */\r\n  \r\n  /**\r\n   * Remove spreadLinks with specific prev spreadLink id.\r\n   * \r\n   * @param {string} spreadLinkId\r\n   * @param {Object} [context]\r\n   * @param {GraphSpreading~unspreadFromRemovedSpreadLinkByPrevIdHandler} [handler]\r\n   * @param {GraphSpreading~unspreadFromRemovedSpreadLinkByPrevIdCallback} [callback]\r\n   */\r\n  unspreadFromRemovedSpreadLinkByPrevId(spreadLinkId, context, handler, callback) {\r\n    if (handler) {\r\n      this.spreadGraph.fetch({ prev: spreadLinkId }, undefined, (error, spreadLinks) => {\r\n        if (error) {\r\n          if (callback) callback(error);\r\n        } else {\r\n          this.each(spreadLinks, (spreadLink, next) => {\r\n            this.spreadGraph.remove(spreadLink.id, (error, count) => {\r\n              handler(error, spreadLink);\r\n              next();\r\n            }, context);\r\n          }, () => {\r\n            if (callback) callback(undefined, spreadLinks.length);\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      this.spreadGraph.remove({ prev: spreadLinkId }, callback, context);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Optional handler. If present, called with an error object as the first argument and, if no error, others arguments with results of unspreading.\r\n   *\r\n   * @callback GraphSpreading~unspreadFromRemovedSpreadLinkByPrevIdHandler\r\n   * @param {Error} [error]\r\n   * @param {SpreadLink} [spreadLink]\r\n   */\r\n  \r\n  /**\r\n   * Optional callback.\r\n   *\r\n   * @callback GraphSpreading~unspreadFromRemovedSpreadLinkByPrevIdCallback\r\n   * @param {Error} [error]\r\n   * @param {number} [count]\r\n   */\r\n  \r\n  /**\r\n   * Remove spreadLinks with specific path pathLink id.\r\n   * \r\n   * @param {string} pathLinkId\r\n   * @param {Object} [context]\r\n   * @param {GraphSpreading~unspreadByPathIdHandler} [handler]\r\n   * @param {GraphSpreading~unspreadByPathIdCallback} [callback]\r\n   */\r\n  unspreadByPathId(pathLinkId, context, handler, callback) {\r\n    if (handler) {\r\n      this.spreadGraph.fetch({ path: pathLinkId }, undefined, (error, spreadLinks) => {\r\n        if (error) {\r\n          if (callback) callback(error);\r\n        } else {\r\n          this.each(spreadLinks, (spreadLink, next) => {\r\n            this.spreadGraph.remove(spreadLink.id, (error, count) => {\r\n              handler(error, spreadLink);\r\n              next();\r\n            }, context);\r\n          }, () => {\r\n            if (callback) callback(undefined, spreadLinks.length);\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      this.spreadGraph.remove({ path: pathLinkId }, callback, context);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Optional handler.\r\n   *\r\n   * @callback GraphSpreading~unspreadByPathIdHandler\r\n   * @param {Error} [error]\r\n   * @param {SpreadLink} [spreadLink]\r\n   */\r\n  \r\n  /**\r\n   * Optional callback.\r\n   *\r\n   * @callback GraphSpreading~unspreadByPathIdCallback\r\n   * @param {Error} [error]\r\n   * @param {number} [count]\r\n   */\r\n  \r\n  /**\r\n   * Unspread all valid spreadLinks to this id.\r\n   * \r\n   * @param {string} id\r\n   * @param {Object} [context]\r\n   * @param {GraphSpreading~unspreadToHandler} [handler]\r\n   * @param {GraphSpreading~unspreadToCallback} [callback]\r\n   */\r\n  unspread(id, context, handler, callback) {\r\n     this.spreadGraph.fetch({ [this.spreadGraph.variableField]: id }, undefined, (error, spreadLinks) => {\r\n       if (error) {\r\n         if (callback) callback(error);\r\n       } else {\r\n          this.each(spreadLinks, (spreadLink, next) => {\r\n           this.spreadGraph._unspreadingHandler(spreadLink, context, (permission) => {\r\n             if (permission) {\r\n               this.spreadGraph.remove(spreadLink.id, (error, count) => {\r\n                 if (handler) handler(error, spreadLink);\r\n                 next();\r\n               }, context);\r\n             }\r\n           });\r\n          }, () => {\r\n            if (callback) callback(undefined, spreadLinks.length);\r\n          });\r\n       }\r\n     });\r\n  }\r\n  \r\n  /**\r\n   * Optional handler.\r\n   *\r\n   * @callback GraphSpreading~unspreadToHandler\r\n   * @param {Error} [error]\r\n   * @param {SpreadLink} [spreadLink]\r\n   */\r\n  \r\n  /**\r\n   * Optional callback.\r\n   *\r\n   * @callback GraphSpreading~unspreadToCallback\r\n   */\r\n  \r\n  /**\r\n   * Spread all spread links from all available paths to this id.\r\n   * \r\n   * @param {string} id\r\n   * @param {Object} [context]\r\n   * @param {String[]} [context.toFields]\r\n   * @param {GraphSpreading~spreadToHandler} [handler]\r\n   * @param {GraphSpreading~spreadToCallback} [callback]\r\n   */\r\n   \r\n  spreadTo(id, context, handler, callback) {\r\n    this.each(this.pathGraphs, (pathGraph, nextPathGraph) => {\r\n      var toFields = context&&context.toFields||pathGraph.toFields;\r\n      this.each(toFields, (toField, nextToField) => {\r\n        pathGraph.fetch({\r\n          [toField]: id\r\n        }, undefined, (error, pathLinks) => {\r\n          this.each(pathLinks, (pathLink, nextPathLink) => {\r\n            this.spreadByPathLink(pathGraph, pathLink, context, handler, nextPathLink);\r\n          }, function(error) {\r\n            nextToField();\r\n          });\r\n        });\r\n      }, nextPathGraph);\r\n    }, () => {\r\n      if (callback) callback();\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Optional handler. Fires after each processed spread link.\r\n   * Id can be empty if the `this.spreadGraph._spreadingHandler` banned spreading.\r\n   * \r\n   * @callback GraphSpreading~spreadToHandler\r\n   * @param {Error} [error]\r\n   * @param {string} [newSpreadLinkId]\r\n   * @param {SpreadLink} [prevSpreadLink]\r\n   * @param {PathGraph} [pathGraph]\r\n   * @param {PathLink} [pathLink]\r\n   */\r\n  \r\n  /**\r\n   * Optional callback.\r\n   *\r\n   * @callback GraphSpreading~spreadToCallback\r\n   */\r\n}\r\n\r\nexport { GraphSpreading };"]}