{"version":3,"sources":["../src/lib/spreader.js"],"names":["factorySpreaderGraph","ParentClassGraph","SpreaderGraph","collection","selector","config","arguments","constantField","Error","variableField","modifier","callback","context","launched","hasOwnProperty","add"],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;;;;;;;AAUA,SAASA,oBAAT,CAA8BC,gBAA9B,EAAgD;AAAA,MACxCC,aADwC;AAAA;;AAG5C;;;;;;;AAOA,2BAAYC,UAAZ,EAAwBC,QAAxB,EAAkCC,MAAlC,EAA0C;AAAA;;AAAA,iIAC/BC,SAD+B;;AAGxC,UAAID,OAAOE,aAAX,EAA0B,MAAKA,aAAL,GAAqBF,OAAOE,aAA5B,CAA1B,KACK,MAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;;AAEL,UAAIH,OAAOI,aAAX,EAA0B,MAAKA,aAAL,GAAqBJ,OAAOI,aAA5B,CAA1B,KACK,MAAM,IAAID,KAAJ,CAAU,qCAAV,CAAN;AAPmC;AAQzC;;AAED;;;;;AApB4C;AAAA;AAAA,6BAuBrCE,QAvBqC,EAuB3BC,QAvB2B,EAuBjBC,OAvBiB,EAuBR;AAClC,YAAI,CAACF,SAASG,QAAd,EAAwBH,SAASG,QAAT,GAAoB,CAAC,QAAD,CAApB;AACxB,oIAAoBH,QAApB,EAA8BC,QAA9B,EAAwCC,OAAxC;AACD;;AAED;;;;AA5B4C;AAAA;AAAA,6BA+BrCR,QA/BqC,EA+B3BM,QA/B2B,EA+BjBC,QA/BiB,EA+BPC,OA/BO,EA+BE;AAC5C,YAAI,CAACF,SAASI,cAAT,CAAwB,UAAxB,CAAL,EAA0C;AACxC,cAAIJ,SAASI,cAAT,CAAwB,KAAKL,aAA7B,KAA+CC,SAASI,cAAT,CAAwB,KAAKP,aAA7B,CAAnD,EAAgG;AAC9FG,qBAASG,QAAT,GAAoB,EAAEE,KAAK,CAAC,UAAD,EAAa,QAAb,CAAP,EAApB;AACD;AACF;AACD,oIAAoBX,QAApB,EAA8BM,QAA9B,EAAwCC,QAAxC,EAAkDC,OAAlD;AACD;;AAED;;;;;AAxC4C;AAAA;AAAA,6BA4CrCR,QA5CqC,EA4C3BO,QA5C2B,EA4CjBC,OA5CiB,EA4CR;AAClC,YAAI,CAACA,OAAL,EAAc,IAAIA,UAAU,EAAd;AACd,YAAI,CAACA,QAAQF,QAAb,EAAuBE,QAAQF,QAAR,GAAmB,EAAnB;AACvBE,gBAAQF,QAAR,CAAiBG,QAAjB,GAA4B,CAAC,UAAD,CAA5B;AACA,oIAAoBT,QAApB,EAA8BO,QAA9B,EAAwCC,OAAxC;AACD;AAjD2C;;AAAA;AAAA,IAClBX,gBADkB;;AAoD9C,SAAOC,aAAP;AACD;;QAEQF,oB,GAAAA,oB","file":"spreader.js","sourcesContent":["/**\n * This method allows you to use SpreaderGraph class to its inheritance chain.\n * Field launched is required!\n * Manage field launched.\n * If using this graph, then in the spreadGraph field spreader is required.\n * \n * @param {Class} ParentClassGraph\n * @return {Class} SpreaderGraph\n * @description `import { factorySpreaderGraph } from 'ancient-graph-spreading';`\n */\nfunction factorySpreaderGraph(ParentClassGraph) {\n  class SpreaderGraph extends ParentClassGraph {\n    \n    /**\n     * @param {} collection - A pointer to the collection dannymineobhodimye daapteru to work with the graph. This may be a connection to the SQL database and table name, for example, or a collection of Mongo. \n     * @param {Object} fields - Comparison of the data in the collection of data in the graph. It is necessary for the adapter.\n     * @param {Object} config - Additional config.\n     * @param {String} config.constantField - Constant field in graph\n     * @param {String} config.variableField - Spreadable field in graph\n     */\n    constructor(collection, selector, config) {\n      super(...arguments);\n      \n      if (config.constantField) this.constantField = config.constantField;\n      else throw new Error('config.constantField is not defined');\n      \n      if (config.variableField) this.variableField = config.variableField;\n      else throw new Error('config.variableField is not defined');\n    }\n    \n    /**\n     * Parent insert with added launched field. You can override it field in modifier.\n     */\n    insert(modifier, callback, context) {\n      if (!modifier.launched) modifier.launched = ['spread'];\n      return super.insert(modifier, callback, context);\n    }\n    \n    /**\n     * Parent update, but if source or target changed, then to the launched field will be added values unspread and spread. You can override it field in modifier.\n     */\n    update(selector, modifier, callback, context) {\n      if (!modifier.hasOwnProperty('launched')) {\n        if (modifier.hasOwnProperty(this.variableField) || modifier.hasOwnProperty(this.constantField)) {\n          modifier.launched = { add: ['unspread', 'spread'] };\n        }\n      }\n      return super.update(selector, modifier, callback, context);\n    }\n    \n    /**\n     * The method is strictly designed so that the class inherits from ExistedGraph.\n     * Adds to launched field unspread value.\n     */\n    remove(selector, callback, context) {\n      if (!context) var context = {};\n      if (!context.modifier) context.modifier = {};\n      context.modifier.launched = ['unspread'];\n      return super.remove(selector, callback, context);\n    }\n  }\n  \n  return SpreaderGraph;\n};\n\nexport { factorySpreaderGraph };"]}