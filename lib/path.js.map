{"version":3,"sources":["../src/lib/path.js"],"names":["factoryPathGraph","ParentClassGraph","PathGraph","args","fromField","toField","_fromField","_toField","modifier","callback","context","launched","selector","hasOwnProperty","add"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;AASA,SAASA,gBAAT,CAA0BC,gBAA1B,EAA4C;AAAA,MACpCC,SADoC;AAAA;;AAGxC;;;;;;;AAOA,uBAAYC,IAAZ,EAAkBC,SAAlB,EAA6BC,OAA7B,EAAsC;AAAA;;AAAA;;AAAA,sKAC3BF,IAD2B;;AAEpC,YAAKG,UAAL,GAAkBF,SAAlB;AACA,YAAKG,QAAL,GAAgBF,OAAhB;AAHoC;AAIrC;;AAED;;;;;AAhBwC;AAAA;AAAA,6BAmBjCG,QAnBiC,EAmBvBC,QAnBuB,EAmBbC,OAnBa,EAmBJ;AAClC,YAAI,CAACF,SAASG,QAAd,EAAwBH,SAASG,QAAT,GAAoB,CAAC,QAAD,CAApB;AACxB,4HAAoBH,QAApB,EAA8BC,QAA9B,EAAwCC,OAAxC;AACD;;AAED;;;;AAxBwC;AAAA;AAAA,6BA2BjCE,QA3BiC,EA2BvBJ,QA3BuB,EA2BbC,QA3Ba,EA2BHC,OA3BG,EA2BM;AAC5C,YAAI,CAACF,SAASK,cAAT,CAAwB,UAAxB,CAAD,KAAyCL,SAASK,cAAT,CAAwB,QAAxB,KAAqCL,SAASK,cAAT,CAAwB,QAAxB,CAA9E,CAAJ,EAAsH;AACpHL,mBAASG,QAAT,GAAoB,EAAEG,KAAK,CAAC,UAAD,EAAa,QAAb,CAAP,EAApB;AACD;AACD,4HAAoBF,QAApB,EAA8BJ,QAA9B,EAAwCC,QAAxC,EAAkDC,OAAlD;AACD;;AAED;;;;;AAlCwC;AAAA;AAAA,6BAsCjCE,QAtCiC,EAsCvBH,QAtCuB,EAsCbC,OAtCa,EAsCJ;AAClC,YAAI,CAACA,OAAL,EAAc,IAAIA,UAAU,EAAd;AACd,YAAI,CAACA,QAAQF,QAAb,EAAuBE,QAAQF,QAAR,GAAmB,EAAnB;AACvBE,gBAAQF,QAAR,CAAiBG,QAAjB,GAA4B,CAAC,UAAD,CAA5B;AACA,4HAAoBC,QAApB,EAA8BH,QAA9B,EAAwCC,OAAxC;AACD;AA3CuC;;AAAA;AAAA,IAClBT,gBADkB;;AA8C1C,SAAOC,SAAP;AACD;;QAEQF,gB,GAAAA,gB","file":"path.js","sourcesContent":["/**\n * This method allows you to use PathGraph class to its inheritance chain.\n * Field launched is required!\n * Manage field launched.\n * \n * @param {Class} ParentClassGraph\n * @return {Class} PathGraph\n * @description `import { factoryPathGraph } from 'ancient-graph-spreading';`\n */\nfunction factoryPathGraph(ParentClassGraph) {\n  class PathGraph extends ParentClassGraph {\n    \n    /**\n     * Parent constrctor arguments taken in args array.\n     * \n     * @param {Array} args - parent class graph arguments\n     * @param {string} fromField\n     * @param {string} toField\n     */\n    constructor(args, fromField, toField) {\n      super(...args);\n      this._fromField = fromField;\n      this._toField = toField;\n    }\n    \n    /**\n     * Parent insert with added launched field. You can override it field in modifier.\n     */\n    insert(modifier, callback, context) {\n      if (!modifier.launched) modifier.launched = ['spread'];\n      return super.insert(modifier, callback, context);\n    }\n    \n    /**\n     * Parent update, but if source or target changed, then to the launched field will be added values unspread and spread. You can override it field in modifier.\n     */\n    update(selector, modifier, callback, context) {\n      if (!modifier.hasOwnProperty('launched') && (modifier.hasOwnProperty('source') || modifier.hasOwnProperty('target'))) {\n        modifier.launched = { add: ['unspread', 'spread'] };\n      }\n      return super.update(selector, modifier, callback, context);\n    }\n    \n    /**\n     * The method is strictly designed so that the class inherits from ExistedGraph.\n     * Adds to launched field unspread value.\n     */\n    remove(selector, callback, context) {\n      if (!context) var context = {};\n      if (!context.modifier) context.modifier = {};\n      context.modifier.launched = ['unspread'];\n      return super.remove(selector, callback, context);\n    }\n  }\n  \n  return PathGraph;\n};\n\nexport { factoryPathGraph };"]}