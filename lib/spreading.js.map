{"version":3,"sources":["../src/lib/spreading.js"],"names":["GraphSpreading","spreadGraph","pathGraphs","coll","iteratee","callback","each","pathGraph","push","fromField","pathLink","context","handler","fetch","variableField","undefined","error","spreadLinks","length","spreadLink","next","spreadFromSpreadLinkByPathLink","fromFields","_spreadByPathLink","newSpreadLink","_spreadingHandler","insert","spreadFromSpreadLinkByPathGraph","pathLinks","_spreadFromSpreadLinkByPathGraph","toField","constantField","id","root","toFields","_spreadFromSpreadLinkByPathLink","prev","spreadLinkId","remove","count","pathLinkId","path","_unspreadingHandler","permission","nextPathGraph","nextPathLink","spreadByPathLink"],"mappings":"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","file":"spreading.js","sourcesContent":["import async from 'async';\n\n/**\n * Class with methods for spread and unspread of the spreadGraph on pathGraph(s).\n * \n * @class\n * @description `import { GraphSpreading } from 'ancient-graph-spreading';`\n */\nclass GraphSpreading {\n  \n  /**\n   * @param {SpreadGraph} spreadGraph\n   */\n  constructor(spreadGraph) {\n    this.spreadGraph = spreadGraph;\n    this.pathGraphs = [];\n  }\n  \n  /**\n   * Custom async callbacks support\n   * \n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {function} iteratee - A function to apply to each item in coll.\n   * @param {function} callback - A callback which is called when all iteratee functions have finished.\n   */\n  each(coll, iteratee, callback) {\n    async.each(coll, iteratee, callback);\n  }\n  \n  /**\n   * @param {PathGraph} pathGraph\n   */\n  addPathGraph(pathGraph) {\n    this.pathGraphs.push(pathGraph);\n  }\n  \n  /**\n   * Spread by pathLink and specified fromField with available spreadLinks.\n   * \n   * @oaram {string} fromField\n   * @param {PathGraph} pathGraph\n   * @param {PathLink} pathLink\n   * @param {Object} [context]\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathLinkCallback} [handler]\n   * @param {GraphSpreading~spreadByPathLinkCallback} [callback]\n   */\n  _spreadByPathLink(fromField, pathGraph, pathLink, context, handler, callback) {\n    this.spreadGraph.fetch({\n      [this.spreadGraph.variableField]: pathLink[fromField]\n    }, undefined, (error, spreadLinks) => {\n      if (spreadLinks.length) {\n        this.each(spreadLinks, (spreadLink, next) => {\n          this.spreadFromSpreadLinkByPathLink(spreadLink, pathGraph, pathLink, context, handler, () => { next(); });\n        }, () => {\n          if (callback) callback();\n        });\n      } else {\n        if (callback) callback();\n      }\n    });\n  }\n  \n  /**\n   * Spread by pathLink with available spreadLinks.\n   * \n   * @param {PathGraph} pathGraph\n   * @param {PathLink} pathLink\n   * @param {Object} [context]\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathLinkCallback} [handler]\n   * @param {GraphSpreading~spreadByPathLinkCallback} [callback]\n   */\n  spreadByPathLink(pathGraph, pathLink, context, handler, callback) {\n    this.each(pathGraph.fromFields, (fromField, next) => {\n      this._spreadByPathLink(fromField, pathGraph, pathLink, context, handler, next);\n    }, callback);\n  }\n  \n  /**\n   * Optional callback.\n   *\n   * @callback GraphSpreading~spreadByPathLinkCallback\n   */\n  \n  /**\n   * Spread root of tree spreadLink.\n   * \n   * @param {SpreadLink} newSpreadLink\n   * @param {Object} [context]\n   * @param {Graph~insertCallback} [callback]\n   */\n  spreadNewSpreadLink(newSpreadLink, context, callback) {\n    this.spreadGraph._spreadingHandler(undefined, undefined, undefined, newSpreadLink, context, (newSpreadLink) => {\n      if (newSpreadLink) {\n        this.spreadGraph.insert(newSpreadLink, callback, context);\n      } else {\n        if (callback) callback();\n      }\n    });\n  }\n  \n  /**\n   * Spread by all available paths from spreadLink.\n   * \n   * @param {SpreadLink} spreadLink\n   * @param {Object} [context]\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphHandler} [handler]\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphCallback} [callback]\n   */\n  spreadFromSpreadLink(spreadLink, context, handler, callback) {\n    this.each(this.pathGraphs, (pathGraph, next) => {\n      this.spreadFromSpreadLinkByPathGraph(spreadLink, pathGraph, context, handler, next);\n    }, () => {\n      if (callback) callback();\n    });\n  }\n  \n  /**\n   * Spread by all available paths in pathGraph from spreadLink and specified fromField.\n   * \n   * @param {string} fromField\n   * @param {SpreadLink} spreadLink\n   * @param {PathGraph} pathGraph\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphHandler} [handler]\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphCallback} [callback]\n   */\n  _spreadFromSpreadLinkByPathGraph(fromField, spreadLink, pathGraph, context, handler, callback) {\n    pathGraph.fetch({\n      [fromField]: spreadLink[this.spreadGraph.variableField]\n    }, undefined, (error, pathLinks) => {\n      this.each(pathLinks, (pathLink, next) => {\n        this.spreadFromSpreadLinkByPathLink(spreadLink, pathGraph, pathLink, context, handler, next);\n      }, () => {\n        if (callback) callback();\n      });\n    });\n  }\n  \n  /**\n   * Spread by all available paths in pathGraph from spreadLink.\n   * \n   * @param {SpreadLink} spreadLink\n   * @param {PathGraph} pathGraph\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphHandler} [handler]\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphCallback} [callback]\n   */\n  spreadFromSpreadLinkByPathGraph(spreadLink, pathGraph, context, handler, callback) {\n    this.each(pathGraph.fromFields, (fromField, next) => {\n      this._spreadFromSpreadLinkByPathGraph(fromField, spreadLink, pathGraph, context, handler, next);\n    }, callback);\n  }\n  \n  /**\n   * Optional handler. If present, called with an error object as the first argument and, if no error, others arguments with results of spreading.\n   *\n   * @callback GraphSpreading~spreadFromSpreadLinkByPathGraphHandler\n   * @param {Error} [error]\n   * @param {string} [newSpreadLinkId]\n   * @param {SpreadLink} [prevSpreadLink]\n   * @param {PathGraph} [pathGraph]\n   * @param {PathLink} [pathLink]\n   */\n  \n  /**\n   * Optional callback.\n   *\n   * @callback GraphSpreading~spreadFromSpreadLinkByPathGraphCallback\n   */\n  \n  /**\n   * Spread by pathLink and specified toField in pathGraph from spreadLink.\n   * \n   * @param {SpreadLink} spreadLink\n   * @param {PathGraph} pathGraph\n   * @param {PathLink} pathLink\n   * @param {Object} [context]\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathLinkCallback} [callback]\n   */\n  _spreadFromSpreadLinkByPathLink(toField, spreadLink, pathGraph, pathLink, context, callback) {\n    this.spreadGraph._spreadingHandler(spreadLink, pathGraph, pathLink, {\n      [this.spreadGraph.constantField]: spreadLink[this.spreadGraph.constantField],\n      [this.spreadGraph.variableField]: pathLink[toField],\n      prev: spreadLink.id,\n      path: pathLink.id,\n      root: spreadLink.root?spreadLink.root:spreadLink.id\n    }, context, (newSpreadLink) => {\n      if (newSpreadLink) {\n        this.spreadGraph.insert(newSpreadLink, (error, id) => {\n          if (callback) callback(error, id, spreadLink, pathGraph, pathLink);\n        }, context);\n      } else {\n        if (callback) callback();\n      }\n    });\n  }\n  \n  /**\n   * Spread by pathLink in pathGraph from spreadLink.\n   * \n   * @param {SpreadLink} spreadLink\n   * @param {PathGraph} pathGraph\n   * @param {PathLink} pathLink\n   * @param {Object} [context]\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathLinkHandler} [handler]\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathLinkCallback} [callback]\n   */\n  spreadFromSpreadLinkByPathLink(spreadLink, pathGraph, pathLink, context, handler, callback) {\n    this.each(pathGraph.toFields, (toField, next) => {\n      this._spreadFromSpreadLinkByPathLink(toField, spreadLink, pathGraph, pathLink, context, (error, id, prev, pathGraph, pathLink) => {\n        if (handler) handler(error, id, prev, pathGraph, pathLink);\n        next();\n      });\n    }, callback);\n  }\n  \n  /**\n   * Optional handler.\n   *\n   * @callback GraphSpreading~spreadFromSpreadLinkByPathLinkCallback\n   * @param {Error} [error]\n   * @param {string} [newSpreadLinkId]\n   * @param {SpreadLink} [prevSpreadLink]\n   * @param {PathGraph} [pathGraph]\n   * @param {PathLink} [pathLink]\n   */\n  \n  /**\n   * Optional callback. If present, called with an error object as the first argument and, if no error, the unique id of inserted spread link as the second.\n   *\n   * @callback GraphSpreading~spreadFromSpreadLinkByPathLinkCallback\n   */\n  \n  /**\n   * Remove spreadLinks with specific prev spreadLink id.\n   * \n   * @param {string} spreadLinkId\n   * @param {Object} [context]\n   * @param {GraphSpreading~unspreadFromunspreadBySpreadByPrevIdHandler} [handler]\n   * @param {GraphSpreading~unspreadFromunspreadBySpreadByPrevIdCallback} [callback]\n   */\n  unspreadFromunspreadBySpreadByPrevId(spreadLinkId, context, handler, callback) {\n    if (handler) {\n      this.spreadGraph.fetch({ prev: spreadLinkId }, undefined, (error, spreadLinks) => {\n        if (error) {\n          if (callback) callback(error);\n        } else {\n          this.each(spreadLinks, (spreadLink, next) => {\n            this.spreadGraph.remove(spreadLink.id, (error, count) => {\n              handler(error, spreadLink);\n              next();\n            }, context);\n          }, () => {\n            if (callback) callback(undefined, spreadLinks.length);\n          });\n        }\n      });\n    } else {\n      this.spreadGraph.remove({ prev: spreadLinkId }, callback, context);\n    }\n  }\n  \n  /**\n   * Optional handler. If present, called with an error object as the first argument and, if no error, others arguments with results of unspreading.\n   *\n   * @callback GraphSpreading~unspreadFromunspreadBySpreadByPrevIdHandler\n   * @param {Error} [error]\n   * @param {SpreadLink} [spreadLink]\n   */\n  \n  /**\n   * Optional callback.\n   *\n   * @callback GraphSpreading~unspreadFromunspreadBySpreadByPrevIdCallback\n   * @param {Error} [error]\n   * @param {number} [count]\n   */\n  \n  /**\n   * Remove spreadLinks with specific path pathLink id.\n   * \n   * @param {string} pathLinkId\n   * @param {Object} [context]\n   * @param {GraphSpreading~unspreadByPathIdHandler} [handler]\n   * @param {GraphSpreading~unspreadByPathIdCallback} [callback]\n   */\n  unspreadByPathId(pathLinkId, context, handler, callback) {\n    if (handler) {\n      this.spreadGraph.fetch({ path: pathLinkId }, undefined, (error, spreadLinks) => {\n        if (error) {\n          if (callback) callback(error);\n        } else {\n          this.each(spreadLinks, (spreadLink, next) => {\n            this.spreadGraph.remove(spreadLink.id, (error, count) => {\n              handler(error, spreadLink);\n              next();\n            }, context);\n          }, () => {\n            if (callback) callback(undefined, spreadLinks.length);\n          });\n        }\n      });\n    } else {\n      this.spreadGraph.remove({ path: pathLinkId }, callback, context);\n    }\n  }\n  \n  /**\n   * Optional handler.\n   *\n   * @callback GraphSpreading~unspreadByPathIdHandler\n   * @param {Error} [error]\n   * @param {SpreadLink} [spreadLink]\n   */\n  \n  /**\n   * Optional callback.\n   *\n   * @callback GraphSpreading~unspreadByPathIdCallback\n   * @param {Error} [error]\n   * @param {number} [count]\n   */\n  \n  /**\n   * Unspread all valid spreadLinks to this id.\n   * \n   * @param {string} id\n   * @param {Object} [context]\n   * @param {GraphSpreading~unspreadToHandler} [handler]\n   * @param {GraphSpreading~unspreadToCallback} [callback]\n   */\n  unspread(id, context, handler, callback) {\n     this.spreadGraph.fetch({ [this.spreadGraph.variableField]: id }, undefined, (error, spreadLinks) => {\n       if (error) {\n         if (callback) callback(error);\n       } else {\n          this.each(spreadLinks, (spreadLink, next) => {\n           this.spreadGraph._unspreadingHandler(spreadLink, context, (permission) => {\n             if (permission) {\n               this.spreadGraph.remove(spreadLink.id, (error, count) => {\n                 if (handler) handler(error, spreadLink);\n                 next();\n               }, context);\n             }\n           });\n          }, () => {\n            if (callback) callback(undefined, spreadLinks.length);\n          });\n       }\n     });\n  }\n  \n  /**\n   * Optional handler.\n   *\n   * @callback GraphSpreading~unspreadToHandler\n   * @param {Error} [error]\n   * @param {SpreadLink} [spreadLink]\n   */\n  \n  /**\n   * Optional callback.\n   *\n   * @callback GraphSpreading~unspreadToCallback\n   */\n  \n  /**\n   * Spread all spread links from all available paths to this id.\n   * \n   * @param {string} id\n   * @param {Object} [context]\n   * @param {GraphSpreading~spreadToHandler} [handler]\n   * @param {GraphSpreading~spreadToCallback} [callback]\n   */\n   \n  spreadTo(id, context, handler, callback) {\n    this.each(this.pathGraphs, (pathGraph, nextPathGraph) => {\n      pathGraph.fetch({\n        [pathGraph.toFields[0]]: id\n      }, undefined, (error, pathLinks) => {\n        this.each(pathLinks, (pathLink, nextPathLink) => {\n          this.spreadByPathLink(pathGraph, pathLink, context, handler, nextPathLink);\n        }, function(error) {\n          nextPathGraph();\n        });\n      });\n    }, () => {\n      if (callback) callback();\n    });\n  }\n  \n  /**\n   * Optional handler. Fires after each processed spread link.\n   * Id can be empty if the `this.spreadGraph._spreadingHandler` banned spreading.\n   * \n   * @callback GraphSpreading~spreadToHandler\n   * @param {Error} [error]\n   * @param {string} [newSpreadLinkId]\n   * @param {SpreadLink} [prevSpreadLink]\n   * @param {PathGraph} [pathGraph]\n   * @param {PathLink} [pathLink]\n   */\n  \n  /**\n   * Optional callback.\n   *\n   * @callback GraphSpreading~spreadToCallback\n   */\n}\n\nexport { GraphSpreading };"]}