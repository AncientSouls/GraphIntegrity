{"version":3,"sources":["../src/lib/path.js"],"names":["factoryPathGraph","ParentClassGraph","PathGraph","collection","selector","config","arguments","fromField","Error","toField","modifier","callback","context","launched","hasOwnProperty","add"],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;;;;;;AASA,SAASA,gBAAT,CAA0BC,gBAA1B,EAA4C;AAAA,MACpCC,SADoC;AAAA;;AAGxC;;;;;;;;;AASA,uBAAYC,UAAZ,EAAwBC,QAAxB,EAAkCC,MAAlC,EAA0C;AAAA;;AAAA,yHAC/BC,SAD+B;;AAGxC,UAAID,OAAOE,SAAX,EAAsB,MAAKA,SAAL,GAAiBF,OAAOE,SAAxB,CAAtB,KACK,MAAM,IAAIC,KAAJ,CAAU,iCAAV,CAAN;;AAEL,UAAIH,OAAOI,OAAX,EAAoB,MAAKA,OAAL,GAAeJ,OAAOI,OAAtB,CAApB,KACK,MAAM,IAAID,KAAJ,CAAU,+BAAV,CAAN;AAPmC;AAQzC;;AAED;;;;;AAtBwC;AAAA;AAAA,6BAyBjCE,QAzBiC,EAyBvBC,QAzBuB,EAyBbC,OAzBa,EAyBJ;AAClC,YAAI,CAACF,SAASG,QAAd,EAAwBH,SAASG,QAAT,GAAoB,CAAC,QAAD,CAApB;AACxB,4HAAoBH,QAApB,EAA8BC,QAA9B,EAAwCC,OAAxC;AACD;;AAED;;;;AA9BwC;AAAA;AAAA,6BAiCjCR,QAjCiC,EAiCvBM,QAjCuB,EAiCbC,QAjCa,EAiCHC,OAjCG,EAiCM;AAC5C,YACE,CAACF,SAASI,cAAT,CAAwB,UAAxB,CAAD,KACCJ,SAASI,cAAT,CAAwB,KAAKP,SAA7B,KAA2CG,SAASI,cAAT,CAAwB,KAAKL,OAA7B,CAD5C,CADF,EAGE;AACAC,mBAASG,QAAT,GAAoB,EAAEE,KAAK,CAAC,UAAD,EAAa,QAAb,CAAP,EAApB;AACD;AACD,4HAAoBX,QAApB,EAA8BM,QAA9B,EAAwCC,QAAxC,EAAkDC,OAAlD;AACD;;AAED;;;;;AA3CwC;AAAA;AAAA,6BA+CjCR,QA/CiC,EA+CvBO,QA/CuB,EA+CbC,OA/Ca,EA+CJ;AAClC,YAAI,CAACA,OAAL,EAAc,IAAIA,UAAU,EAAd;AACd,YAAI,CAACA,QAAQF,QAAb,EAAuBE,QAAQF,QAAR,GAAmB,EAAnB;AACvBE,gBAAQF,QAAR,CAAiBG,QAAjB,GAA4B,CAAC,UAAD,CAA5B;AACA,4HAAoBT,QAApB,EAA8BO,QAA9B,EAAwCC,OAAxC;AACD;AApDuC;;AAAA;AAAA,IAClBX,gBADkB;;AAuD1C,SAAOC,SAAP;AACD;;QAEQF,gB,GAAAA,gB","file":"path.js","sourcesContent":["/**\n * This method allows you to use PathGraph class to its inheritance chain.\n * Field launched is required!\n * Manage field launched.\n * \n * @param {Class} ParentClassGraph\n * @return {Class} PathGraph\n * @description `import { factoryPathGraph } from 'ancient-graph-spreading';`\n */\nfunction factoryPathGraph(ParentClassGraph) {\n  class PathGraph extends ParentClassGraph {\n    \n    /**\n     * Parent constrctor arguments taken in args array.\n     * \n     * @param {} collection - A pointer to the collection dannymineobhodimye daapteru to work with the graph. This may be a connection to the SQL database and table name, for example, or a collection of Mongo. \n     * @param {Object} fields - Comparison of the data in the collection of data in the graph. It is necessary for the adapter.\n     * @param {Object} config - Additional config.\n     * @param {String} config.fromField - Start direction in path link\n     * @param {String} config.toField - End direction in path link\n     */\n    constructor(collection, selector, config) {\n      super(...arguments);\n      \n      if (config.fromField) this.fromField = config.fromField;\n      else throw new Error('config.fromField is not defined');\n      \n      if (config.toField) this.toField = config.toField;\n      else throw new Error('config.toField is not defined');\n    }\n    \n    /**\n     * Parent insert with added launched field. You can override it field in modifier.\n     */\n    insert(modifier, callback, context) {\n      if (!modifier.launched) modifier.launched = ['spread'];\n      return super.insert(modifier, callback, context);\n    }\n    \n    /**\n     * Parent update, but if source or target changed, then to the launched field will be added values unspread and spread. You can override it field in modifier.\n     */\n    update(selector, modifier, callback, context) {\n      if (\n        !modifier.hasOwnProperty('launched') &&\n        (modifier.hasOwnProperty(this.fromField) || modifier.hasOwnProperty(this.toField))\n      ) {\n        modifier.launched = { add: ['unspread', 'spread'] };\n      }\n      return super.update(selector, modifier, callback, context);\n    }\n    \n    /**\n     * The method is strictly designed so that the class inherits from ExistedGraph.\n     * Adds to launched field unspread value.\n     */\n    remove(selector, callback, context) {\n      if (!context) var context = {};\n      if (!context.modifier) context.modifier = {};\n      context.modifier.launched = ['unspread'];\n      return super.remove(selector, callback, context);\n    }\n  }\n  \n  return PathGraph;\n};\n\nexport { factoryPathGraph };"]}