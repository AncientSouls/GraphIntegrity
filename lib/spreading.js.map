{"version":3,"sources":["../src/lib/spreading.js"],"names":["GraphSpreading","spreadGraph","pathGraphs","coll","iteratee","callback","each","pathGraph","push","query","context","fromField","toField","pathLink","spreadLink","fromFields","toFields","handler","variableField","_wrapSpreadQuery","fetch","undefined","error","spreadLinks","length","next","spreadFromSpreadLinkByPathLink","_getFromFields","_spreadByPathLink","newSpreadLink","_spreadingHandler","insert","spreadFromSpreadLinkByPathGraph","_wrapPathQuery","pathLinks","_spreadFromSpreadLinkByPathGraph","constantField","id","root","_getToFields","_spreadFromSpreadLinkByPathLink","prev","spreadLinkId","remove","count","pathLinkId","path","_unspreadingHandler","permission","nextPathGraph","nextToField","nextPathLink","spreadByPathLink"],"mappings":"kmBAAA,4B,gcAEA;;;;;MAMMA,e,YAEJ;;KAGA,wBAAYC,WAAZ,CAAyB,sCACvB,KAAKA,WAAL,CAAmBA,WAAnB,CACA,KAAKC,UAAL,CAAkB,EACnB,CAED;;;;;;kEAOKC,I,CAAMC,Q,CAAUC,Q,CAAU,CAC7B,gBAAMC,IAAN,CAAWH,IAAX,CAAiBC,QAAjB,CAA2BC,QAA3B,CACD,CAED;;uDAGaE,S,CAAW,CACtB,KAAKL,UAAL,CAAgBM,IAAhB,CAAqBD,SAArB,CACD,CAED;;;;;+DAMiBE,K,CAAOC,O,CAAS,CAAE,CAEnC;;;;;;;;2DASeD,K,CAAOF,S,CAAWI,S,CAAWC,O,CAASF,O,CAAS,CAAE,CAEhE;;;;;;;2DAQeH,S,CAAWM,Q,CAAUC,U,CAAY,CAC9C,MAAOP,WAAUQ,UAClB,CAED;;;;;;;uDAQaR,S,CAAWM,Q,CAAUC,U,CAAY,CAC5C,MAAOP,WAAUS,QAClB,CAED;;;;;;;;;iEAUkBL,S,CAAWJ,S,CAAWM,Q,CAAUH,O,CAASO,O,CAASZ,Q,CAAU,gBAC5E,GAAII,0BACD,KAAKR,WAAL,CAAiBiB,aADhB,CACgCL,SAASF,SAAT,CADhC,CAAJ,CAGA,KAAKQ,gBAAL,CAAsBV,KAAtB,CAA6BC,OAA7B,EACA,KAAKT,WAAL,CAAiBmB,KAAjB,CAAuBX,KAAvB,CAA8BY,SAA9B,CAAyC,SAACC,KAAD,CAAQC,WAAR,CAAwB,CAC/D,GAAIA,YAAYC,MAAhB,CAAwB,CACtB,MAAKlB,IAAL,CAAUiB,WAAV,CAAuB,SAACT,UAAD,CAAaW,IAAb,CAAsB,CAC3C,MAAKC,8BAAL,CAAoCZ,UAApC,CAAgDP,SAAhD,CAA2DM,QAA3D,CAAqEH,OAArE,CAA8EO,OAA9E,CAAuF,UAAM,CAAEQ,MAAS,CAAxG,CACD,CAFD,CAEG,UAAM,CACP,GAAIpB,QAAJ,CAAcA,UACf,CAJD,CAKD,CAND,IAMO,CACL,GAAIA,QAAJ,CAAcA,UACf,CACF,CAVD,CAWD,CAED;;;;;;;;+DASiBE,S,CAAWM,Q,CAAUH,O,CAASO,O,CAASZ,Q,CAAU,iBAChE,KAAKC,IAAL,CAAU,KAAKqB,cAAL,CAAoBpB,SAApB,CAA+BM,QAA/B,CAAV,CAAoD,SAACF,SAAD,CAAYc,IAAZ,CAAqB,CACvE,OAAKG,iBAAL,CAAuBjB,SAAvB,CAAkCJ,SAAlC,CAA6CM,QAA7C,CAAuDH,OAAvD,CAAgEO,OAAhE,CAAyEQ,IAAzE,CACD,CAFD,CAEGpB,QAFH,CAGD,CAED;;;;KAMA;;;;;;qEAOoBwB,a,CAAenB,O,CAASL,Q,CAAU,iBACpD,KAAKJ,WAAL,CAAiB6B,iBAAjB,CAAmCT,SAAnC,CAA8CA,SAA9C,CAAyDA,SAAzD,CAAoEQ,aAApE,CAAmFnB,OAAnF,CAA4F,SAACmB,aAAD,CAAmB,CAC7G,GAAIA,aAAJ,CAAmB,CACjB,OAAK5B,WAAL,CAAiB8B,MAAjB,CAAwBF,aAAxB,CAAuCxB,QAAvC,CAAiDK,OAAjD,CACD,CAFD,IAEO,CACL,GAAIL,QAAJ,CAAcA,UACf,CACF,CAND,CAOD,CAED;;;;;;;uEAQqBS,U,CAAYJ,O,CAASO,O,CAASZ,Q,CAAU,iBAC3D,KAAKC,IAAL,CAAU,KAAKJ,UAAf,CAA2B,SAACK,SAAD,CAAYkB,IAAZ,CAAqB,CAC9C,OAAKO,+BAAL,CAAqClB,UAArC,CAAiDP,SAAjD,CAA4DG,OAA5D,CAAqEO,OAArE,CAA8EQ,IAA9E,CACD,CAFD,CAEG,UAAM,CACP,GAAIpB,QAAJ,CAAcA,UACf,CAJD,CAKD,CAED;;;;;;;;;+FAUiCM,S,CAAWG,U,CAAYP,S,CAAWG,O,CAASO,O,CAASZ,Q,CAAU,iBAC7F,GAAII,0BACDE,SADC,CACWG,WAAW,KAAKb,WAAL,CAAiBiB,aAA5B,CADX,CAAJ,CAGA,KAAKe,cAAL,CAAoBxB,KAApB,CAA2BF,SAA3B,CAAsCI,SAAtC,CAAiDU,SAAjD,CAA4DX,OAA5D,EACAH,UAAUa,KAAV,CAAgBX,KAAhB,CAAuBY,SAAvB,CAAkC,SAACC,KAAD,CAAQY,SAAR,CAAsB,CACtD,OAAK5B,IAAL,CAAU4B,SAAV,CAAqB,SAACrB,QAAD,CAAWY,IAAX,CAAoB,CACvC,OAAKC,8BAAL,CAAoCZ,UAApC,CAAgDP,SAAhD,CAA2DM,QAA3D,CAAqEH,OAArE,CAA8EO,OAA9E,CAAuFQ,IAAvF,CACD,CAFD,CAEG,UAAM,CACP,GAAIpB,QAAJ,CAAcA,UACf,CAJD,CAKD,CAND,CAOD,CAED;;;;;;;6FAQgCS,U,CAAYP,S,CAAWG,O,CAASO,O,CAASZ,Q,CAAU,iBACjF,KAAKC,IAAL,CAAU,KAAKqB,cAAL,CAAoBpB,SAApB,CAA+Bc,SAA/B,CAA0CP,UAA1C,CAAV,CAAiE,SAACH,SAAD,CAAYc,IAAZ,CAAqB,CACpF,OAAKU,gCAAL,CAAsCxB,SAAtC,CAAiDG,UAAjD,CAA6DP,SAA7D,CAAwEG,OAAxE,CAAiFO,OAAjF,CAA0FQ,IAA1F,CACD,CAFD,CAEGpB,QAFH,CAGD,CAED;;;;;;;;;KAWA;;;;KAMA;;;;;;;;6FASgCO,O,CAASE,U,CAAYP,S,CAAWM,Q,CAAUH,O,CAASL,Q,CAAU,uCAC3F,KAAKJ,WAAL,CAAiB6B,iBAAjB,CAAmChB,UAAnC,CAA+CP,SAA/C,CAA0DM,QAA1D,iEACG,KAAKZ,WAAL,CAAiBmC,aADpB,CACoCtB,WAAW,KAAKb,WAAL,CAAiBmC,aAA5B,CADpC,wCAEG,KAAKnC,WAAL,CAAiBiB,aAFpB,CAEoCL,SAASD,OAAT,CAFpC,+CAGQE,WAAWuB,EAHnB,+CAIQxB,SAASwB,EAJjB,+CAKQvB,WAAWwB,IAAX,CAAgBxB,WAAWwB,IAA3B,CAAgCxB,WAAWuB,EALnD,yBAMG3B,OANH,CAMY,SAACmB,aAAD,CAAmB,CAC7B,GAAIA,aAAJ,CAAmB,CACjB,OAAK5B,WAAL,CAAiB8B,MAAjB,CAAwBF,aAAxB,CAAuC,SAACP,KAAD,CAAQe,EAAR,CAAe,CACpD,GAAIhC,QAAJ,CAAcA,SAASiB,KAAT,CAAgBe,EAAhB,CAAoBvB,UAApB,CAAgCP,SAAhC,CAA2CM,QAA3C,CACf,CAFD,CAEGH,OAFH,CAGD,CAJD,IAIO,CACL,GAAIL,QAAJ,CAAcA,UACf,CACF,CAdD,CAeD,CAED;;;;;;;;;2FAU+BS,U,CAAYP,S,CAAWM,Q,CAAUH,O,CAASO,O,CAASZ,Q,CAAU,iBAC1F,KAAKC,IAAL,CAAU,KAAKiC,YAAL,CAAkBhC,SAAlB,CAA6BM,QAA7B,CAAuCC,UAAvC,CAAV,CAA8D,SAACF,OAAD,CAAUa,IAAV,CAAmB,CAC/E,OAAKe,+BAAL,CAAqC5B,OAArC,CAA8CE,UAA9C,CAA0DP,SAA1D,CAAqEM,QAArE,CAA+EH,OAA/E,CAAwF,SAACY,KAAD,CAAQe,EAAR,CAAYI,IAAZ,CAAkBlC,SAAlB,CAA6BM,QAA7B,CAA0C,CAChI,GAAII,OAAJ,CAAaA,QAAQK,KAAR,CAAee,EAAf,CAAmBI,IAAnB,CAAyBlC,SAAzB,CAAoCM,QAApC,EACbY,MACD,CAHD,CAID,CALD,CAKGpB,QALH,CAMD,CAED;;;;;;;;;KAWA;;;;KAMA;;;;;;;yGAQsCqC,Y,CAAchC,O,CAASO,O,CAASZ,Q,CAAU,iBAC9E,GAAII,OAAQ,CACVgC,KAAMC,YADI,CAAZ,CAGA,KAAKvB,gBAAL,CAAsBV,KAAtB,CAA6BC,OAA7B,EACA,GAAIO,OAAJ,CAAa,CACX,KAAKhB,WAAL,CAAiBmB,KAAjB,CAAuBX,KAAvB,CAA8BY,SAA9B,CAAyC,SAACC,KAAD,CAAQC,WAAR,CAAwB,CAC/D,GAAID,KAAJ,CAAW,CACT,GAAIjB,QAAJ,CAAcA,SAASiB,KAAT,CACf,CAFD,IAEO,CACL,OAAKhB,IAAL,CAAUiB,WAAV,CAAuB,SAACT,UAAD,CAAaW,IAAb,CAAsB,CAC3C,OAAKxB,WAAL,CAAiB0C,MAAjB,CAAwB7B,WAAWuB,EAAnC,CAAuC,SAACf,KAAD,CAAQsB,KAAR,CAAkB,CACvD3B,QAAQK,KAAR,CAAeR,UAAf,EACAW,MACD,CAHD,CAGGf,OAHH,CAID,CALD,CAKG,UAAM,CACP,GAAIL,QAAJ,CAAcA,SAASgB,SAAT,CAAoBE,YAAYC,MAAhC,CACf,CAPD,CAQD,CACF,CAbD,CAcD,CAfD,IAeO,CACL,KAAKvB,WAAL,CAAiB0C,MAAjB,CAAwBlC,KAAxB,CAA+BJ,QAA/B,CAAyCK,OAAzC,CACD,CACF,CAED;;;;;;KAQA;;;;;;KAQA;;;;;;;+DAQiBmC,U,CAAYnC,O,CAASO,O,CAASZ,Q,CAAU,kBACvD,GAAII,OAAQ,CACVqC,KAAMD,UADI,CAAZ,CAGA,KAAK1B,gBAAL,CAAsBV,KAAtB,CAA6BC,OAA7B,EACA,GAAIO,OAAJ,CAAa,CACX,KAAKhB,WAAL,CAAiBmB,KAAjB,CAAuBX,KAAvB,CAA8BY,SAA9B,CAAyC,SAACC,KAAD,CAAQC,WAAR,CAAwB,CAC/D,GAAID,KAAJ,CAAW,CACT,GAAIjB,QAAJ,CAAcA,SAASiB,KAAT,CACf,CAFD,IAEO,CACL,QAAKhB,IAAL,CAAUiB,WAAV,CAAuB,SAACT,UAAD,CAAaW,IAAb,CAAsB,CAC3C,QAAKxB,WAAL,CAAiB0C,MAAjB,CAAwB7B,WAAWuB,EAAnC,CAAuC,SAACf,KAAD,CAAQsB,KAAR,CAAkB,CACvD3B,QAAQK,KAAR,CAAeR,UAAf,EACAW,MACD,CAHD,CAGGf,OAHH,CAID,CALD,CAKG,UAAM,CACP,GAAIL,QAAJ,CAAcA,SAASgB,SAAT,CAAoBE,YAAYC,MAAhC,CACf,CAPD,CAQD,CACF,CAbD,CAcD,CAfD,IAeO,CACL,KAAKvB,WAAL,CAAiB0C,MAAjB,CAAwBlC,KAAxB,CAA+BJ,QAA/B,CAAyCK,OAAzC,CACD,CACF,CAED;;;;;;KAQA;;;;;;KAQA;;;;;;;+CAQS2B,E,CAAI3B,O,CAASO,O,CAASZ,Q,CAAU,kBACvC,GAAII,0BACD,KAAKR,WAAL,CAAiBiB,aADhB,CACgCmB,EADhC,CAAJ,CAGA,KAAKlB,gBAAL,CAAsBV,KAAtB,CAA6BC,OAA7B,EACA,KAAKT,WAAL,CAAiBmB,KAAjB,CAAuBX,KAAvB,CAA8BY,SAA9B,CAAyC,SAACC,KAAD,CAAQC,WAAR,CAAwB,CAC/D,GAAID,KAAJ,CAAW,CACT,GAAIjB,QAAJ,CAAcA,SAASiB,KAAT,CACf,CAFD,IAEO,CACL,QAAKhB,IAAL,CAAUiB,WAAV,CAAuB,SAACT,UAAD,CAAaW,IAAb,CAAsB,CAC3C,QAAKxB,WAAL,CAAiB8C,mBAAjB,CAAqCjC,UAArC,CAAiDJ,OAAjD,CAA0D,SAACsC,UAAD,CAAgB,CACxE,GAAIA,UAAJ,CAAgB,CACd,QAAK/C,WAAL,CAAiB0C,MAAjB,CAAwB7B,WAAWuB,EAAnC,CAAuC,SAACf,KAAD,CAAQsB,KAAR,CAAkB,CACvD,GAAI3B,OAAJ,CAAaA,QAAQK,KAAR,CAAeR,UAAf,EACbW,MACD,CAHD,CAGGf,OAHH,CAID,CACF,CAPD,CAQD,CATD,CASG,UAAM,CACP,GAAIL,QAAJ,CAAcA,SAASgB,SAAT,CAAoBE,YAAYC,MAAhC,CACf,CAXD,CAYD,CACF,CAjBD,CAkBD,CAED;;;;;;KAQA;;;;KAMA;;;;;;;+CASSa,E,CAAI3B,O,CAASO,O,CAASZ,Q,CAAU,kBACvC,KAAKC,IAAL,CAAU,KAAKJ,UAAf,CAA2B,SAACK,SAAD,CAAY0C,aAAZ,CAA8B,CACvD,QAAK3C,IAAL,CAAU,QAAKiC,YAAL,CAAkBhC,SAAlB,CAAV,CAAwC,SAACK,OAAD,CAAUsC,WAAV,CAA0B,CAChE,GAAIzC,0BACDG,OADC,CACSyB,EADT,CAAJ,CAGA,QAAKJ,cAAL,CAAoBxB,KAApB,CAA2BF,SAA3B,CAAsCc,SAAtC,CAAiDT,OAAjD,CAA0DF,OAA1D,EACAH,UAAUa,KAAV,CAAgBX,KAAhB,CAAuBY,SAAvB,CAAkC,SAACC,KAAD,CAAQY,SAAR,CAAsB,CACtD,QAAK5B,IAAL,CAAU4B,SAAV,CAAqB,SAACrB,QAAD,CAAWsC,YAAX,CAA4B,CAC/C,QAAKC,gBAAL,CAAsB7C,SAAtB,CAAiCM,QAAjC,CAA2CH,OAA3C,CAAoDO,OAApD,CAA6DkC,YAA7D,CACD,CAFD,CAEG,SAAS7B,KAAT,CAAgB,CACjB4B,aACD,CAJD,CAKD,CAND,CAOD,CAZD,CAYGD,aAZH,CAaD,CAdD,CAcG,UAAM,CACP,GAAI5C,QAAJ,CAAcA,UACf,CAhBD,CAiBD,CAED;;;;;;;;;;KAYA;;;;0CAOOL,c,CAAAA,c","file":"spreading.js","sourcesContent":["import async from 'async';\r\n\r\n/**\r\n * Class with methods for spread and unspread of the spreadGraph on pathGraph(s).\r\n * \r\n * @class\r\n * @description `import { GraphSpreading } from 'ancient-graph-spreading';`\r\n */\r\nclass GraphSpreading {\r\n  \r\n  /**\r\n   * @param {SpreadGraph} spreadGraph\r\n   */\r\n  constructor(spreadGraph) {\r\n    this.spreadGraph = spreadGraph;\r\n    this.pathGraphs = [];\r\n  }\r\n  \r\n  /**\r\n   * Custom async callbacks support\r\n   * \r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {function} iteratee - A function to apply to each item in coll.\r\n   * @param {function} callback - A callback which is called when all iteratee functions have finished.\r\n   */\r\n  each(coll, iteratee, callback) {\r\n    async.each(coll, iteratee, callback);\r\n  }\r\n  \r\n  /**\r\n   * @param {PathGraph} pathGraph\r\n   */\r\n  addPathGraph(pathGraph) {\r\n    this.pathGraphs.push(pathGraph);\r\n  }\r\n\r\n  /**\r\n   * Custom wrapper of query to spread graph\r\n   * \r\n   * @param {Object} [query]\r\n   * @param {Object} [context]\r\n   */\r\n  _wrapSpreadQuery(query, context) {}\r\n\r\n  /**\r\n   * Custom wrapper of query to path graph\r\n   * \r\n   * @param {Object} [query]\r\n   * @param {Object} [pathGraph]\r\n   * @param {String} [fromField]\r\n   * @param {String} [toField]\r\n   * @param {Object} [context]\r\n   */\r\n  _wrapPathQuery(query, pathGraph, fromField, toField, context) {}\r\n\r\n  /**\r\n   * Custom getter of possible from fields.\r\n   * \r\n   * @param {Object} [pathGraph]\r\n   * @param {Object} [pathLink]\r\n   * @param {Object} [spreadLink]\r\n   * @return {String[]} [fromFields]\r\n   */\r\n  _getFromFields(pathGraph, pathLink, spreadLink) {\r\n    return pathGraph.fromFields;\r\n  }\r\n\r\n  /**\r\n   * Custom getter of possible to fields.\r\n   * \r\n   * @param {Object} [pathGraph]\r\n   * @param {Object} [pathLink]\r\n   * @param {Object} [spreadLink]\r\n   * @return {String[]} [toFields]\r\n   */\r\n  _getToFields(pathGraph, pathLink, spreadLink) {\r\n    return pathGraph.toFields;\r\n  }\r\n  \r\n  /**\r\n   * Spread by pathLink and specified fromField with available spreadLinks.\r\n   * \r\n   * @param {string} fromField\r\n   * @param {PathGraph} pathGraph\r\n   * @param {PathLink} pathLink\r\n   * @param {Object} [context]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathLinkCallback} [handler]\r\n   * @param {GraphSpreading~spreadByPathLinkCallback} [callback]\r\n   */\r\n  _spreadByPathLink(fromField, pathGraph, pathLink, context, handler, callback) {\r\n    var query = {\r\n      [this.spreadGraph.variableField]: pathLink[fromField],\r\n    };\r\n    this._wrapSpreadQuery(query, context);\r\n    this.spreadGraph.fetch(query, undefined, (error, spreadLinks) => {\r\n      if (spreadLinks.length) {\r\n        this.each(spreadLinks, (spreadLink, next) => {\r\n          this.spreadFromSpreadLinkByPathLink(spreadLink, pathGraph, pathLink, context, handler, () => { next(); });\r\n        }, () => {\r\n          if (callback) callback();\r\n        });\r\n      } else {\r\n        if (callback) callback();\r\n      }\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Spread by pathLink with available spreadLinks.\r\n   * \r\n   * @param {PathGraph} pathGraph\r\n   * @param {PathLink} pathLink\r\n   * @param {Object} [context]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathLinkCallback} [handler]\r\n   * @param {GraphSpreading~spreadByPathLinkCallback} [callback]\r\n   */\r\n  spreadByPathLink(pathGraph, pathLink, context, handler, callback) {\r\n    this.each(this._getFromFields(pathGraph, pathLink), (fromField, next) => {\r\n      this._spreadByPathLink(fromField, pathGraph, pathLink, context, handler, next);\r\n    }, callback);\r\n  }\r\n  \r\n  /**\r\n   * Optional callback.\r\n   *\r\n   * @callback GraphSpreading~spreadByPathLinkCallback\r\n   */\r\n  \r\n  /**\r\n   * Spread root of tree spreadLink.\r\n   * \r\n   * @param {SpreadLink} newSpreadLink\r\n   * @param {Object} [context]\r\n   * @param {Graph~insertCallback} [callback]\r\n   */\r\n  spreadNewSpreadLink(newSpreadLink, context, callback) {\r\n    this.spreadGraph._spreadingHandler(undefined, undefined, undefined, newSpreadLink, context, (newSpreadLink) => {\r\n      if (newSpreadLink) {\r\n        this.spreadGraph.insert(newSpreadLink, callback, context);\r\n      } else {\r\n        if (callback) callback();\r\n      }\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Spread by all available paths from spreadLink.\r\n   * \r\n   * @param {SpreadLink} spreadLink\r\n   * @param {Object} [context]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphHandler} [handler]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphCallback} [callback]\r\n   */\r\n  spreadFromSpreadLink(spreadLink, context, handler, callback) {\r\n    this.each(this.pathGraphs, (pathGraph, next) => {\r\n      this.spreadFromSpreadLinkByPathGraph(spreadLink, pathGraph, context, handler, next);\r\n    }, () => {\r\n      if (callback) callback();\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Spread by all available paths in pathGraph from spreadLink and specified fromField.\r\n   * \r\n   * @param {string} fromField\r\n   * @param {SpreadLink} spreadLink\r\n   * @param {PathGraph} pathGraph\r\n   * @param {Object} [context]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphHandler} [handler]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphCallback} [callback]\r\n   */\r\n  _spreadFromSpreadLinkByPathGraph(fromField, spreadLink, pathGraph, context, handler, callback) {\r\n    var query = {\r\n      [fromField]: spreadLink[this.spreadGraph.variableField],\r\n    };\r\n    this._wrapPathQuery(query, pathGraph, fromField, undefined, context);\r\n    pathGraph.fetch(query, undefined, (error, pathLinks) => {\r\n      this.each(pathLinks, (pathLink, next) => {\r\n        this.spreadFromSpreadLinkByPathLink(spreadLink, pathGraph, pathLink, context, handler, next);\r\n      }, () => {\r\n        if (callback) callback();\r\n      });\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Spread by all available paths in pathGraph from spreadLink.\r\n   * \r\n   * @param {SpreadLink} spreadLink\r\n   * @param {PathGraph} pathGraph\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphHandler} [handler]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphCallback} [callback]\r\n   */\r\n  spreadFromSpreadLinkByPathGraph(spreadLink, pathGraph, context, handler, callback) {\r\n    this.each(this._getFromFields(pathGraph, undefined, spreadLink), (fromField, next) => {\r\n      this._spreadFromSpreadLinkByPathGraph(fromField, spreadLink, pathGraph, context, handler, next);\r\n    }, callback);\r\n  }\r\n  \r\n  /**\r\n   * Optional handler. If present, called with an error object as the first argument and, if no error, others arguments with results of spreading.\r\n   *\r\n   * @callback GraphSpreading~spreadFromSpreadLinkByPathGraphHandler\r\n   * @param {Error} [error]\r\n   * @param {string} [newSpreadLinkId]\r\n   * @param {SpreadLink} [prevSpreadLink]\r\n   * @param {PathGraph} [pathGraph]\r\n   * @param {PathLink} [pathLink]\r\n   */\r\n  \r\n  /**\r\n   * Optional callback.\r\n   *\r\n   * @callback GraphSpreading~spreadFromSpreadLinkByPathGraphCallback\r\n   */\r\n  \r\n  /**\r\n   * Spread by pathLink and specified toField in pathGraph from spreadLink.\r\n   * \r\n   * @param {SpreadLink} spreadLink\r\n   * @param {PathGraph} pathGraph\r\n   * @param {PathLink} pathLink\r\n   * @param {Object} [context]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathLinkCallback} [callback]\r\n   */\r\n  _spreadFromSpreadLinkByPathLink(toField, spreadLink, pathGraph, pathLink, context, callback) {\r\n    this.spreadGraph._spreadingHandler(spreadLink, pathGraph, pathLink, {\r\n      [this.spreadGraph.constantField]: spreadLink[this.spreadGraph.constantField],\r\n      [this.spreadGraph.variableField]: pathLink[toField],\r\n      prev: spreadLink.id,\r\n      path: pathLink.id,\r\n      root: spreadLink.root?spreadLink.root:spreadLink.id\r\n    }, context, (newSpreadLink) => {\r\n      if (newSpreadLink) {\r\n        this.spreadGraph.insert(newSpreadLink, (error, id) => {\r\n          if (callback) callback(error, id, spreadLink, pathGraph, pathLink);\r\n        }, context);\r\n      } else {\r\n        if (callback) callback();\r\n      }\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Spread by pathLink in pathGraph from spreadLink.\r\n   * \r\n   * @param {SpreadLink} spreadLink\r\n   * @param {PathGraph} pathGraph\r\n   * @param {PathLink} pathLink\r\n   * @param {Object} [context]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathLinkHandler} [handler]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathLinkCallback} [callback]\r\n   */\r\n  spreadFromSpreadLinkByPathLink(spreadLink, pathGraph, pathLink, context, handler, callback) {\r\n    this.each(this._getToFields(pathGraph, pathLink, spreadLink), (toField, next) => {\r\n      this._spreadFromSpreadLinkByPathLink(toField, spreadLink, pathGraph, pathLink, context, (error, id, prev, pathGraph, pathLink) => {\r\n        if (handler) handler(error, id, prev, pathGraph, pathLink);\r\n        next();\r\n      });\r\n    }, callback);\r\n  }\r\n  \r\n  /**\r\n   * Optional handler.\r\n   *\r\n   * @callback GraphSpreading~spreadFromSpreadLinkByPathLinkCallback\r\n   * @param {Error} [error]\r\n   * @param {string} [newSpreadLinkId]\r\n   * @param {SpreadLink} [prevSpreadLink]\r\n   * @param {PathGraph} [pathGraph]\r\n   * @param {PathLink} [pathLink]\r\n   */\r\n  \r\n  /**\r\n   * Optional callback. If present, called with an error object as the first argument and, if no error, the unique id of inserted spread link as the second.\r\n   *\r\n   * @callback GraphSpreading~spreadFromSpreadLinkByPathLinkCallback\r\n   */\r\n  \r\n  /**\r\n   * Remove spreadLinks with specific prev spreadLink id.\r\n   * \r\n   * @param {string} spreadLinkId\r\n   * @param {Object} [context]\r\n   * @param {GraphSpreading~unspreadFromRemovedSpreadLinkByPrevIdHandler} [handler]\r\n   * @param {GraphSpreading~unspreadFromRemovedSpreadLinkByPrevIdCallback} [callback]\r\n   */\r\n  unspreadFromRemovedSpreadLinkByPrevId(spreadLinkId, context, handler, callback) {\r\n    var query = {\r\n      prev: spreadLinkId,\r\n    };\r\n    this._wrapSpreadQuery(query, context);\r\n    if (handler) {\r\n      this.spreadGraph.fetch(query, undefined, (error, spreadLinks) => {\r\n        if (error) {\r\n          if (callback) callback(error);\r\n        } else {\r\n          this.each(spreadLinks, (spreadLink, next) => {\r\n            this.spreadGraph.remove(spreadLink.id, (error, count) => {\r\n              handler(error, spreadLink);\r\n              next();\r\n            }, context);\r\n          }, () => {\r\n            if (callback) callback(undefined, spreadLinks.length);\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      this.spreadGraph.remove(query, callback, context);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Optional handler. If present, called with an error object as the first argument and, if no error, others arguments with results of unspreading.\r\n   *\r\n   * @callback GraphSpreading~unspreadFromRemovedSpreadLinkByPrevIdHandler\r\n   * @param {Error} [error]\r\n   * @param {SpreadLink} [spreadLink]\r\n   */\r\n  \r\n  /**\r\n   * Optional callback.\r\n   *\r\n   * @callback GraphSpreading~unspreadFromRemovedSpreadLinkByPrevIdCallback\r\n   * @param {Error} [error]\r\n   * @param {number} [count]\r\n   */\r\n  \r\n  /**\r\n   * Remove spreadLinks with specific path pathLink id.\r\n   * \r\n   * @param {string} pathLinkId\r\n   * @param {Object} [context]\r\n   * @param {GraphSpreading~unspreadByPathIdHandler} [handler]\r\n   * @param {GraphSpreading~unspreadByPathIdCallback} [callback]\r\n   */\r\n  unspreadByPathId(pathLinkId, context, handler, callback) {\r\n    var query = {\r\n      path: pathLinkId,\r\n    };\r\n    this._wrapSpreadQuery(query, context);\r\n    if (handler) {\r\n      this.spreadGraph.fetch(query, undefined, (error, spreadLinks) => {\r\n        if (error) {\r\n          if (callback) callback(error);\r\n        } else {\r\n          this.each(spreadLinks, (spreadLink, next) => {\r\n            this.spreadGraph.remove(spreadLink.id, (error, count) => {\r\n              handler(error, spreadLink);\r\n              next();\r\n            }, context);\r\n          }, () => {\r\n            if (callback) callback(undefined, spreadLinks.length);\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      this.spreadGraph.remove(query, callback, context);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Optional handler.\r\n   *\r\n   * @callback GraphSpreading~unspreadByPathIdHandler\r\n   * @param {Error} [error]\r\n   * @param {SpreadLink} [spreadLink]\r\n   */\r\n  \r\n  /**\r\n   * Optional callback.\r\n   *\r\n   * @callback GraphSpreading~unspreadByPathIdCallback\r\n   * @param {Error} [error]\r\n   * @param {number} [count]\r\n   */\r\n  \r\n  /**\r\n   * Unspread all valid spreadLinks to this id.\r\n   * \r\n   * @param {string} id\r\n   * @param {Object} [context]\r\n   * @param {GraphSpreading~unspreadToHandler} [handler]\r\n   * @param {GraphSpreading~unspreadToCallback} [callback]\r\n   */\r\n  unspread(id, context, handler, callback) {\r\n    var query = {\r\n      [this.spreadGraph.variableField]: id,\r\n    };\r\n    this._wrapSpreadQuery(query, context);\r\n    this.spreadGraph.fetch(query, undefined, (error, spreadLinks) => {\r\n      if (error) {\r\n        if (callback) callback(error);\r\n      } else {\r\n        this.each(spreadLinks, (spreadLink, next) => {\r\n          this.spreadGraph._unspreadingHandler(spreadLink, context, (permission) => {\r\n            if (permission) {\r\n              this.spreadGraph.remove(spreadLink.id, (error, count) => {\r\n                if (handler) handler(error, spreadLink);\r\n                next();\r\n              }, context);\r\n            }\r\n          });\r\n        }, () => {\r\n          if (callback) callback(undefined, spreadLinks.length);\r\n        });\r\n      }\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Optional handler.\r\n   *\r\n   * @callback GraphSpreading~unspreadToHandler\r\n   * @param {Error} [error]\r\n   * @param {SpreadLink} [spreadLink]\r\n   */\r\n  \r\n  /**\r\n   * Optional callback.\r\n   *\r\n   * @callback GraphSpreading~unspreadToCallback\r\n   */\r\n  \r\n  /**\r\n   * Spread all spread links from all available paths to this id.\r\n   * \r\n   * @param {string} id\r\n   * @param {Object} [context]\r\n   * @param {GraphSpreading~spreadToHandler} [handler]\r\n   * @param {GraphSpreading~spreadToCallback} [callback]\r\n   */\r\n   \r\n  spreadTo(id, context, handler, callback) {\r\n    this.each(this.pathGraphs, (pathGraph, nextPathGraph) => {\r\n      this.each(this._getToFields(pathGraph), (toField, nextToField) => {\r\n        var query = {\r\n          [toField]: id,\r\n        };\r\n        this._wrapPathQuery(query, pathGraph, undefined, toField, context);\r\n        pathGraph.fetch(query, undefined, (error, pathLinks) => {\r\n          this.each(pathLinks, (pathLink, nextPathLink) => {\r\n            this.spreadByPathLink(pathGraph, pathLink, context, handler, nextPathLink);\r\n          }, function(error) {\r\n            nextToField();\r\n          });\r\n        });\r\n      }, nextPathGraph);\r\n    }, () => {\r\n      if (callback) callback();\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Optional handler. Fires after each processed spread link.\r\n   * Id can be empty if the `this.spreadGraph._spreadingHandler` banned spreading.\r\n   * \r\n   * @callback GraphSpreading~spreadToHandler\r\n   * @param {Error} [error]\r\n   * @param {string} [newSpreadLinkId]\r\n   * @param {SpreadLink} [prevSpreadLink]\r\n   * @param {PathGraph} [pathGraph]\r\n   * @param {PathLink} [pathLink]\r\n   */\r\n  \r\n  /**\r\n   * Optional callback.\r\n   *\r\n   * @callback GraphSpreading~spreadToCallback\r\n   */\r\n}\r\n\r\nexport { GraphSpreading };"]}