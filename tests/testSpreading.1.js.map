{"version":3,"sources":["../src/tests/testSpreading.1.js"],"names":["testGraphSpreading","generateGraphSpreading","it","done","pathGraph","spreadGraph","graphSpreading","insert","source","target","error","pathLinkId","spreadLinkId0","fetch","undefined","spreadLinks","lengthOf","pathLinks","spreadFromSpreadLinkByPathLink","spreadLinkId1","spreadLink","_pathGraph","pathLink","ifError","deepEqual","equal","id","prev","path","root","spreadLinkId","spreadFromSpreadLinkByPathGraph","spreadFromSpreadLink","notDeepEqual","spreadNewSpreadLink","spreadByPathLink","pathLinkId0","pathLinkId1","spreadLinkId2","remove","count","unspreadFromRemovedSpreadLinkByPrevId","spreadLink1"],"mappings":"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","file":"testSpreading.1.js","sourcesContent":["import { assert } from 'chai';\n\nexport default function testGraphSpreading(generateGraphSpreading) {\n  it('#spreadFromSpreadLinkByPathLink', function(done) {\n    var { pathGraph, spreadGraph, graphSpreading } = generateGraphSpreading();\n    pathGraph.insert({ source: 'b', target: 'c' }, function(error, pathLinkId) {\n      spreadGraph.insert({ source: 'a', target: 'b' }, function(error, spreadLinkId0) {\n        spreadGraph.fetch(spreadLinkId0, undefined, (error, spreadLinks) => {\n          assert.lengthOf(spreadLinks, 1);\n          pathGraph.fetch(pathLinkId, undefined, (error, pathLinks) => {\n            assert.lengthOf(pathLinks, 1);\n            graphSpreading.spreadFromSpreadLinkByPathLink(\n              spreadLinks[0], pathGraph, pathLinks[0], undefined,\n              (error, spreadLinkId1, spreadLink, _pathGraph, pathLink) => {\n                assert.ifError(error);\n                assert.deepEqual(spreadLink, spreadLinks[0]);\n                assert.equal(_pathGraph, pathGraph);\n                assert.deepEqual(pathLink, pathLinks[0]);\n                spreadGraph.fetch({}, undefined, (error, spreadLinks) => {\n                  assert.lengthOf(spreadLinks, 2);\n                  assert.deepEqual(spreadLinks, [\n                    { id: spreadLinkId0, source: 'a', target: 'b' },\n                    { id: spreadLinkId1, source: 'a', target: 'c', prev: spreadLinkId0, path: pathLink.id, root: spreadLinkId0 }\n                  ]);\n                  done();\n                });\n              }\n            );\n          });\n        });\n      });\n    });\n  });\n  \n  it('#spreadFromSpreadLinkByPathGraph', function(done) {\n    var { pathGraph, spreadGraph, graphSpreading } = generateGraphSpreading();\n    pathGraph.insert({ source: 'b', target: 'c' }, function(error, pathLinkId) {\n      spreadGraph.insert({ source: 'a', target: 'b' }, function(error, spreadLinkId) {\n        spreadGraph.fetch(spreadLinkId, undefined, (error, spreadLinks) => {\n          assert.lengthOf(spreadLinks, 1);\n          pathGraph.fetch(pathLinkId, undefined, (error, pathLinks) => {\n            assert.lengthOf(pathLinks, 1);\n            graphSpreading.spreadFromSpreadLinkByPathGraph(\n              spreadLinks[0], pathGraph, undefined,\n              (error, id, spreadLink, _pathGraph, pathLink) => {\n                assert.ifError(error);\n                assert.deepEqual(spreadLink, spreadLinks[0]);\n                assert.equal(_pathGraph, pathGraph);\n                assert.deepEqual(pathLink, pathLinks[0]);\n                spreadGraph.fetch(id, undefined, (error, spreadLinks) => {\n                  assert.deepEqual(spreadLinks, [{ id: id, source: 'a', target: 'c', prev: spreadLinkId, path: pathLink.id, root: spreadLinkId }]);\n                });\n              },\n              () => {\n                spreadGraph.fetch({}, undefined, (error, pathLinks) => {\n                  assert.lengthOf(pathLinks, 2);\n                  done();\n                });\n              }\n            );\n          });\n        });\n      });\n    });\n  });\n  \n  it('#spreadFromSpreadLink', function(done) {\n    var { pathGraph, spreadGraph, graphSpreading } = generateGraphSpreading();\n    pathGraph.insert({ source: 'b', target: 'c' }, function(error, pathLinkId) {\n      spreadGraph.insert({ source: 'a', target: 'b' }, function(error, spreadLinkId) {\n        spreadGraph.fetch(spreadLinkId, undefined, (error, spreadLinks) => {\n          assert.lengthOf(spreadLinks, 1);\n          pathGraph.fetch(pathLinkId, undefined, (error, pathLinks) => {\n            assert.lengthOf(pathLinks, 1);\n            graphSpreading.spreadFromSpreadLink(\n              spreadLinks[0], undefined,\n              (error, id, spreadLink, _pathGraph, pathLink) => {\n                assert.ifError(error);\n                assert.deepEqual(spreadLink, spreadLinks[0]);\n                assert.equal(_pathGraph, pathGraph);\n                assert.deepEqual(pathLink, pathLinks[0]);\n                spreadGraph.fetch(id, undefined, (error, spreadLinks) => {\n                  assert.deepEqual(spreadLinks, [{ id: id, source: 'a', target: 'c', prev: spreadLinkId, path: pathLinks[0].id, root: spreadLinkId }]);\n                });\n              }, () => {\n                spreadGraph.fetch({}, undefined, (error, spreadLinks) => {\n                  assert.lengthOf(spreadLinks, 2);\n                  assert.notDeepEqual(spreadLinks, [{ source: 'a', target: 'b' }, { source: 'a', target: 'c', prev: spreadLinkId, path: pathLinks[0].id, root: spreadLinkId }]);\n                  done();\n                });\n              }\n            );\n          });\n        });\n      });\n    });\n  });\n  \n  it('#spreadNewSpreadLink', function(done) {\n    var { pathGraph, spreadGraph, graphSpreading } = generateGraphSpreading();\n    pathGraph.insert({ source: 'b', target: 'c' }, function(error, pathLinkId) {\n      graphSpreading.spreadNewSpreadLink(\n        { source: 'a', target: 'b' }, undefined, (error, id) => {\n          assert.ifError(error);\n          spreadGraph.fetch({}, undefined, (error, pathLinks) => {\n            assert.lengthOf(pathLinks, 1);\n            assert.deepEqual(pathLinks, [{ id: id, source: 'a', target: 'b' }]);\n            done();\n          });\n        }\n      );\n    });\n  });\n  \n  it('#spreadByPathLink', function(done) {\n    var { pathGraph, spreadGraph, graphSpreading } = generateGraphSpreading();\n    spreadGraph.insert({ source: 'a', target: 'b' }, function(error, spreadLinkId) {\n      spreadGraph.fetch(spreadLinkId, undefined, (error, spreadLinks) => {\n        assert.lengthOf(spreadLinks, 1);\n        pathGraph.insert({ source: 'b', target: 'c' }, function(error, pathLinkId) {\n          pathGraph.fetch(pathLinkId, undefined, (error, pathLinks) => {\n            graphSpreading.spreadByPathLink(\n              pathGraph, pathLinks[0], undefined,\n              (error, id, spreadLink, _pathGraph, pathLink) => {\n                assert.ifError(error);\n                assert.deepEqual(spreadLink, spreadLinks[0]);\n                assert.equal(_pathGraph, pathGraph);\n                assert.deepEqual(pathLink, pathLinks[0]);\n              },\n              () => {\n                spreadGraph.fetch({}, undefined, (error, pathLinks) => {\n                  assert.lengthOf(pathLinks, 2);\n                  done();\n                });\n              }\n            );\n          });\n        });\n      });\n    });\n  });\n  \n  it('#unspreadFromRemovedSpreadLinkByPrevId', function(done) {\n    var { pathGraph, spreadGraph, graphSpreading } = generateGraphSpreading();\n    pathGraph.insert({ source: 'b', target: 'c' }, (error, pathLinkId0) => {\n      pathGraph.insert({ source: 'c', target: 'e' }, (error, pathLinkId1) => {\n        spreadGraph.insert({ source: 'a', target: 'b' }, (error, spreadLinkId0) => {\n          spreadGraph.insert({ source: 'a', target: 'c', prev: spreadLinkId0, path: pathLinkId0, root: spreadLinkId0 }, (error, spreadLinkId1) => {\n            spreadGraph.insert({ source: 'a', target: 'e', prev: spreadLinkId1, path: pathLinkId1, root: spreadLinkId0 }, (error, spreadLinkId2) => {\n              spreadGraph.remove(spreadLinkId0, (error, count) => {\n                graphSpreading.unspreadFromRemovedSpreadLinkByPrevId(spreadLinkId0, (error, spreadLink1) => {\n                  assert.ifError(error);\n                }, (error, count) => {\n                  assert.ifError(error);\n                  spreadGraph.fetch({}, undefined, (error, spreadLinks) => {\n                    assert.ifError(error);\n                    assert.deepEqual(spreadLinks, [\n                      { id: spreadLinkId2, source: 'a', target: 'e', prev: spreadLinkId1, path: pathLinkId1, root: spreadLinkId0 }\n                    ]);\n                    done();\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n};"]}