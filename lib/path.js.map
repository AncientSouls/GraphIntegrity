{"version":3,"sources":["../src/lib/path.js"],"names":["AllowedFields","factoryPathGraph","ParentClassGraph","PathGraph","collection","selector","config","arguments","fromFields","Error","toFields","length","fr","indexOf","to"],"mappings":"i3BAAA,GAAIA,eAAgB,CAAC,QAAD,CAAW,QAAX,CAAqB,IAArB,CAApB,CAEA;;;;;;GAOA,QAASC,iBAAT,CAA0BC,gBAA1B,CAA4C,IACpCC,UADoC,oEAGxC;;;;;;;;OASA,mBAAYC,UAAZ,CAAwBC,QAAxB,CAAkCC,MAAlC,CAA0C,8IAC/BC,SAD+B,GAGxC,GAAID,OAAOE,UAAX,CAAuB,CACrB,MAAKA,UAAL,CAAkBF,OAAOE,UAC1B,CAFD,IAEO,MAAM,IAAIC,MAAJ,CAAU,kCAAV,CAAN,CAEP,GAAIH,OAAOI,QAAX,CAAqB,CACnB,MAAKA,QAAL,CAAgBJ,OAAOI,QACxB,CAFD,IAEO,MAAM,IAAID,MAAJ,CAAU,gCAAV,CAAN,CAEP,GAAI,CAAC,MAAKD,UAAL,CAAgBG,MAArB,CAA6B,CAC3B,KAAM,IAAIF,MAAJ,CAAU,oCAAV,CACP,CAED,GAAI,CAAC,MAAKC,QAAL,CAAcC,MAAnB,CAA2B,CACzB,KAAM,IAAIF,MAAJ,CAAU,oCAAV,CACP,CAED,IAAK,GAAIG,GAAT,GAAe,OAAKJ,UAApB,CAAgC,CAC9B,GAAIR,cAAca,OAAd,CAAsB,MAAKL,UAAL,CAAgBI,EAAhB,CAAtB,GAA8C,CAAC,CAAnD,CAAsD,CACpD,KAAM,IAAIH,MAAJ,CAAU,wEAAwE,MAAKC,QAAL,CAAcI,EAAd,CAAlF,CACP,CACD,IAAK,GAAIA,GAAT,GAAe,OAAKJ,QAApB,CAA8B,CAC5B,GAAIV,cAAca,OAAd,CAAsB,MAAKH,QAAL,CAAcI,EAAd,CAAtB,GAA4C,CAAC,CAAjD,CAAoD,CAClD,KAAM,IAAIL,MAAJ,CAAU,sEAAsE,MAAKC,QAAL,CAAcI,EAAd,CAAhF,CACP,CACD,GAAI,MAAKN,UAAL,CAAgBI,EAAhB,GAAuB,MAAKF,QAAL,CAAcI,EAAd,CAA3B,CAA8C,CAC5C,KAAM,IAAIL,MAAJ,CAAU,wEAAV,CACP,CACF,CACF,CA/BuC,YAgCzC,CA5CuC,kBAClBP,gBADkB,EA+C1C,MAAOC,UACR,E,QAEQF,gB,CAAAA,gB","file":"path.js","sourcesContent":["var AllowedFields = ['source', 'target', 'id'];\n\n/**\n * This method allows you to use PathGraph class to its inheritance chain.\n * \n * @param {Class} ParentClassGraph\n * @return {Class} PathGraph\n * @description `import { factoryPathGraph } from 'ancient-graph-spreading';`\n */\nfunction factoryPathGraph(ParentClassGraph) {\n  class PathGraph extends ParentClassGraph {\n    \n    /**\n     * Parent constrctor arguments taken in args array.\n     * \n     * @param {} collection - A pointer to the collection dannymineobhodimye daapteru to work with the graph. This may be a connection to the SQL database and table name, for example, or a collection of Mongo. \n     * @param {Object} fields - Comparison of the data in the collection of data in the graph. It is necessary for the adapter.\n     * @param {Object} config - Additional config.\n     * @param {string[]} config.fromFields - Start direction in path link\n     * @param {string[]} config.toFields - End direction in path link\n     */\n    constructor(collection, selector, config) {\n      super(...arguments);\n      \n      if (config.fromFields) {\n        this.fromFields = config.fromFields;\n      } else throw new Error('config.fromFields is not defined');\n      \n      if (config.toFields) {\n        this.toFields = config.toFields;\n      } else throw new Error('config.toFields is not defined');\n      \n      if (!this.fromFields.length) {\n        throw new Error('config.fromFields can not be empty');\n      }\n      \n      if (!this.toFields.length) {\n        throw new Error('config.fromFields can not be empty');\n      }\n      \n      for (var fr in this.fromFields) {\n        if (AllowedFields.indexOf(this.fromFields[fr]) == -1) {\n          throw new Error('config.fromFields may includes only `sourec`, `target` and `id`, but '+this.toFields[to]);\n        }\n        for (var to in this.toFields) {\n          if (AllowedFields.indexOf(this.toFields[to]) == -1) {\n            throw new Error('config.toFields may includes only `sourec`, `target` and `id`, but '+this.toFields[to]);\n          }\n          if (this.fromFields[fr] == this.toFields[to]) {\n            throw new Error('The start and end of the path con not be at one reference of the link.');\n          }\n        }\n      }\n    }\n  }\n  \n  return PathGraph;\n};\n\nexport { factoryPathGraph };"]}