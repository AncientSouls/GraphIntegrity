{"version":3,"sources":["../src/lib/spread.js"],"names":["factorySpreadGraph","ParentClassGraph","SpreadGraph","args","constantField","variableField","_constantField","_variableField","prevSpreadLink","pathGraph","pathLink","newSpreadLink","context","callback","modifier","process","selector","add"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;AASA,SAASA,kBAAT,CAA4BC,gBAA5B,EAA8C;AAAA,MACtCC,WADsC;AAAA;;AAG1C;;;;;AAKA,yBAAYC,IAAZ,EAAkBC,aAAlB,EAAiCC,aAAjC,EAAgD;AAAA;;AAAA;;AAAA,0KACrCF,IADqC;;AAE9C,YAAKG,cAAL,GAAsBF,aAAtB;AACA,YAAKG,cAAL,GAAsBF,aAAtB;AAH8C;AAI/C;;AAED;;;;;;;;;;;;AAd0C;AAAA;AAAA,wCAwBxBG,cAxBwB,EAwBRC,SAxBQ,EAwBGC,QAxBH,EAwBaC,aAxBb,EAwB4BC,OAxB5B,EAwBqCC,QAxBrC,EAwB+C;AACvFA,iBAASF,aAAT;AACD;;AAED;;;;;;;AAOA;;;;AAnC0C;AAAA;AAAA,6BAsCnCG,QAtCmC,EAsCzBD,QAtCyB,EAsCfD,OAtCe,EAsCN;AAClC,YAAIA,WAAWA,QAAQG,OAAvB,EAAgC;AAC9BD,mBAASC,OAAT,GAAmB,CAACH,QAAQG,OAAT,CAAnB;AACD;AACD,gIAAoBD,QAApB,EAA8BD,QAA9B,EAAwCD,OAAxC;AACD;;AAED;;;;;AA7C0C;AAAA;AAAA,6BAiDnCI,QAjDmC,EAiDzBH,QAjDyB,EAiDfD,OAjDe,EAiDN;AAClC,YAAIA,WAAWA,QAAQG,OAAvB,EAAgC;AAC9B,cAAI,CAACH,QAAQE,QAAb,EAAuBF,QAAQE,QAAR,GAAmB,EAAnB;AACvBF,kBAAQE,QAAR,CAAiBC,OAAjB,GAA2B,EAAEE,KAAKL,QAAQG,OAAf,EAA3B;AACD;AACD,gIAAoBC,QAApB,EAA8BH,QAA9B,EAAwCD,OAAxC;AACD;AAvDyC;;AAAA;AAAA,IAClBX,gBADkB;;AA0D5C,SAAOC,WAAP;AACD;;QAEQF,kB,GAAAA,kB","file":"spread.js","sourcesContent":["/**\n * This method allows you to use SpreadGraph class to its inheritance chain.\n * Fields launched, process, prev, path and root is required!\n * Manage fields launched and process.\n * \n * @param {Class} ParentClassGraph\n * @return {Class} SpreadGraph\n * @description `import { factorySpreadGraph } from 'ancient-graph-spreading';`\n */\nfunction factorySpreadGraph(ParentClassGraph) {\n  class SpreadGraph extends ParentClassGraph {\n    \n    /**\n     * @param {Array} args - parent class graph arguments\n     * @param {string} constantField\n     * @param {string} variableField\n     */\n    constructor(args, constantField, variableField) {\n      super(...args);\n      this._constantField = constantField;\n      this._variableField = variableField;\n    }\n    \n    /**\n     * Default spreading handler. If spread specified link allowed, callback it link, else callback undefined.\n     * \n     * @param {Object} [prevSpreadLink]\n     * @param {PathGraph} [pathGraph]\n     * @param {Object} [pathLink]\n     * @param {Object} newSpreadLink \n     * @param {Object} [context]\n     * @param {SpreadGraph~_spreadingHandlerCallback} [callback]\n     */\n    _spreadingHandler(prevSpreadLink, pathGraph, pathLink, newSpreadLink, context, callback) {\n      callback(newSpreadLink);\n    }\n    \n    /**\n     * Responce from _spreadingHandler method.\n     *\n     * @callback SpreadGraph~_spreadingHandlerCallback\n     * @param {Object} [newSpreadLink] \n     */\n    \n    /**\n     * Parent insert with parser of context.process.\n     */\n    insert(modifier, callback, context) {\n      if (context && context.process) {\n        modifier.process = [context.process];\n      }\n      return super.insert(modifier, callback, context);\n    }\n    \n    /**\n     * The method is strictly designed so that the class inherits from ExistedGraph.\n     * Adds to launched field unspread value.\n     */\n    remove(selector, callback, context) {\n      if (context && context.process) {\n        if (!context.modifier) context.modifier = {};\n        context.modifier.process = { add: context.process };\n      }\n      return super.remove(selector, callback, context);\n    }\n  }\n  \n  return SpreadGraph;\n};\n\nexport { factorySpreadGraph };"]}