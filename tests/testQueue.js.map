{"version":3,"sources":["../src/tests/testQueue.js"],"names":["testQueue","generageGraphSpreading","ids","it","done","pathGraph","spreadGraph","graphSpreading","queueSpreading","insert","source","target","error","spreadLinkId0","pathLinkId0","on","oldLink","newLink","spreadBySpread","unspreadBySpread","spreadByPath","lengthOf","launched","fetch","undefined","results","deepEqual","id","prev","path","root","process","mainPathLink","unspreadByPath","isEqual","pathLinkId1","update","removed","setTimeout","spreadLinks","pathLinks","remove"],"mappings":"sFAIwBA,S,CAJxB,0BACA,qBACA,8B,+HAEe,QAASA,UAAT,CAAmBC,sBAAnB,CAA2CC,GAA3C,CAAgD,CAC7DC,GAAG,eAAH,CAAoB,SAASC,IAAT,CAAe,2BACgCH,wBADhC,CAC3BI,SAD2B,uBAC3BA,SAD2B,CAChBC,WADgB,uBAChBA,WADgB,CACHC,cADG,uBACHA,cADG,CACaC,cADb,uBACaA,cADb,CAGjCF,YAAYG,MAAZ,CAAmB,CAAEC,OAAQR,IAAI,CAAJ,CAAV,CAAkBS,OAAQT,IAAI,CAAJ,CAA1B,CAAnB,CAAuD,SAACU,KAAD,CAAQC,aAAR,CAA0B,CAC/ER,UAAUI,MAAV,CAAiB,CAAEC,OAAQR,IAAI,CAAJ,CAAV,CAAkBS,OAAQT,IAAI,CAAJ,CAA1B,CAAjB,CAAqD,SAACU,KAAD,CAAQE,WAAR,CAAwB,CAC3ER,YAAYS,EAAZ,CAAe,QAAf,CAAyB,SAACC,OAAD,CAAUC,OAAV,CAAsB,CAC7CT,eAAeU,cAAf,CAA8BD,OAA9B,CACD,CAFD,EAGAX,YAAYS,EAAZ,CAAe,QAAf,CAAyB,SAACC,OAAD,CAAUC,OAAV,CAAsB,CAC7CT,eAAeW,gBAAf,CAAgCH,OAAhC,CACD,CAFD,EAGAX,UAAUU,EAAV,CAAa,QAAb,CAAuB,SAACC,OAAD,CAAUC,OAAV,CAAsB,CAC3CT,eAAeY,YAAf,CAA4Bf,SAA5B,CAAuCY,OAAvC,CACD,CAFD,EAGAZ,UAAUU,EAAV,CAAa,QAAb,CAAuB,SAACC,OAAD,CAAUC,OAAV,CAAsB,CAC3C,aAAOI,QAAP,CAAgBJ,QAAQK,QAAxB,CAAkC,CAAlC,EACAhB,YAAYiB,KAAZ,CAAkB,EAAlB,CAAsBC,SAAtB,CAAiC,SAACZ,KAAD,CAAQa,OAAR,CAAoB,CACnD,aAAOC,SAAP,CAAiBD,OAAjB,CAA0B,CACxB,CAAEf,OAAQ,GAAV,CAAeC,OAAQ,GAAvB,CAA4BgB,GAAI,UAAhC,CADwB,CAExB,CACEjB,OAAQ,GADV,CACeC,OAAQ,GADvB,CAC4BgB,GAAI,UADhC,CAEEC,KAAM,UAFR,CAEoBC,KAAM,QAF1B,CAEoCC,KAAM,UAF1C,CAGEC,QAAS,EAHX,CAFwB,CAOxB,CACErB,OAAQ,GADV,CACeC,OAAQ,GADvB,CAC4BgB,GAAI,UADhC,CAEEC,KAAM,UAFR,CAEoBC,KAAM,QAF1B,CAEoCC,KAAM,UAF1C,CAGEC,QAAS,EAHX,CAPwB,CAA1B,EAaA3B,MACD,CAfD,CAgBD,CAlBD,EAmBAC,UAAUI,MAAV,CAAiB,CAAEC,OAAQR,IAAI,CAAJ,CAAV,CAAkBS,OAAQT,IAAI,CAAJ,CAA1B,CAAjB,CACD,CA9BD,CA+BD,CAhCD,CAiCD,CApCD,EAqCAC,GAAG,+BAAH,CAAoC,SAASC,IAAT,CAAe,4BACgBH,wBADhB,CAC3CI,SAD2C,wBAC3CA,SAD2C,CAChCC,WADgC,wBAChCA,WADgC,CACnBC,cADmB,wBACnBA,cADmB,CACHC,cADG,wBACHA,cADG,CAGjD,GAAIwB,aAAJ,CAEA1B,YAAYS,EAAZ,CAAe,QAAf,CAAyB,SAACC,OAAD,CAAUC,OAAV,CAAsB,CAC7CT,eAAeU,cAAf,CAA8BD,OAA9B,CACD,CAFD,EAGAX,YAAYS,EAAZ,CAAe,QAAf,CAAyB,SAACC,OAAD,CAAUC,OAAV,CAAsB,CAC7CT,eAAeW,gBAAf,CAAgCH,OAAhC,CACD,CAFD,EAGAX,UAAUU,EAAV,CAAa,QAAb,CAAuB,SAACC,OAAD,CAAUC,OAAV,CAAsB,CAC3CT,eAAeY,YAAf,CAA4Bf,SAA5B,CAAuCY,OAAvC,CACD,CAFD,EAGAZ,UAAUU,EAAV,CAAa,QAAb,CAAuB,SAACC,OAAD,CAAUC,OAAV,CAAsB,CAC3C,GAAID,QAAQN,MAAR,EAAkBO,QAAQP,MAA1B,EAAoCM,QAAQL,MAAR,EAAkBM,QAAQN,MAAlE,CAA0E,CACxEH,eAAeyB,cAAf,CAA8B5B,SAA9B,CAAyCY,OAAzC,CACD,CAFD,IAEO,IAAG,CAAC,iBAAOiB,OAAP,CAAelB,QAAQM,QAAvB,CAAiCL,QAAQK,QAAzC,CAAJ,CAAwD,CAC7D,GAAIL,QAAQU,EAAR,EAAcK,YAAd,EAA8Bf,QAAQK,QAAR,EAAoB,CAAtD,CAAyD,CACvDhB,YAAYiB,KAAZ,CAAkB,EAAlB,CAAsBC,SAAtB,CAAiC,SAACZ,KAAD,CAAQa,OAAR,CAAoB,CACnD,aAAOC,SAAP,CAAiBD,OAAjB,CAA0B,CACxB,CAAEf,OAAQ,GAAV,CAAeC,OAAQ,GAAvB,CAA4BgB,GAAI,UAAhC,CADwB,CAExB,CACEjB,OAAQ,GADV,CACeC,OAAQ,GADvB,CAC4BgB,GAAI,UADhC,CAEEC,KAAM,UAFR,CAEoBC,KAAM,QAF1B,CAEoCC,KAAM,UAF1C,CAGEC,QAAS,EAHX,CAFwB,CAOxB,CACErB,OAAQ,GADV,CACeC,OAAQ,GADvB,CAC4BgB,GAAI,UADhC,CAEEC,KAAM,UAFR,CAEoBC,KAAM,QAF1B,CAEoCC,KAAM,UAF1C,CAGEC,QAAS,EAHX,CAPwB,CAA1B,EAaA1B,UAAUkB,KAAV,CAAgB,EAAhB,CAAoBC,SAApB,CAA+B,SAACZ,KAAD,CAAQa,OAAR,CAAoB,CACjD,aAAOC,SAAP,CAAiBD,OAAjB,CAA0B,CACxB,CACE,KAAM,QADR,CAEE,WAAY,EAFd,CAGE,SAAU,GAHZ,CAIE,SAAU,GAJZ,CADwB,CAOxB,CACE,KAAM,QADR,CAEE,WAAY,EAFd,CAGE,SAAU,GAHZ,CAIE,SAAU,GAJZ,CAPwB,CAA1B,EAcArB,MACD,CAhBD,CAiBD,CA/BD,CAgCD,CAjCD,IAiCO,CACLI,eAAeY,YAAf,CAA4Bf,SAA5B,CAAuCY,OAAvC,CACD,CACF,CACF,CAzCD,EA2CAX,YAAYG,MAAZ,CAAmB,CAAEC,OAAQR,IAAI,CAAJ,CAAV,CAAkBS,OAAQT,IAAI,CAAJ,CAA1B,CAAnB,CAAuD,SAACU,KAAD,CAAQC,aAAR,CAA0B,CAC/ER,UAAUI,MAAV,CAAiB,CAAEC,OAAQR,IAAI,CAAJ,CAAV,CAAkBS,OAAQT,IAAI,CAAJ,CAA1B,CAAjB,CAAqD,SAACU,KAAD,CAAQE,WAAR,CAAwB,CAC3EkB,aAAelB,WAAf,CACAT,UAAUI,MAAV,CAAiB,CAAEC,OAAQR,IAAI,CAAJ,CAAV,CAAkBS,OAAQT,IAAI,CAAJ,CAA1B,CAAjB,CAAqD,SAACU,KAAD,CAAQuB,WAAR,CAAwB,CAC3E9B,UAAU+B,MAAV,CAAiBtB,WAAjB,CAA8B,CAAEJ,OAAQR,IAAI,CAAJ,CAAV,CAAkBS,OAAQT,IAAI,CAAJ,CAA1B,CAA9B,CACD,CAFD,CAGD,CALD,CAMD,CAPD,CAQD,CAjED,EAmEAC,GAAG,iBAAH,CAAsB,SAASC,IAAT,CAAe,4BAC8BH,wBAD9B,CAC7BI,SAD6B,wBAC7BA,SAD6B,CAClBC,WADkB,wBAClBA,WADkB,CACLC,cADK,wBACLA,cADK,CACWC,cADX,wBACWA,cADX,CAGnC,GAAIwB,aAAJ,CAEA1B,YAAYS,EAAZ,CAAe,QAAf,CAAyB,SAACC,OAAD,CAAUC,OAAV,CAAsB,CAC7CT,eAAeU,cAAf,CAA8BD,OAA9B,CACD,CAFD,EAGAX,YAAYS,EAAZ,CAAe,QAAf,CAAyB,SAACC,OAAD,CAAUC,OAAV,CAAsB,CAC7CT,eAAeW,gBAAf,CAAgCH,OAAhC,CACD,CAFD,EAGAX,UAAUU,EAAV,CAAa,QAAb,CAAuB,SAACC,OAAD,CAAUC,OAAV,CAAsB,CAC3CT,eAAeY,YAAf,CAA4Bf,SAA5B,CAAuCY,OAAvC,CACD,CAFD,EAGAZ,UAAUU,EAAV,CAAa,QAAb,CAAuB,SAACC,OAAD,CAAUC,OAAV,CAAsB,CAC3C,GAAID,QAAQN,MAAR,EAAkBO,QAAQP,MAA1B,EAAoCM,QAAQL,MAAR,EAAkBM,QAAQN,MAAlE,CAA0E,CACxEH,eAAeyB,cAAf,CAA8B5B,SAA9B,CAAyCY,OAAzC,CACD,CAFD,IAEO,IAAG,CAAC,iBAAOiB,OAAP,CAAelB,QAAQM,QAAvB,CAAiCL,QAAQK,QAAzC,CAAJ,CAAwD,CAC7Dd,eAAeY,YAAf,CAA4Bf,SAA5B,CAAuCY,OAAvC,CACD,CACF,CAND,EAOAZ,UAAUU,EAAV,CAAa,QAAb,CAAuB,SAACC,OAAD,CAAUC,OAAV,CAAsB,CAC3CT,eAAeyB,cAAf,CAA8B5B,SAA9B,CAAyCW,OAAzC,CACD,CAFD,EAGAX,UAAUgC,OAAV,CAAkBtB,EAAlB,CAAqB,QAArB,CAA+B,SAACC,OAAD,CAAUC,OAAV,CAAsB,CACnDqB,WAAW,UAAM,CACfhC,YAAYiB,KAAZ,CAAkB,EAAlB,CAAsBC,SAAtB,CAAiC,SAACZ,KAAD,CAAQ2B,WAAR,CAAwB,CACvD,aAAOb,SAAP,CAAiBa,WAAjB,CAA8B,CAC5B,CAAEZ,GAAI,UAAN,CAAkBjB,OAAQ,GAA1B,CAA+BC,OAAQ,GAAvC,CAD4B,CAA9B,EAGAN,UAAUkB,KAAV,CAAgB,EAAhB,CAAoBC,SAApB,CAA+B,SAACZ,KAAD,CAAQ4B,SAAR,CAAsB,CACnD,aAAOd,SAAP,CAAiBc,SAAjB,CAA4B,CAC1B,CAAEb,GAAI,QAAN,CAAgBjB,OAAQ,GAAxB,CAA6BC,OAAQ,GAArC,CAA0CW,SAAU,EAApD,CAD0B,CAA5B,EAGAlB,MACD,CALD,CAMD,CAVD,CAWD,CAZD,CAYG,GAZH,CAaD,CAdD,EAgBAE,YAAYG,MAAZ,CAAmB,CAAEC,OAAQR,IAAI,CAAJ,CAAV,CAAkBS,OAAQT,IAAI,CAAJ,CAA1B,CAAnB,CAAuD,SAACU,KAAD,CAAQC,aAAR,CAA0B,CAC/ER,UAAUI,MAAV,CAAiB,CAAEC,OAAQR,IAAI,CAAJ,CAAV,CAAkBS,OAAQT,IAAI,CAAJ,CAA1B,CAAjB,CAAqD,SAACU,KAAD,CAAQE,WAAR,CAAwB,CAC3ET,UAAUI,MAAV,CAAiB,CAAEC,OAAQR,IAAI,CAAJ,CAAV,CAAkBS,OAAQT,IAAI,CAAJ,CAA1B,CAAjB,CAAqD,SAACU,KAAD,CAAQuB,WAAR,CAAwB,CAC3E9B,UAAUoC,MAAV,CAAiB3B,WAAjB,CACD,CAFD,CAGD,CAJD,CAKD,CAND,CAOD,CA/CD,CAgDD","file":"testQueue.js","sourcesContent":["import { assert } from 'chai';\nimport { factoryPathGraph, factorySpreadGraph, GraphSpreading, QueueSpreading } from '../';\nimport lodash from 'lodash';\n\nexport default function testQueue(generageGraphSpreading, ids) {\n  it('#spreadByPath', function(done) {\n    var { pathGraph, spreadGraph, graphSpreading, queueSpreading } = generageGraphSpreading();\n    \n    spreadGraph.insert({ source: ids[0], target: ids[1] }, (error, spreadLinkId0) => {\n      pathGraph.insert({ source: ids[2], target: ids[3] }, (error, pathLinkId0) => {\n        spreadGraph.on('insert', (oldLink, newLink) => {\n          queueSpreading.spreadBySpread(newLink);\n        });\n        spreadGraph.on('remove', (oldLink, newLink) => {\n          queueSpreading.unspreadBySpread(oldLink);\n        });\n        pathGraph.on('insert', (oldLink, newLink) => {\n          queueSpreading.spreadByPath(pathGraph, newLink);\n        });\n        pathGraph.on('update', (oldLink, newLink) => {\n          assert.lengthOf(newLink.launched, 0);\n          spreadGraph.fetch({}, undefined, (error, results) => {\n            assert.deepEqual(results, [\n              { source: 'a', target: 'b', id: 'spread/0' },\n              {\n                source: 'a', target: 'c', id: 'spread/1',\n                prev: 'spread/0', path: 'path/1', root: 'spread/0',\n                process: [],\n              },\n              {\n                source: 'a', target: 'd', id: 'spread/2',\n                prev: 'spread/1', path: 'path/0', root: 'spread/0',\n                process: [],\n              }\n            ]);\n            done();\n          });\n        });\n        pathGraph.insert({ source: ids[1], target: ids[2] });\n      });\n    });\n  });\n  it('#unspreadByPath #spreadByPath', function(done) {\n    var { pathGraph, spreadGraph, graphSpreading, queueSpreading } = generageGraphSpreading();\n    \n    var mainPathLink;\n    \n    spreadGraph.on('insert', (oldLink, newLink) => {\n      queueSpreading.spreadBySpread(newLink);\n    });\n    spreadGraph.on('remove', (oldLink, newLink) => {\n      queueSpreading.unspreadBySpread(oldLink);\n    });\n    pathGraph.on('insert', (oldLink, newLink) => {\n      queueSpreading.spreadByPath(pathGraph, newLink);\n    });\n    pathGraph.on('update', (oldLink, newLink) => {\n      if (oldLink.source != newLink.source || oldLink.target != newLink.target) {\n        queueSpreading.unspreadByPath(pathGraph, newLink);\n      } else if(!lodash.isEqual(oldLink.launched, newLink.launched)) {\n        if (newLink.id == mainPathLink && newLink.launched == 0) {\n          spreadGraph.fetch({}, undefined, (error, results) => {\n            assert.deepEqual(results, [\n              { source: 'a', target: 'b', id: 'spread/0' },\n              {\n                source: 'a', target: 'c', id: 'spread/1',\n                prev: 'spread/0', path: 'path/0', root: 'spread/0',\n                process: [],\n              },\n              {\n                source: 'a', target: 'd', id: 'spread/2',\n                prev: 'spread/1', path: 'path/1', root: 'spread/0',\n                process: [],\n              }\n            ]);\n            pathGraph.fetch({}, undefined, (error, results) => {\n              assert.deepEqual(results, [\n                {\n                  \"id\": \"path/0\",\n                  \"launched\": [],\n                  \"source\": \"b\",\n                  \"target\": \"c\"\n                },\n                {\n                  \"id\": \"path/1\",\n                  \"launched\": [],\n                  \"source\": \"c\",\n                  \"target\": \"d\"\n                }\n              ]);\n              done();\n            });\n          });\n        } else {\n          queueSpreading.spreadByPath(pathGraph, newLink);\n        }\n      }\n    });\n    \n    spreadGraph.insert({ source: ids[0], target: ids[1] }, (error, spreadLinkId0) => {\n      pathGraph.insert({ source: ids[3], target: ids[3] }, (error, pathLinkId0) => {\n        mainPathLink = pathLinkId0;\n        pathGraph.insert({ source: ids[2], target: ids[3] }, (error, pathLinkId1) => {\n          pathGraph.update(pathLinkId0, { source: ids[1], target: ids[2] });\n        });\n      });\n    });\n  });\n  \n  it('#unspreadByPath', function(done) {\n    var { pathGraph, spreadGraph, graphSpreading, queueSpreading } = generageGraphSpreading();\n    \n    var mainPathLink;\n    \n    spreadGraph.on('insert', (oldLink, newLink) => {\n      queueSpreading.spreadBySpread(newLink);\n    });\n    spreadGraph.on('remove', (oldLink, newLink) => {\n      queueSpreading.unspreadBySpread(oldLink);\n    });\n    pathGraph.on('insert', (oldLink, newLink) => {\n      queueSpreading.spreadByPath(pathGraph, newLink);\n    });\n    pathGraph.on('update', (oldLink, newLink) => {\n      if (oldLink.source != newLink.source || oldLink.target != newLink.target) {\n        queueSpreading.unspreadByPath(pathGraph, newLink);\n      } else if(!lodash.isEqual(oldLink.launched, newLink.launched)) {\n        queueSpreading.spreadByPath(pathGraph, newLink);\n      }\n    });\n    pathGraph.on('remove', (oldLink, newLink) => {\n      queueSpreading.unspreadByPath(pathGraph, oldLink);\n    });\n    pathGraph.removed.on('update', (oldLink, newLink) => {\n      setTimeout(() => {\n        spreadGraph.fetch({}, undefined, (error, spreadLinks) => {\n          assert.deepEqual(spreadLinks, [\n            { id: 'spread/0', source: 'a', target: 'b' }\n          ]);\n          pathGraph.fetch({}, undefined, (error, pathLinks) => {\n            assert.deepEqual(pathLinks, [\n              { id: 'path/1', source: 'c', target: 'd', launched: [] }\n            ]);\n            done();\n          });\n        });\n      }, 200);\n    });\n    \n    spreadGraph.insert({ source: ids[0], target: ids[1] }, (error, spreadLinkId0) => {\n      pathGraph.insert({ source: ids[1], target: ids[2] }, (error, pathLinkId0) => {\n        pathGraph.insert({ source: ids[2], target: ids[3] }, (error, pathLinkId1) => {\n          pathGraph.remove(pathLinkId0);\n        });\n      });\n    });\n  });\n};"]}