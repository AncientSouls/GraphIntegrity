{"version":3,"sources":["../src/lib/launched.js"],"names":["factoryLaunchedGraph","ParentClassGraph","LaunchedGraph","modifier","callback","context","launched","Object","prototype","toString","call","push","selector","hasOwnProperty","add"],"mappings":"uxDAAA;;;;;;;;GASA,QAASA,qBAAT,CAA8BC,gBAA9B,CAAgD,IACxCC,cADwC,6SAG5C;;OAH4C,sBAMrCC,QANqC,CAM3BC,QAN2B,CAMjBC,OANiB,CAMR,CAClC,GAAI,CAACF,SAASG,QAAd,CAAwBH,SAASG,QAAT,CAAoB,CAAC,QAAD,CAApB,CAAxB,IACK,CACH,GAAIC,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BP,SAASG,QAAxC,IAAsD,gBAA1D,CAA4E,CAC1EH,SAASG,QAAT,CAAoB,CAACH,SAASG,QAAV,CACrB,CACDH,SAASG,QAAT,CAAkBK,IAAlB,CAAuB,QAAvB,CACD,CACD,uHAAoBR,QAApB,CAA8BC,QAA9B,CAAwCC,OAAxC,CACD,CAED;;OAjB4C,sCAoBrCO,QApBqC,CAoB3BT,QApB2B,CAoBjBC,QApBiB,CAoBPC,OApBO,CAoBE,CAC5C,GAAI,CAACF,SAASU,cAAT,CAAwB,UAAxB,CAAL,CAA0C,CACxCV,SAASG,QAAT,CAAoB,CAAEQ,IAAK,CAAC,UAAD,CAAa,QAAb,CAAP,CACrB,CACD,uHAAoBF,QAApB,CAA8BT,QAA9B,CAAwCC,QAAxC,CAAkDC,OAAlD,CACD,CAED;;;OA3B4C,sCA+BrCO,QA/BqC,CA+B3BR,QA/B2B,CA+BjBC,OA/BiB,CA+BR,CAClC,GAAI,CAACA,OAAL,CAAc,GAAIA,SAAU,EAAd,CACd,GAAI,CAACA,QAAQF,QAAb,CAAuBE,QAAQF,QAAR,CAAmB,EAAnB,CACvBE,QAAQF,QAAR,CAAiBG,QAAjB,CAA4B,CAAC,UAAD,CAA5B,CACA,uHAAoBM,QAApB,CAA8BR,QAA9B,CAAwCC,OAAxC,CACD,CApC2C,0BAClBJ,gBADkB,EAuC9C,MAAOC,cACR,E,QAEQF,oB,CAAAA,oB","file":"launched.js","sourcesContent":["/**\n * This method allows you to use LaunchedGraph class to its inheritance chain.\n * Field launched is required!\n * Manage field launched.\n * \n * @param {Class} ParentClassGraph\n * @return {Class} LaunchedGraph\n * @description `import { factoryLaunchedGraph } from 'ancient-graph-spreading';`\n */\nfunction factoryLaunchedGraph(ParentClassGraph) {\n  class LaunchedGraph extends ParentClassGraph {\n    \n    /**\n     * Parent insert with added launched field. You can override it field in modifier.\n     */\n    insert(modifier, callback, context) {\n      if (!modifier.launched) modifier.launched = ['spread'];\n      else {\n        if (Object.prototype.toString.call(modifier.launched) !== '[object Array]') {\n          modifier.launched = [modifier.launched]\n        }\n        modifier.launched.push('spread');\n      }\n      return super.insert(modifier, callback, context);\n    }\n    \n    /**\n     * Parent update, but if source or target changed, then to the launched field will be added values unspread and spread. You can override it field in modifier.\n     */\n    update(selector, modifier, callback, context) {\n      if (!modifier.hasOwnProperty('launched')) {\n        modifier.launched = { add: ['unspread', 'spread'] };\n      }\n      return super.update(selector, modifier, callback, context);\n    }\n    \n    /**\n     * The method is strictly designed so that the class inherits from ExistedGraph.\n     * Adds to launched field unspread value.\n     */\n    remove(selector, callback, context) {\n      if (!context) var context = {};\n      if (!context.modifier) context.modifier = {};\n      context.modifier.launched = ['unspread'];\n      return super.remove(selector, callback, context);\n    }\n  }\n  \n  return LaunchedGraph;\n};\n\nexport { factoryLaunchedGraph };"]}