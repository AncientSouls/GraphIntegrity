{"version":3,"sources":["../src/lib/launched.js"],"names":["factoryLaunchedGraph","ParentClassGraph","LaunchedGraph","modifier","callback","context","config","aliases","launched","Object","prototype","toString","call","push","selector","hasOwnProperty","add"],"mappings":"uxDAAA;;;;;;;;GASA,QAASA,qBAAT,CAA8BC,gBAA9B,CAAgD,IACxCC,cADwC,6SAG5C;;OAH4C,sBAMrCC,QANqC,CAM3BC,QAN2B,CAMjBC,OANiB,CAMR,CAClC,GAAI,CAACF,SAAS,KAAKG,MAAL,CAAYC,OAAZ,CAAoBC,QAA7B,CAAL,CAA6CL,SAAS,KAAKG,MAAL,CAAYC,OAAZ,CAAoBC,QAA7B,EAAyC,CAAC,QAAD,CAAzC,CAA7C,IACK,CACH,GAAIC,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BT,SAAS,KAAKG,MAAL,CAAYC,OAAZ,CAAoBC,QAA7B,CAA/B,IAA2E,gBAA/E,CAAiG,CAC/FL,SAAS,KAAKG,MAAL,CAAYC,OAAZ,CAAoBC,QAA7B,EAAyC,CAACL,SAAS,KAAKG,MAAL,CAAYC,OAAZ,CAAoBC,QAA7B,CAAD,CAC1C,CACDL,SAAS,KAAKG,MAAL,CAAYC,OAAZ,CAAoBC,QAA7B,EAAuCK,IAAvC,CAA4C,QAA5C,CACD,CACD,uHAAoBV,QAApB,CAA8BC,QAA9B,CAAwCC,OAAxC,CACD,CAED;;OAjB4C,sCAoBrCS,QApBqC,CAoB3BX,QApB2B,CAoBjBC,QApBiB,CAoBPC,OApBO,CAoBE,CAC5C,GAAI,CAACF,SAASY,cAAT,CAAwB,KAAKT,MAAL,CAAYC,OAAZ,CAAoBC,QAA5C,CAAL,CAA4D,CAC1DL,SAAS,KAAKG,MAAL,CAAYC,OAAZ,CAAoBC,QAA7B,EAAyC,CAAEQ,IAAK,CAAC,UAAD,CAAa,QAAb,CAAP,CAC1C,CACD,uHAAoBF,QAApB,CAA8BX,QAA9B,CAAwCC,QAAxC,CAAkDC,OAAlD,CACD,CAED;;;OA3B4C,sCA+BrCS,QA/BqC,CA+B3BV,QA/B2B,CA+BjBC,OA/BiB,CA+BR,CAClC,GAAI,CAACA,OAAL,CAAc,GAAIA,SAAU,EAAd,CACd,GAAI,CAACA,QAAQF,QAAb,CAAuBE,QAAQF,QAAR,CAAmB,EAAnB,CACvBE,QAAQF,QAAR,CAAiB,KAAKG,MAAL,CAAYC,OAAZ,CAAoBC,QAArC,EAAiD,CAAC,UAAD,CAAjD,CACA,uHAAoBM,QAApB,CAA8BV,QAA9B,CAAwCC,OAAxC,CACD,CApC2C,0BAClBJ,gBADkB,EAuC9C,MAAOC,cACR,E,QAEQF,oB,CAAAA,oB","file":"launched.js","sourcesContent":["/**\r\n * This method allows you to use LaunchedGraph class to its inheritance chain.\r\n * Field launched is required!\r\n * Manage field launched.\r\n * \r\n * @param {Class} ParentClassGraph\r\n * @return {Class} LaunchedGraph\r\n * @description `import { factoryLaunchedGraph } from 'ancient-graph-spreading';`\r\n */\r\nfunction factoryLaunchedGraph(ParentClassGraph) {\r\n  class LaunchedGraph extends ParentClassGraph {\r\n    \r\n    /**\r\n     * Parent insert with added launched field. You can override it field in modifier.\r\n     */\r\n    insert(modifier, callback, context) {\r\n      if (!modifier[this.config.aliases.launched]) modifier[this.config.aliases.launched] = ['spread'];\r\n      else {\r\n        if (Object.prototype.toString.call(modifier[this.config.aliases.launched]) !== '[object Array]') {\r\n          modifier[this.config.aliases.launched] = [modifier[this.config.aliases.launched]]\r\n        }\r\n        modifier[this.config.aliases.launched].push('spread');\r\n      }\r\n      return super.insert(modifier, callback, context);\r\n    }\r\n    \r\n    /**\r\n     * Parent update, but if source or target changed, then to the launched field will be added values unspread and spread. You can override it field in modifier.\r\n     */\r\n    update(selector, modifier, callback, context) {\r\n      if (!modifier.hasOwnProperty(this.config.aliases.launched)) {\r\n        modifier[this.config.aliases.launched] = { add: ['unspread', 'spread'] };\r\n      }\r\n      return super.update(selector, modifier, callback, context);\r\n    }\r\n    \r\n    /**\r\n     * The method is strictly designed so that the class inherits from ExistedGraph.\r\n     * Adds to launched field unspread value.\r\n     */\r\n    remove(selector, callback, context) {\r\n      if (!context) var context = {};\r\n      if (!context.modifier) context.modifier = {};\r\n      context.modifier[this.config.aliases.launched] = ['unspread'];\r\n      return super.remove(selector, callback, context);\r\n    }\r\n  }\r\n  \r\n  return LaunchedGraph;\r\n};\r\n\r\nexport { factoryLaunchedGraph };"]}