{"version":3,"sources":["../src/lib/spreader.js"],"names":["factorySpreaderGraph","ParentClassGraph","SpreaderGraph","args","constantField","variableField","_constantField","_variableField","modifier","callback","context","launched","selector","hasOwnProperty","add"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;AAUA,SAASA,oBAAT,CAA8BC,gBAA9B,EAAgD;AAAA,MACxCC,aADwC;AAAA;;AAG5C;;;;;AAKA,2BAAYC,IAAZ,EAAkBC,aAAlB,EAAiCC,aAAjC,EAAgD;AAAA;;AAAA;;AAAA,8KACrCF,IADqC;;AAE9C,YAAKG,cAAL,GAAsBF,aAAtB;AACA,YAAKG,cAAL,GAAsBF,aAAtB;AAH8C;AAI/C;;AAED;;;;;AAd4C;AAAA;AAAA,6BAiBrCG,QAjBqC,EAiB3BC,QAjB2B,EAiBjBC,OAjBiB,EAiBR;AAClC,YAAI,CAACF,SAASG,QAAd,EAAwBH,SAASG,QAAT,GAAoB,CAAC,QAAD,CAApB;AACxB,oIAAoBH,QAApB,EAA8BC,QAA9B,EAAwCC,OAAxC;AACD;;AAED;;;;AAtB4C;AAAA;AAAA,6BAyBrCE,QAzBqC,EAyB3BJ,QAzB2B,EAyBjBC,QAzBiB,EAyBPC,OAzBO,EAyBE;AAC5C,YAAI,CAACF,SAASK,cAAT,CAAwB,UAAxB,CAAL,EAA0C;AACxC,cAAIL,SAASK,cAAT,CAAwB,KAAKN,cAA7B,KAAgDC,SAASK,cAAT,CAAwB,KAAKP,cAA7B,CAApD,EAAkG;AAChGE,qBAASG,QAAT,GAAoB,EAAEG,KAAK,CAAC,UAAD,EAAa,QAAb,CAAP,EAApB;AACD;AACF;AACD,oIAAoBF,QAApB,EAA8BJ,QAA9B,EAAwCC,QAAxC,EAAkDC,OAAlD;AACD;;AAED;;;;;AAlC4C;AAAA;AAAA,6BAsCrCE,QAtCqC,EAsC3BH,QAtC2B,EAsCjBC,OAtCiB,EAsCR;AAClC,YAAI,CAACA,OAAL,EAAc,IAAIA,UAAU,EAAd;AACd,YAAI,CAACA,QAAQF,QAAb,EAAuBE,QAAQF,QAAR,GAAmB,EAAnB;AACvBE,gBAAQF,QAAR,CAAiBG,QAAjB,GAA4B,CAAC,UAAD,CAA5B;AACA,oIAAoBC,QAApB,EAA8BH,QAA9B,EAAwCC,OAAxC;AACD;AA3C2C;;AAAA;AAAA,IAClBT,gBADkB;;AA8C9C,SAAOC,aAAP;AACD;;QAEQF,oB,GAAAA,oB","file":"spreader.js","sourcesContent":["/**\n * This method allows you to use SpreaderGraph class to its inheritance chain.\n * Field launched is required!\n * Manage field launched.\n * If using this graph, then in the spreadGraph field spreader is required.\n * \n * @param {Class} ParentClassGraph\n * @return {Class} SpreaderGraph\n * @description `import { factorySpreaderGraph } from 'ancient-graph-spreading';`\n */\nfunction factorySpreaderGraph(ParentClassGraph) {\n  class SpreaderGraph extends ParentClassGraph {\n    \n    /**\n     * @param {Array} args - parent class graph arguments\n     * @param {string} constantField\n     * @param {string} variableField\n     */\n    constructor(args, constantField, variableField) {\n      super(...args);\n      this._constantField = constantField;\n      this._variableField = variableField;\n    }\n    \n    /**\n     * Parent insert with added launched field. You can override it field in modifier.\n     */\n    insert(modifier, callback, context) {\n      if (!modifier.launched) modifier.launched = ['spread'];\n      return super.insert(modifier, callback, context);\n    }\n    \n    /**\n     * Parent update, but if source or target changed, then to the launched field will be added values unspread and spread. You can override it field in modifier.\n     */\n    update(selector, modifier, callback, context) {\n      if (!modifier.hasOwnProperty('launched')) {\n        if (modifier.hasOwnProperty(this._variableField) || modifier.hasOwnProperty(this._constantField)) {\n          modifier.launched = { add: ['unspread', 'spread'] };\n        }\n      }\n      return super.update(selector, modifier, callback, context);\n    }\n    \n    /**\n     * The method is strictly designed so that the class inherits from ExistedGraph.\n     * Adds to launched field unspread value.\n     */\n    remove(selector, callback, context) {\n      if (!context) var context = {};\n      if (!context.modifier) context.modifier = {};\n      context.modifier.launched = ['unspread'];\n      return super.remove(selector, callback, context);\n    }\n  }\n  \n  return SpreaderGraph;\n};\n\nexport { factorySpreaderGraph };"]}