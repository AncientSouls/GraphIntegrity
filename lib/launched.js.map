{"version":3,"sources":["../src/lib/launched.js"],"names":["factoryLaunchedGraph","ParentClassGraph","LaunchedGraph","modifier","callback","context","launched","Object","prototype","toString","call","push","selector","hasOwnProperty","add"],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;;;;;;AASA,SAASA,oBAAT,CAA8BC,gBAA9B,EAAgD;AAAA,MACxCC,aADwC;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAG5C;;;AAH4C,6BAMrCC,QANqC,EAM3BC,QAN2B,EAMjBC,OANiB,EAMR;AAClC,YAAI,CAACF,SAASG,QAAd,EAAwBH,SAASG,QAAT,GAAoB,CAAC,QAAD,CAApB,CAAxB,KACK;AACH,cAAIC,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BP,SAASG,QAAxC,MAAsD,gBAA1D,EAA4E;AAC1EH,qBAASG,QAAT,GAAoB,CAACH,SAASG,QAAV,CAApB;AACD;AACDH,mBAASG,QAAT,CAAkBK,IAAlB,CAAuB,QAAvB;AACD;AACD,oIAAoBR,QAApB,EAA8BC,QAA9B,EAAwCC,OAAxC;AACD;;AAED;;;;AAjB4C;AAAA;AAAA,6BAoBrCO,QApBqC,EAoB3BT,QApB2B,EAoBjBC,QApBiB,EAoBPC,OApBO,EAoBE;AAC5C,YAAI,CAACF,SAASU,cAAT,CAAwB,UAAxB,CAAL,EAA0C;AACxCV,mBAASG,QAAT,GAAoB,EAAEQ,KAAK,CAAC,UAAD,EAAa,QAAb,CAAP,EAApB;AACD;AACD,oIAAoBF,QAApB,EAA8BT,QAA9B,EAAwCC,QAAxC,EAAkDC,OAAlD;AACD;;AAED;;;;;AA3B4C;AAAA;AAAA,6BA+BrCO,QA/BqC,EA+B3BR,QA/B2B,EA+BjBC,OA/BiB,EA+BR;AAClC,YAAI,CAACA,OAAL,EAAc,IAAIA,UAAU,EAAd;AACd,YAAI,CAACA,QAAQF,QAAb,EAAuBE,QAAQF,QAAR,GAAmB,EAAnB;AACvBE,gBAAQF,QAAR,CAAiBG,QAAjB,GAA4B,CAAC,UAAD,CAA5B;AACA,oIAAoBM,QAApB,EAA8BR,QAA9B,EAAwCC,OAAxC;AACD;AApC2C;;AAAA;AAAA,IAClBJ,gBADkB;;AAuC9C,SAAOC,aAAP;AACD;;QAEQF,oB,GAAAA,oB","file":"launched.js","sourcesContent":["/**\n * This method allows you to use LaunchedGraph class to its inheritance chain.\n * Field launched is required!\n * Manage field launched.\n * \n * @param {Class} ParentClassGraph\n * @return {Class} LaunchedGraph\n * @description `import { factoryLaunchedGraph } from 'ancient-graph-spreading';`\n */\nfunction factoryLaunchedGraph(ParentClassGraph) {\n  class LaunchedGraph extends ParentClassGraph {\n    \n    /**\n     * Parent insert with added launched field. You can override it field in modifier.\n     */\n    insert(modifier, callback, context) {\n      if (!modifier.launched) modifier.launched = ['spread'];\n      else {\n        if (Object.prototype.toString.call(modifier.launched) !== '[object Array]') {\n          modifier.launched = [modifier.launched]\n        }\n        modifier.launched.push('spread');\n      }\n      return super.insert(modifier, callback, context);\n    }\n    \n    /**\n     * Parent update, but if source or target changed, then to the launched field will be added values unspread and spread. You can override it field in modifier.\n     */\n    update(selector, modifier, callback, context) {\n      if (!modifier.hasOwnProperty('launched')) {\n        modifier.launched = { add: ['unspread', 'spread'] };\n      }\n      return super.update(selector, modifier, callback, context);\n    }\n    \n    /**\n     * The method is strictly designed so that the class inherits from ExistedGraph.\n     * Adds to launched field unspread value.\n     */\n    remove(selector, callback, context) {\n      if (!context) var context = {};\n      if (!context.modifier) context.modifier = {};\n      context.modifier.launched = ['unspread'];\n      return super.remove(selector, callback, context);\n    }\n  }\n  \n  return LaunchedGraph;\n};\n\nexport { factoryLaunchedGraph };"]}