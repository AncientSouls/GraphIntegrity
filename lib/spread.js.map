{"version":3,"sources":["../src/lib/spread.js"],"names":["factorySpreadGraph","ParentClassGraph","SpreadGraph","collection","selector","config","arguments","constantField","Error","variableField","prevSpreadLink","pathGraph","pathLink","newSpreadLink","context","callback","spreadLink","modifier","process","add"],"mappings":"uxDAAA;;;;;;;;GASA,QAASA,mBAAT,CAA4BC,gBAA5B,CAA8C,IACtCC,YADsC,sEAG1C;;;;;;OAOA,qBAAYC,UAAZ,CAAwBC,QAAxB,CAAkCC,MAAlC,CAA0C,oJAC/BC,SAD+B,GAGxC,GAAID,OAAOE,aAAX,CAA0B,MAAKA,aAAL,CAAqBF,OAAOE,aAA5B,CAA1B,IACK,MAAM,IAAIC,MAAJ,CAAU,qCAAV,CAAN,CAEL,GAAIH,OAAOI,aAAX,CAA0B,MAAKA,aAAL,CAAqBJ,OAAOI,aAA5B,CAA1B,IACK,MAAM,IAAID,MAAJ,CAAU,qCAAV,CAAN,CAPmC,YAQzC,CAED;;;;;;;;;OApB0C,oFA8BxBE,cA9BwB,CA8BRC,SA9BQ,CA8BGC,QA9BH,CA8BaC,aA9Bb,CA8B4BC,OA9B5B,CA8BqCC,QA9BrC,CA8B+C,CACvFA,SAASF,aAAT,CACD,CAED;;;;;OAOA;;;;;;;OAzC0C,gEAiDtBG,UAjDsB,CAiDVF,OAjDU,CAiDDC,QAjDC,CAiDS,CACjDA,SAAS,IAAT,CACD,CAED;;;;;OAOA;;OA5D0C,sCA+DnCE,QA/DmC,CA+DzBF,QA/DyB,CA+DfD,OA/De,CA+DN,CAClC,GAAIA,SAAWA,QAAQI,OAAvB,CAAgC,CAC9BD,SAASC,OAAT,CAAmB,CAACJ,QAAQI,OAAT,CACpB,CACD,mHAAoBD,QAApB,CAA8BF,QAA9B,CAAwCD,OAAxC,CACD,CAED;;;OAtE0C,sCA0EnCV,QA1EmC,CA0EzBW,QA1EyB,CA0EfD,OA1Ee,CA0EN,CAClC,GAAIA,SAAWA,QAAQI,OAAvB,CAAgC,CAC9B,GAAI,CAACJ,QAAQG,QAAb,CAAuBH,QAAQG,QAAR,CAAmB,EAAnB,CACvBH,QAAQG,QAAR,CAAiBC,OAAjB,CAA2B,CAAEC,IAAKL,QAAQI,OAAf,CAC5B,CACD,mHAAoBd,QAApB,CAA8BW,QAA9B,CAAwCD,OAAxC,CACD,CAhFyC,wBAClBb,gBADkB,EAmF5C,MAAOC,YACR,E,QAEQF,kB,CAAAA,kB","file":"spread.js","sourcesContent":["/**\r\n * This method allows you to use SpreadGraph class to its inheritance chain.\r\n * Fields launched, process, prev, path and root is required!\r\n * Manage fields launched and process.\r\n * \r\n * @param {Class} ParentClassGraph\r\n * @return {Class} SpreadGraph\r\n * @description `import { factorySpreadGraph } from 'ancient-graph-spreading';`\r\n */\r\nfunction factorySpreadGraph(ParentClassGraph) {\r\n  class SpreadGraph extends ParentClassGraph {\r\n    \r\n    /**\r\n     * @param {} collection - A pointer to the collection dannymineobhodimye daapteru to work with the graph. This may be a connection to the SQL database and table name, for example, or a collection of Mongo. \r\n     * @param {Object} fields - Comparison of the data in the collection of data in the graph. It is necessary for the adapter.\r\n     * @param {Object} config - Additional config.\r\n     * @param {String} config.constantField - Constant field in graph\r\n     * @param {String} config.variableField - Spreadable field in graph\r\n     */\r\n    constructor(collection, selector, config) {\r\n      super(...arguments);\r\n      \r\n      if (config.constantField) this.constantField = config.constantField;\r\n      else throw new Error('config.constantField is not defined');\r\n      \r\n      if (config.variableField) this.variableField = config.variableField;\r\n      else throw new Error('config.variableField is not defined');\r\n    }\r\n    \r\n    /**\r\n     * Default spreading handler. If spread specified link allowed, callback it link, else callback undefined.\r\n     * \r\n     * @param {Object} [prevSpreadLink]\r\n     * @param {PathGraph} [pathGraph]\r\n     * @param {Object} [pathLink]\r\n     * @param {Object} newSpreadLink \r\n     * @param {Object} [context]\r\n     * @param {SpreadGraph~_spreadingHandlerCallback} [callback]\r\n     */\r\n    _spreadingHandler(prevSpreadLink, pathGraph, pathLink, newSpreadLink, context, callback) {\r\n      callback(newSpreadLink);\r\n    }\r\n    \r\n    /**\r\n     * Responce from _spreadingHandler method.\r\n     *\r\n     * @callback SpreadGraph~_spreadingHandlerCallback\r\n     * @param {Object} [newSpreadLink] \r\n     */\r\n    \r\n    /**\r\n     * Default unspreading handler. If unspread specified link allowed, callback it link, else callback undefined.\r\n     * It called in cases of dispute. When respread, if this method not replaced, will be respreaded all spread links.\r\n     * \r\n     * @param {Object} spreadLink \r\n     * @param {Object} [context]\r\n     * @param {SpreadGraph~_unspreadingHandlerCallback} [callback]\r\n     */\r\n    _unspreadingHandler(spreadLink, context, callback) {\r\n      callback(true);\r\n    }\r\n    \r\n    /**\r\n     * Responce from _unspreadingHandler method.\r\n     *\r\n     * @callback SpreadGraph~_unspreadingHandlerCallback\r\n     * @param {Boolean} [premission = true]\r\n     */\r\n    \r\n    /**\r\n     * Parent insert with parser of context.process.\r\n     */\r\n    insert(modifier, callback, context) {\r\n      if (context && context.process) {\r\n        modifier.process = [context.process];\r\n      }\r\n      return super.insert(modifier, callback, context);\r\n    }\r\n    \r\n    /**\r\n     * The method is strictly designed so that the class inherits from ExistedGraph.\r\n     * Adds to process field custom value from context.\r\n     */\r\n    remove(selector, callback, context) {\r\n      if (context && context.process) {\r\n        if (!context.modifier) context.modifier = {};\r\n        context.modifier.process = { add: context.process };\r\n      }\r\n      return super.remove(selector, callback, context);\r\n    }\r\n  }\r\n  \r\n  return SpreadGraph;\r\n};\r\n\r\nexport { factorySpreadGraph };"]}