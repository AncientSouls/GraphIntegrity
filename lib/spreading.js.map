{"version":3,"sources":["../src/lib/spreading.js"],"names":["GraphSpreading","spreadGraph","pathGraphs","pathGraph","push","fromField","pathLink","context","handler","callback","fetch","variableField","undefined","error","spreadLinks","length","queue","spreadLink","next","spreadFromSpreadLinkByPathLink","each","fromFields","_spreadByPathLink","newSpreadLink","_spreadingHandler","insert","spreadFromSpreadLinkByPathGraph","drain","pathLinks","_spreadFromSpreadLinkByPathGraph","toField","constantField","id","root","toFields","_spreadFromSpreadLinkByPathLink","prev","spreadLinkId","remove","count","pathLinkId","path","_unspreadingHandler","permission","nextPathGraph","nextPathLink","spreadByPathLink"],"mappings":"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","file":"spreading.js","sourcesContent":["import async from 'async';\n\n/**\n * Class with methods for spread and unspread of the spreadGraph on pathGraph(s).\n * \n * @class\n * @description `import { GraphSpreading } from 'ancient-graph-spreading';`\n */\nclass GraphSpreading {\n  \n  /**\n   * @param {SpreadGraph} spreadGraph\n   */\n  constructor(spreadGraph) {\n    this.spreadGraph = spreadGraph;\n    this.pathGraphs = [];\n  }\n  \n  /**\n   * @param {PathGraph} pathGraph\n   */\n  addPathGraph(pathGraph) {\n    this.pathGraphs.push(pathGraph);\n  }\n  \n  /**\n   * Spread by pathLink and specified fromField with available spreadLinks.\n   * \n   * @oaram {string} fromField\n   * @param {PathGraph} pathGraph\n   * @param {PathLink} pathLink\n   * @param {Object} [context]\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathLinkCallback} [handler]\n   * @param {GraphSpreading~spreadByPathLinkCallback} [callback]\n   */\n  _spreadByPathLink(fromField, pathGraph, pathLink, context, handler, callback) {\n    this.spreadGraph.fetch({\n      [this.spreadGraph.variableField]: pathLink[fromField]\n    }, undefined, (error, spreadLinks) => {\n      if (spreadLinks.length) {\n        var queue = async.queue((spreadLink, next) => {\n          this.spreadFromSpreadLinkByPathLink(spreadLink, pathGraph, pathLink, context, handler, next);\n        });\n        queue.push(spreadLinks, (error) => {\n          if (callback) callback();\n        });\n      } else {\n        if (callback) callback();\n      }\n    });\n  }\n  \n  /**\n   * Spread by pathLink with available spreadLinks.\n   * \n   * @param {PathGraph} pathGraph\n   * @param {PathLink} pathLink\n   * @param {Object} [context]\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathLinkCallback} [handler]\n   * @param {GraphSpreading~spreadByPathLinkCallback} [callback]\n   */\n  spreadByPathLink(pathGraph, pathLink, context, handler, callback) {\n    async.each(pathGraph.fromFields, (fromField, next) => {\n      this._spreadByPathLink(fromField, pathGraph, pathLink, context, handler, next);\n    }, callback);\n  }\n  \n  /**\n   * Optional callback.\n   *\n   * @callback GraphSpreading~spreadByPathLinkCallback\n   */\n  \n  /**\n   * Spread root of tree spreadLink.\n   * \n   * @param {SpreadLink} newSpreadLink\n   * @param {Object} [context]\n   * @param {Graph~insertCallback} [callback]\n   */\n  spreadNewSpreadLink(newSpreadLink, context, callback) {\n    this.spreadGraph._spreadingHandler(undefined, undefined, undefined, newSpreadLink, context, (newSpreadLink) => {\n      if (newSpreadLink) {\n        this.spreadGraph.insert(newSpreadLink, callback, context);\n      } else {\n        if (callback) callback();\n      }\n    });\n  }\n  \n  /**\n   * Spread by all available paths from spreadLink.\n   * \n   * @param {SpreadLink} spreadLink\n   * @param {Object} [context]\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphHandler} [handler]\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphCallback} [callback]\n   */\n  spreadFromSpreadLink(spreadLink, context, handler, callback) {\n    var queue = async.queue((pathGraph, callback) => {\n      this.spreadFromSpreadLinkByPathGraph(spreadLink, pathGraph, context, handler, callback);\n    });\n    queue.drain = () => { if (callback) callback(); }\n    queue.push(this.pathGraphs);\n  }\n  \n  /**\n   * Spread by all available paths in pathGraph from spreadLink and specified fromField.\n   * \n   * @param {string} fromField\n   * @param {SpreadLink} spreadLink\n   * @param {PathGraph} pathGraph\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphHandler} [handler]\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphCallback} [callback]\n   */\n  _spreadFromSpreadLinkByPathGraph(fromField, spreadLink, pathGraph, context, handler, callback) {\n    pathGraph.fetch({\n      [fromField]: spreadLink[this.spreadGraph.variableField]\n    }, undefined, (error, pathLinks) => {\n      var queue = async.queue((pathLink, callback) => {\n        this.spreadFromSpreadLinkByPathLink(spreadLink, pathGraph, pathLink, context, handler, callback);\n      });\n      queue.drain = () => { if (callback) callback(); }\n      queue.push(pathLinks);\n    });\n  }\n  \n  /**\n   * Spread by all available paths in pathGraph from spreadLink.\n   * \n   * @param {SpreadLink} spreadLink\n   * @param {PathGraph} pathGraph\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphHandler} [handler]\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphCallback} [callback]\n   */\n  spreadFromSpreadLinkByPathGraph(spreadLink, pathGraph, context, handler, callback) {\n    async.each(pathGraph.fromFields, (fromField, next) => {\n      this._spreadFromSpreadLinkByPathGraph(fromField, spreadLink, pathGraph, context, handler, next);\n    }, callback);\n  }\n  \n  /**\n   * Optional handler. If present, called with an error object as the first argument and, if no error, others arguments with results of spreading.\n   *\n   * @callback GraphSpreading~spreadFromSpreadLinkByPathGraphHandler\n   * @param {Error} [error]\n   * @param {string} [newSpreadLinkId]\n   * @param {SpreadLink} [prevSpreadLink]\n   * @param {PathGraph} [pathGraph]\n   * @param {PathLink} [pathLink]\n   */\n  \n  /**\n   * Optional callback.\n   *\n   * @callback GraphSpreading~spreadFromSpreadLinkByPathGraphCallback\n   */\n  \n  /**\n   * Spread by pathLink and specified toField in pathGraph from spreadLink.\n   * \n   * @param {SpreadLink} spreadLink\n   * @param {PathGraph} pathGraph\n   * @param {PathLink} pathLink\n   * @param {Object} [context]\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathLinkCallback} [callback]\n   */\n  _spreadFromSpreadLinkByPathLink(toField, spreadLink, pathGraph, pathLink, context, callback) {\n    this.spreadGraph._spreadingHandler(spreadLink, pathGraph, pathLink, {\n      [this.spreadGraph.constantField]: spreadLink[this.spreadGraph.constantField],\n      [this.spreadGraph.variableField]: pathLink[toField],\n      prev: spreadLink.id,\n      path: pathLink.id,\n      root: spreadLink.root?spreadLink.root:spreadLink.id\n    }, context, (newSpreadLink) => {\n      if (newSpreadLink) {\n        this.spreadGraph.insert(newSpreadLink, (error, id) => {\n          if (callback) callback(error, id, spreadLink, pathGraph, pathLink);\n        }, context);\n      } else {\n        if (callback) callback();\n      }\n    });\n  }\n  \n  /**\n   * Spread by pathLink in pathGraph from spreadLink.\n   * \n   * @param {SpreadLink} spreadLink\n   * @param {PathGraph} pathGraph\n   * @param {PathLink} pathLink\n   * @param {Object} [context]\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathLinkHandler} [handler]\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathLinkCallback} [callback]\n   */\n  spreadFromSpreadLinkByPathLink(spreadLink, pathGraph, pathLink, context, handler, callback) {\n    async.each(pathGraph.toFields, (toField, next) => {\n      this._spreadFromSpreadLinkByPathLink(toField, spreadLink, pathGraph, pathLink, context, (error, id, prev, pathGraph, pathLink) => {\n        if (handler) handler(error, id, prev, pathGraph, pathLink);\n        next();\n      });\n    }, callback);\n  }\n  \n  /**\n   * Optional handler.\n   *\n   * @callback GraphSpreading~spreadFromSpreadLinkByPathLinkCallback\n   * @param {Error} [error]\n   * @param {string} [newSpreadLinkId]\n   * @param {SpreadLink} [prevSpreadLink]\n   * @param {PathGraph} [pathGraph]\n   * @param {PathLink} [pathLink]\n   */\n  \n  /**\n   * Optional callback. If present, called with an error object as the first argument and, if no error, the unique id of inserted spread link as the second.\n   *\n   * @callback GraphSpreading~spreadFromSpreadLinkByPathLinkCallback\n   */\n  \n  /**\n   * Remove spreadLinks with specific prev spreadLink id.\n   * \n   * @param {string} spreadLinkId\n   * @param {Object} [context]\n   * @param {GraphSpreading~unspreadFromRemovedSpreadLinkByPrevIdHandler} [handler]\n   * @param {GraphSpreading~unspreadFromRemovedSpreadLinkByPrevIdCallback} [callback]\n   */\n  unspreadFromRemovedSpreadLinkByPrevId(spreadLinkId, context, handler, callback) {\n    if (handler) {\n      this.spreadGraph.fetch({ prev: spreadLinkId }, undefined, (error, spreadLinks) => {\n        if (error) {\n          if (callback) callback(error);\n        } else {\n          var queue = async.queue((spreadLink, next) => {\n            this.spreadGraph.remove(spreadLink.id, (error, count) => {\n              handler(error, spreadLink);\n              next();\n            }, context);\n          });\n          if (callback) queue.drain = () => { callback(undefined, spreadLinks.length); }\n          queue.push(spreadLinks);\n        }\n      });\n    } else {\n      this.spreadGraph.remove({ prev: spreadLinkId }, callback, context);\n    }\n  }\n  \n  /**\n   * Optional handler. If present, called with an error object as the first argument and, if no error, others arguments with results of unspreading.\n   *\n   * @callback GraphSpreading~unspreadFromRemovedSpreadLinkByPrevIdHandler\n   * @param {Error} [error]\n   * @param {SpreadLink} [spreadLink]\n   */\n  \n  /**\n   * Optional callback.\n   *\n   * @callback GraphSpreading~unspreadFromRemovedSpreadLinkByPrevIdCallback\n   * @param {Error} [error]\n   * @param {number} [count]\n   */\n  \n  /**\n   * Remove spreadLinks with specific path pathLink id.\n   * \n   * @param {string} pathLinkId\n   * @param {Object} [context]\n   * @param {GraphSpreading~unspreadByPathIdHandler} [handler]\n   * @param {GraphSpreading~unspreadByPathIdCallback} [callback]\n   */\n  unspreadByPathId(pathLinkId, context, handler, callback) {\n    if (handler) {\n      this.spreadGraph.fetch({ path: pathLinkId }, undefined, (error, spreadLinks) => {\n        if (error) {\n          if (callback) callback(error);\n        } else {\n          var queue = async.queue((spreadLink, next) => {\n            this.spreadGraph.remove(spreadLink.id, (error, count) => {\n              handler(error, spreadLink);\n              next();\n            }, context);\n          });\n          if (callback) queue.drain = () => { callback(undefined, spreadLinks.length); }\n          queue.push(spreadLinks);\n        }\n      });\n    } else {\n      this.spreadGraph.remove({ path: pathLinkId }, callback, context);\n    }\n  }\n  \n  /**\n   * Optional handler.\n   *\n   * @callback GraphSpreading~unspreadByPathIdHandler\n   * @param {Error} [error]\n   * @param {SpreadLink} [spreadLink]\n   */\n  \n  /**\n   * Optional callback.\n   *\n   * @callback GraphSpreading~unspreadByPathIdCallback\n   * @param {Error} [error]\n   * @param {number} [count]\n   */\n  \n  /**\n   * Unspread all valid spreadLinks to this id.\n   * \n   * @param {string} id\n   * @param {Object} [context]\n   * @param {GraphSpreading~unspreadToHandler} [handler]\n   * @param {GraphSpreading~unspreadToCallback} [callback]\n   */\n  unspread(id, context, handler, callback) {\n     this.spreadGraph.fetch({ [this.spreadGraph.variableField]: id }, undefined, (error, spreadLinks) => {\n       if (error) {\n         if (callback) callback(error);\n       } else {\n         var queue = async.queue((spreadLink, next) => {\n           this.spreadGraph._unspreadingHandler(spreadLink, context, (permission) => {\n             if (permission) {\n               this.spreadGraph.remove(spreadLink.id, (error, count) => {\n                 if (handler) handler(error, spreadLink);\n                 next();\n               }, context);\n             }\n           });\n         });\n         if (callback) queue.drain = () => { callback(undefined, spreadLinks.length); }\n         queue.push(spreadLinks);\n       }\n     });\n  }\n  \n  /**\n   * Optional handler.\n   *\n   * @callback GraphSpreading~unspreadToHandler\n   * @param {Error} [error]\n   * @param {SpreadLink} [spreadLink]\n   */\n  \n  /**\n   * Optional callback.\n   *\n   * @callback GraphSpreading~unspreadToCallback\n   */\n  \n  /**\n   * Spread all spread links from all available paths to this id.\n   * \n   * @param {string} id\n   * @param {Object} [context]\n   * @param {GraphSpreading~spreadToHandler} [handler]\n   * @param {GraphSpreading~spreadToCallback} [callback]\n   */\n   \n  spreadTo(id, context, handler, callback) {\n    var queue = async.queue((pathGraph, nextPathGraph) => {\n      pathGraph.fetch({\n        [pathGraph.toFields[0]]: id\n      }, undefined, (error, pathLinks) => {\n        async.each(pathLinks, (pathLink, nextPathLink) => {\n          this.spreadByPathLink(pathGraph, pathLink, context, handler, nextPathLink);\n        }, function(error) {\n          nextPathGraph();\n        });\n      });\n    });\n    queue.drain = () => { if (callback) callback(); }\n    queue.push(this.pathGraphs);\n  }\n  \n  /**\n   * Optional handler. Fires after each processed spread link.\n   * Id can be empty if the `this.spreadGraph._spreadingHandler` banned spreading.\n   * \n   * @callback GraphSpreading~spreadToHandler\n   * @param {Error} [error]\n   * @param {string} [newSpreadLinkId]\n   * @param {SpreadLink} [prevSpreadLink]\n   * @param {PathGraph} [pathGraph]\n   * @param {PathLink} [pathLink]\n   */\n  \n  /**\n   * Optional callback.\n   *\n   * @callback GraphSpreading~spreadToCallback\n   */\n}\n\nexport { GraphSpreading };"]}