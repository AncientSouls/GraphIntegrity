{"version":3,"sources":["../src/tests/testSpreading.js"],"names":["testGraphSpreading","generateGraphSpreading","ids","it","done","pathGraph","spreadGraph","graphSpreading","insert","source","target","error","pathLinkId","ifError","fetch","undefined","pathLinks","lengthOf","deepEqual","launched","update","remove","count","equal","spreadNewSpreadLink","spreadLinkId0","spreadLinks","spreadFromSpreadLink","process","id","spreadLink","_pathGraph","pathLink","prev","path","root","pathLinkId0","spreadByPathLink","pathLinkId1","spreadLinkId1","spreadLinkId2","unspreadFromRemovedSpreadLinkByPrevId","spreadLink1","pathLinkId2","spreadTo","unspread"],"mappings":"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","file":"testSpreading.js","sourcesContent":["import { assert } from 'chai';\n\nexport default function testGraphSpreading(generateGraphSpreading, ids) {\n  it('#spreadNewSpreadLink #spreadFromSpreadLink #spreadFromSpreadLinkByPathGraph #spreadFromSpreadLinkByPathLink', function(done) {\n    var { pathGraph, spreadGraph, graphSpreading } = generateGraphSpreading();\n    \n    pathGraph.insert({ source: ids[1], target: ids[2] }, function(error, pathLinkId) {\n      assert.ifError(error);\n      \n      pathGraph.fetch(pathLinkId, undefined, (error, pathLinks) => {\n        assert.ifError(error);\n        assert.lengthOf(pathLinks, 1);\n        assert.deepEqual(pathLinks[0].launched, ['spread']);\n        \n        // no spreadLinks for spread, remove launched spread\n        \n        pathGraph.update(pathLinkId, { launched: { remove: 'spread' }}, (error, count) => {\n          assert.ifError(error);\n          assert.equal(count, 1);\n          \n          pathGraph.fetch(pathLinkId, undefined, (error, pathLinks) => {\n            assert.ifError(error);\n            assert.lengthOf(pathLinks, 1);\n            assert.deepEqual(pathLinks[0].launched, []);\n            \n            graphSpreading.spreadNewSpreadLink({ source: ids[0], target: ids[1], launched: ['spread'] }, undefined, (error, spreadLinkId0) => {\n              assert.ifError(error);\n              \n              spreadGraph.fetch(spreadLinkId0, undefined, (error, spreadLinks) => {\n                assert.ifError(error);\n                assert.lengthOf(spreadLinks, 1);\n                \n                // as reaction to launched spread in spreadLink\n                \n                graphSpreading.spreadFromSpreadLink(\n                  spreadLinks[0], { process: spreadLinkId0 },\n                  (error, id, spreadLink, _pathGraph, pathLink) => {\n                    assert.ifError(error);\n                    assert.deepEqual(spreadLink, spreadLinks[0]);\n                    assert.equal(_pathGraph, pathGraph);\n                    assert.deepEqual(pathLink, pathLinks[0]);\n                  }, () => {\n                    spreadGraph.fetch({}, undefined, (error, spreadLinks) => {\n                      assert.ifError(error);\n                      assert.lengthOf(spreadLinks, 2);\n                      assert.deepEqual(spreadLinks, [\n                        { id: spreadLinks[0].id, source: ids[0], target: ids[1], launched: ['spread'] },\n                        {\n                          id: spreadLinks[1].id, source: ids[0], target: ids[2],\n                          prev: spreadLinkId0, path: pathLinks[0].id, root: spreadLinkId0,\n                          process: [spreadLinkId0]\n                        }\n                      ]);\n                      \n                      // remove process token\n                      \n                      spreadGraph.update(spreadLinks[1].id, { process: { remove: spreadLinkId0}}, (error, count) => {\n                        assert.ifError(error);\n                        assert.equal(count, 1);\n                        \n                        // check other process from this launched\n                        \n                        spreadGraph.fetch({ process: spreadLinkId0 }, undefined, (error, spreadLinks) => {\n                          assert.ifError(error);\n                          assert.lengthOf(spreadLinks, 0);\n                          \n                          // remove launched token\n                          \n                          spreadGraph.update(spreadLinkId0, { launched: { remove: 'spread' }}, (error, count) => {\n                            assert.ifError(error);\n                            assert.equal(count, 1);\n                            \n                            done();\n                          });\n                        });\n                      });\n                    });\n                  }\n                );\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n  \n  it('#spreadByPathLink #spreadFromSpreadLinkByPathGraph #spreadFromSpreadLinkByPathLink', function(done) {\n    var { pathGraph, spreadGraph, graphSpreading } = generateGraphSpreading();\n    \n    graphSpreading.spreadNewSpreadLink({ source: ids[0], target: ids[1] }, undefined, (error, spreadLinkId0) => {\n      assert.ifError(error);\n      \n      spreadGraph.fetch(spreadLinkId0, undefined, (error, spreadLinks) => {\n        assert.ifError(error);\n        assert.lengthOf(spreadLinks, 1);\n        \n        pathGraph.insert({ source: ids[1], target: ids[2] }, function(error, pathLinkId0) {\n          assert.ifError(error);\n          \n          pathGraph.fetch(pathLinkId0, undefined, (error, pathLinks) => {\n            assert.ifError(error);\n            assert.lengthOf(pathLinks, 1);\n            assert.deepEqual(pathLinks[0].launched, ['spread']);\n            \n            // as reaction to launched spread in graphLink\n            \n            graphSpreading.spreadByPathLink(\n              pathGraph, pathLinks[0], { process: pathLinkId0 },\n              (error, id, spreadLink, _pathGraph, pathLink) => {\n                assert.ifError(error);\n                assert.deepEqual(spreadLink, spreadLinks[0]);\n                assert.equal(_pathGraph, pathGraph);\n                assert.deepEqual(pathLink, pathLinks[0]);\n              },\n              () => {\n                spreadGraph.fetch({}, undefined, (error, spreadLinks) => {\n                  assert.lengthOf(spreadLinks, 2);\n                  assert.deepEqual(spreadLinks, [\n                    { id: spreadLinks[0].id, source: ids[0], target: ids[1] },\n                    {\n                      id: spreadLinks[1].id, source: ids[0], target: ids[2],\n                      prev: spreadLinkId0, path: pathLinks[0].id, root: spreadLinkId0,\n                      process: [ pathLinkId0 ]\n                    }\n                  ]);\n                      \n                  // remove process token\n                  \n                  spreadGraph.update(spreadLinks[1].id, { process: { remove: pathLinkId0 }}, (error, count) => {\n                    assert.ifError(error);\n                    assert.equal(count, 1);\n                    \n                    // check other process from this launched\n                    \n                    spreadGraph.fetch({ process: pathLinkId0 }, undefined, (error, spreadLinks) => {\n                      assert.ifError(error);\n                      assert.lengthOf(spreadLinks, 0);\n                      \n                      // remove launched token\n                      \n                      pathGraph.update(pathLinkId0, { launched: { remove: 'spread' }}, (error, count) => {\n                        assert.ifError(error);\n                        assert.equal(count, 1);\n                        \n                        done();\n                      });\n                    });\n                  });\n                });\n              }\n            );\n          });\n        });\n      });\n    });\n  });\n  \n  it('#unspreadFromRemovedSpreadLinkByPrevId', function(done) {\n    var { pathGraph, spreadGraph, graphSpreading } = generateGraphSpreading();\n    pathGraph.insert({ source: ids[1], target: ids[2] }, (error, pathLinkId0) => {\n      pathGraph.insert({ source: ids[2], target: ids[3] }, (error, pathLinkId1) => {\n        spreadGraph.insert({ source: ids[0], target: ids[1] }, (error, spreadLinkId0) => {\n          spreadGraph.insert({ source: ids[0], target: ids[2], prev: spreadLinkId0, path: pathLinkId0, root: spreadLinkId0 }, (error, spreadLinkId1) => {\n            spreadGraph.insert({ source: ids[0], target: ids[3], prev: spreadLinkId1, path: pathLinkId1, root: spreadLinkId0 }, (error, spreadLinkId2) => {\n              spreadGraph.remove(spreadLinkId0, (error, count) => {\n                graphSpreading.unspreadFromRemovedSpreadLinkByPrevId(spreadLinkId0, (error, spreadLink1) => {\n                  assert.ifError(error);\n                }, (error, count) => {\n                  assert.ifError(error);\n                  spreadGraph.fetch({}, undefined, (error, spreadLinks) => {\n                    assert.ifError(error);\n                    assert.deepEqual(spreadLinks, [\n                      { id: spreadLinkId2, source: ids[0], target: ids[3], prev: spreadLinkId1, path: pathLinkId1, root: spreadLinkId0 }\n                    ]);\n                    done();\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n  \n  it('#spreadTo #unspread', function(done) {\n    var { pathGraph, spreadGraph, graphSpreading } = generateGraphSpreading();\n    pathGraph.insert({ source: ids[0], target: ids[3] }, (error, pathLinkId0) => {\n      pathGraph.insert({ source: ids[1], target: ids[3] }, (error, pathLinkId1) => {\n        pathGraph.insert({ source: ids[2], target: ids[3] }, (error, pathLinkId2) => {\n          spreadGraph.insert({ source: ids[4], target: ids[0] }, (error, spreadLinkId0) => {\n            spreadGraph.insert({ source: ids[5], target: ids[1] }, (error, spreadLinkId1) => {\n              spreadGraph.insert({ source: ids[6], target: ids[2] }, (error, spreadLinkId2) => {\n                graphSpreading.spreadTo(ids[3], undefined, undefined, () => {\n                  spreadGraph.fetch({ target: ids[3] }, undefined, (error, spreadLinks) => {\n                    assert.ifError(error);\n                    assert.lengthOf(spreadLinks, 3);\n                    \n                    graphSpreading.unspread(ids[3], undefined, undefined, () => {\n                      spreadGraph.fetch({ target: ids[3] }, undefined, (error, spreadLinks) => {\n                        assert.ifError(error);\n                        assert.lengthOf(spreadLinks, 0);\n                        \n                        done();\n                      });\n                    });\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n};"]}