{"version":3,"sources":["../src/tests/testQueue.js"],"names":["testQueue","generageGraphSpreading","ids","it","done","pathGraph","spreadGraph","graphSpreading","queueSpreading","insert","source","target","error","spreadLinkId0","pathLinkId0","on","oldLink","newLink","insertedSpreadLink","removedSpreadLink","insertedPathLink","lengthOf","launched","fetch","undefined","results","deepEqual","id","prev","path","root","process","mainPathLink","updatedSourceOrTargetPathLink","isEqual","updatedLaunchedUnspreadPathLink","pathLinkId1","update","removedPathLink","removed","spreadLinks","pathLinks","remove"],"mappings":"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","file":"testQueue.js","sourcesContent":["import { assert } from 'chai';\nimport { factoryPathGraph, factorySpreadGraph, GraphSpreading, QueueSpreading } from '../';\nimport lodash from 'lodash';\n\nexport default function testQueue(generageGraphSpreading, ids) {\n  it('#insertedPathLink', function(done) {\n    var { pathGraph, spreadGraph, graphSpreading, queueSpreading } = generageGraphSpreading();\n    \n    spreadGraph.insert({ source: ids[0], target: ids[1] }, (error, spreadLinkId0) => {\n      pathGraph.insert({ source: ids[2], target: ids[3] }, (error, pathLinkId0) => {\n        spreadGraph.on('insert', (oldLink, newLink) => {\n          queueSpreading.insertedSpreadLink(newLink);\n        });\n        spreadGraph.on('remove', (oldLink, newLink) => {\n          queueSpreading.removedSpreadLink(oldLink);\n        });\n        pathGraph.on('insert', (oldLink, newLink) => {\n          queueSpreading.insertedPathLink(pathGraph, newLink);\n        });\n        pathGraph.on('update', (oldLink, newLink) => {\n          assert.lengthOf(newLink.launched, 0);\n          spreadGraph.fetch({}, undefined, (error, results) => {\n            assert.deepEqual(results, [\n              { source: 'a', target: 'b', id: 'spread/0' },\n              {\n                source: 'a', target: 'c', id: 'spread/1',\n                prev: 'spread/0', path: 'path/1', root: 'spread/0',\n                process: [],\n              },\n              {\n                source: 'a', target: 'd', id: 'spread/2',\n                prev: 'spread/1', path: 'path/0', root: 'spread/0',\n                process: [],\n              }\n            ]);\n            done();\n          });\n        });\n        pathGraph.insert({ source: ids[1], target: ids[2] });\n      });\n    });\n  });\n  it('#updatedSourceOrTargetPathLink #updatedLaunchedUnspreadPathLink', function(done) {\n    var { pathGraph, spreadGraph, graphSpreading, queueSpreading } = generageGraphSpreading();\n    \n    var mainPathLink;\n    \n    spreadGraph.on('insert', (oldLink, newLink) => {\n      queueSpreading.insertedSpreadLink(newLink);\n    });\n    spreadGraph.on('remove', (oldLink, newLink) => {\n      queueSpreading.removedSpreadLink(oldLink);\n    });\n    pathGraph.on('insert', (oldLink, newLink) => {\n      queueSpreading.insertedPathLink(pathGraph, newLink);\n    });\n    pathGraph.on('update', (oldLink, newLink) => {\n      if (oldLink.source != newLink.source || oldLink.target != newLink.target) {\n        queueSpreading.updatedSourceOrTargetPathLink(pathGraph, newLink);\n      } else if(!lodash.isEqual(oldLink.launched, newLink.launched)) {\n        if (newLink.id == mainPathLink && newLink.launched == 0) {\n          spreadGraph.fetch({}, undefined, (error, results) => {\n            assert.deepEqual(results, [\n              { source: 'a', target: 'b', id: 'spread/0' },\n              {\n                source: 'a', target: 'c', id: 'spread/1',\n                prev: 'spread/0', path: 'path/0', root: 'spread/0',\n                process: [],\n              },\n              {\n                source: 'a', target: 'd', id: 'spread/2',\n                prev: 'spread/1', path: 'path/1', root: 'spread/0',\n                process: [],\n              }\n            ]);\n            pathGraph.fetch({}, undefined, (error, results) => {\n              assert.deepEqual(results, [\n                {\n                  \"id\": \"path/0\",\n                  \"launched\": [],\n                  \"source\": \"b\",\n                  \"target\": \"c\"\n                },\n                {\n                  \"id\": \"path/1\",\n                  \"launched\": [],\n                  \"source\": \"c\",\n                  \"target\": \"d\"\n                }\n              ]);\n              done();\n            });\n          });\n        } else {\n          queueSpreading.updatedLaunchedUnspreadPathLink(pathGraph, newLink);\n        }\n      }\n    });\n    \n    spreadGraph.insert({ source: ids[0], target: ids[1] }, (error, spreadLinkId0) => {\n      pathGraph.insert({ source: ids[3], target: ids[3] }, (error, pathLinkId0) => {\n        mainPathLink = pathLinkId0;\n        pathGraph.insert({ source: ids[2], target: ids[3] }, (error, pathLinkId1) => {\n          pathGraph.update(pathLinkId0, { source: ids[1], target: ids[2] });\n        });\n      });\n    });\n  });\n  \n  it('#removedPathLink', function(done) {\n    var { pathGraph, spreadGraph, graphSpreading, queueSpreading } = generageGraphSpreading();\n    \n    var mainPathLink;\n    \n    spreadGraph.on('insert', (oldLink, newLink) => {\n      queueSpreading.insertedSpreadLink(newLink);\n    });\n    spreadGraph.on('remove', (oldLink, newLink) => {\n      queueSpreading.removedSpreadLink(oldLink);\n    });\n    spreadGraph.on('update', (oldLink, newLink) => {\n    });\n    pathGraph.on('insert', (oldLink, newLink) => {\n      queueSpreading.insertedPathLink(pathGraph, newLink);\n    });\n    pathGraph.on('update', (oldLink, newLink) => {\n      if (oldLink.source != newLink.source || oldLink.target != newLink.target) {\n        queueSpreading.updatedSourceOrTargetPathLink(pathGraph, newLink);\n      } else if(!lodash.isEqual(oldLink.launched, newLink.launched)) {\n        queueSpreading.updatedLaunchedUnspreadPathLink(pathGraph, newLink);\n      }\n    });\n    pathGraph.on('remove', (oldLink, newLink) => {\n      queueSpreading.removedPathLink(pathGraph, oldLink);\n    });\n    pathGraph.removed.on('update', (oldLink, newLink) => {\n      spreadGraph.fetch({}, undefined, (error, spreadLinks) => {\n        assert.deepEqual(spreadLinks, [\n          { id: 'spread/0', source: 'a', target: 'b' }\n        ]);\n        pathGraph.fetch({}, undefined, (error, pathLinks) => {\n          assert.deepEqual(pathLinks, [\n            { id: 'path/1', source: 'c', target: 'd', launched: [] }\n          ]);\n          done();\n        });\n      });\n    });\n    \n    spreadGraph.insert({ source: ids[0], target: ids[1] }, (error, spreadLinkId0) => {\n      pathGraph.insert({ source: ids[1], target: ids[2] }, (error, pathLinkId0) => {\n        pathGraph.insert({ source: ids[2], target: ids[3] }, (error, pathLinkId1) => {\n          pathGraph.remove(pathLinkId0);\n        });\n      });\n    });\n  });\n};"]}