{"version":3,"sources":["../src/tests/testSpreading.js"],"names":["testGraphSpreading","generateGraphSpreading","ids","it","done","pathGraph","spreadGraph","graphSpreading","insert","source","target","error","pathLinkId","ifError","fetch","undefined","pathLinks","lengthOf","deepEqual","launched","update","remove","count","equal","spreadNewSpreadLink","spreadLinkId0","spreadLinks","spreadFromSpreadLink","process","id","spreadLink","_pathGraph","pathLink","prev","path","root","pathLinkId0","spreadByPathLink","pathLinkId1","spreadLinkId1","spreadLinkId2","unspreadFromRemovedSpreadLinkByPrevId","spreadLink1"],"mappings":"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","file":"testSpreading.js","sourcesContent":["import { assert } from 'chai';\n\nexport default function testGraphSpreading(generateGraphSpreading, ids) {\n  it('#spreadNewSpreadLink #spreadFromSpreadLink #spreadFromSpreadLinkByPathGraph #spreadFromSpreadLinkByPathLink', function(done) {\n    var { pathGraph, spreadGraph, graphSpreading } = generateGraphSpreading();\n    \n    pathGraph.insert({ source: ids[1], target: ids[2] }, function(error, pathLinkId) {\n      assert.ifError(error);\n      \n      pathGraph.fetch(pathLinkId, undefined, (error, pathLinks) => {\n        assert.ifError(error);\n        assert.lengthOf(pathLinks, 1);\n        assert.deepEqual(pathLinks[0].launched, ['spread']);\n        \n        // no spreadLinks for spread, remove launched spread\n        \n        pathGraph.update(pathLinkId, { launched: { remove: 'spread' }}, (error, count) => {\n          assert.ifError(error);\n          assert.equal(count, 1);\n          \n          pathGraph.fetch(pathLinkId, undefined, (error, pathLinks) => {\n            assert.ifError(error);\n            assert.lengthOf(pathLinks, 1);\n            assert.deepEqual(pathLinks[0].launched, []);\n            \n            graphSpreading.spreadNewSpreadLink({ source: ids[0], target: ids[1], launched: ['spread'] }, undefined, (error, spreadLinkId0) => {\n              assert.ifError(error);\n              \n              spreadGraph.fetch(spreadLinkId0, undefined, (error, spreadLinks) => {\n                assert.ifError(error);\n                assert.lengthOf(spreadLinks, 1);\n                \n                // as reaction to launched spread in spreadLink\n                \n                graphSpreading.spreadFromSpreadLink(\n                  spreadLinks[0], { process: spreadLinkId0 },\n                  (error, id, spreadLink, _pathGraph, pathLink) => {\n                    assert.ifError(error);\n                    assert.deepEqual(spreadLink, spreadLinks[0]);\n                    assert.equal(_pathGraph, pathGraph);\n                    assert.deepEqual(pathLink, pathLinks[0]);\n                  }, () => {\n                    spreadGraph.fetch({}, undefined, (error, spreadLinks) => {\n                      assert.ifError(error);\n                      assert.lengthOf(spreadLinks, 2);\n                      assert.deepEqual(spreadLinks, [\n                        { id: spreadLinks[0].id, source: ids[0], target: ids[1], launched: ['spread'] },\n                        {\n                          id: spreadLinks[1].id, source: ids[0], target: ids[2],\n                          prev: spreadLinkId0, path: pathLinks[0].id, root: spreadLinkId0,\n                          process: [spreadLinkId0]\n                        }\n                      ]);\n                      \n                      // remove process token\n                      \n                      spreadGraph.update(spreadLinks[1].id, { process: { remove: spreadLinkId0}}, (error, count) => {\n                        assert.ifError(error);\n                        assert.equal(count, 1);\n                        \n                        // check other process from this launched\n                        \n                        spreadGraph.fetch({ process: spreadLinkId0 }, undefined, (error, spreadLinks) => {\n                          assert.ifError(error);\n                          assert.lengthOf(spreadLinks, 0);\n                          \n                          // remove launched token\n                          \n                          spreadGraph.update(spreadLinkId0, { launched: { remove: 'spread' }}, (error, count) => {\n                            assert.ifError(error);\n                            assert.equal(count, 1);\n                            \n                            done();\n                          });\n                        });\n                      });\n                    });\n                  }\n                );\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n  \n  it('#spreadByPathLink #spreadFromSpreadLinkByPathGraph #spreadFromSpreadLinkByPathLink', function(done) {\n    var { pathGraph, spreadGraph, graphSpreading } = generateGraphSpreading();\n    \n    graphSpreading.spreadNewSpreadLink({ source: ids[0], target: ids[1] }, undefined, (error, spreadLinkId0) => {\n      assert.ifError(error);\n      \n      spreadGraph.fetch(spreadLinkId0, undefined, (error, spreadLinks) => {\n        assert.ifError(error);\n        assert.lengthOf(spreadLinks, 1);\n        \n        pathGraph.insert({ source: ids[1], target: ids[2] }, function(error, pathLinkId0) {\n          assert.ifError(error);\n          \n          pathGraph.fetch(pathLinkId0, undefined, (error, pathLinks) => {\n            assert.ifError(error);\n            assert.lengthOf(pathLinks, 1);\n            assert.deepEqual(pathLinks[0].launched, ['spread']);\n            \n            // as reaction to launched spread in graphLink\n            \n            graphSpreading.spreadByPathLink(\n              pathGraph, pathLinks[0], { process: pathLinkId0 },\n              (error, id, spreadLink, _pathGraph, pathLink) => {\n                assert.ifError(error);\n                assert.deepEqual(spreadLink, spreadLinks[0]);\n                assert.equal(_pathGraph, pathGraph);\n                assert.deepEqual(pathLink, pathLinks[0]);\n              },\n              () => {\n                spreadGraph.fetch({}, undefined, (error, spreadLinks) => {\n                  assert.lengthOf(spreadLinks, 2);\n                  assert.deepEqual(spreadLinks, [\n                    { id: spreadLinks[0].id, source: ids[0], target: ids[1] },\n                    {\n                      id: spreadLinks[1].id, source: ids[0], target: ids[2],\n                      prev: spreadLinkId0, path: pathLinks[0].id, root: spreadLinkId0,\n                      process: [ pathLinkId0 ]\n                    }\n                  ]);\n                      \n                  // remove process token\n                  \n                  spreadGraph.update(spreadLinks[1].id, { process: { remove: pathLinkId0 }}, (error, count) => {\n                    assert.ifError(error);\n                    assert.equal(count, 1);\n                    \n                    // check other process from this launched\n                    \n                    spreadGraph.fetch({ process: pathLinkId0 }, undefined, (error, spreadLinks) => {\n                      assert.ifError(error);\n                      assert.lengthOf(spreadLinks, 0);\n                      \n                      // remove launched token\n                      \n                      pathGraph.update(pathLinkId0, { launched: { remove: 'spread' }}, (error, count) => {\n                        assert.ifError(error);\n                        assert.equal(count, 1);\n                        \n                        done();\n                      });\n                    });\n                  });\n                });\n              }\n            );\n          });\n        });\n      });\n    });\n  });\n  \n  it('#unspreadFromRemovedSpreadLinkByPrevId', function(done) {\n    var { pathGraph, spreadGraph, graphSpreading } = generateGraphSpreading();\n    pathGraph.insert({ source: ids[1], target: ids[2] }, (error, pathLinkId0) => {\n      pathGraph.insert({ source: ids[2], target: ids[3] }, (error, pathLinkId1) => {\n        spreadGraph.insert({ source: ids[0], target: ids[1] }, (error, spreadLinkId0) => {\n          spreadGraph.insert({ source: ids[0], target: ids[2], prev: spreadLinkId0, path: pathLinkId0, root: spreadLinkId0 }, (error, spreadLinkId1) => {\n            spreadGraph.insert({ source: ids[0], target: ids[3], prev: spreadLinkId1, path: pathLinkId1, root: spreadLinkId0 }, (error, spreadLinkId2) => {\n              spreadGraph.remove(spreadLinkId0, (error, count) => {\n                graphSpreading.unspreadFromRemovedSpreadLinkByPrevId(spreadLinkId0, (error, spreadLink1) => {\n                  assert.ifError(error);\n                }, (error, count) => {\n                  assert.ifError(error);\n                  spreadGraph.fetch({}, undefined, (error, spreadLinks) => {\n                    assert.ifError(error);\n                    assert.deepEqual(spreadLinks, [\n                      { id: spreadLinkId2, source: ids[0], target: ids[3], prev: spreadLinkId1, path: pathLinkId1, root: spreadLinkId0 }\n                    ]);\n                    done();\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n};"]}