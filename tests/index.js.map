{"version":3,"sources":["../src/tests/index.js"],"names":["require","install","describe","generateGraphSpreading","NamedGraph","collection","fields","name","_name","index","link","ExistedGraph","NonExistedGraph","ExistedPathGraph","NonExistedPathGraph","ExistedSpreadGraph","CustomExistedSpreadGraph","prevSpreadLink","pathGraph","pathLink","newSpreadLink","context","callback","fetch","id","undefined","error","pathLinks","source","target","prev","path","root","spreadLinks","length","NonExistedSpreadGraph","removed","launched","process","spreadGraph","_fromField","_toField","graphSpreading","addPathGraph","QueueSpreading","splited","split","Error","queueSpreading"],"mappings":"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","file":"index.js","sourcesContent":["require('source-map-support').install();\n\nimport { Graph } from 'ancient-graph/lib/adapters/object.js';\n\nimport { factoryPathGraph, factorySpreadGraph, GraphSpreading, QueueSpreading as AncientQueueSpreading } from '../';\nimport { factoryExistedGraph, factoryNonExistedGraph } from 'ancient-graph-removed';\n\nimport testGraphSpreading from './testSpreading.js';\nimport testQueue from './testQueue.js';\n\ndescribe('AncientSouls/GraphSpreading', function() {\n  function generateGraphSpreading() {\n    \n    class NamedGraph extends Graph {\n      constructor(collection, fields, name) {\n        super(collection, fields);\n        this._name = name;\n      }\n      _idGenerator(index, link) { return this._name+'/'+index; }\n    }\n    \n    var ExistedGraph = factoryExistedGraph(NamedGraph);\n    var NonExistedGraph = factoryNonExistedGraph(NamedGraph);\n    \n    var ExistedPathGraph = factoryPathGraph(ExistedGraph);\n    var NonExistedPathGraph = NonExistedGraph;\n    \n    var ExistedSpreadGraph = (() => {\n      var ExistedSpreadGraph = factorySpreadGraph(ExistedGraph);\n      class CustomExistedSpreadGraph extends ExistedSpreadGraph {\n        _spreadingHandler(prevSpreadLink, pathGraph, pathLink, newSpreadLink, context, callback) {\n          if (!pathLink) {\n            callback(newSpreadLink);\n          } else {\n            pathGraph.fetch(pathLink.id, undefined, (error, pathLinks) => {\n              this.fetch({\n                source: newSpreadLink.source, target: newSpreadLink.target,\n                prev: newSpreadLink.prev, path: newSpreadLink.path, root: newSpreadLink.root\n              }, undefined, (error, spreadLinks) => {\n                callback(!spreadLinks.length&&pathLinks.length?newSpreadLink:undefined);\n              });\n            });\n          }\n        }\n      }\n      return CustomExistedSpreadGraph;\n    })();\n    var NonExistedSpreadGraph = factorySpreadGraph(NonExistedGraph);\n    \n    var pathGraph = new ExistedPathGraph([[], {\n        id: 'id', source: 'source', target: 'target',\n        removed: 'removed', launched: 'launched', process: 'process'\n    }, 'path'], 'source', 'target');\n    \n    pathGraph.removed = new NonExistedPathGraph(\n      pathGraph.collection, pathGraph.fields, pathGraph._name\n    );\n    \n    var spreadGraph = new ExistedSpreadGraph([[], {\n      id: 'id', source: 'source', target: 'target',\n      removed: 'removed', launched: 'launched', process: 'process',\n      prev: 'prev', path: 'path', root: 'root'\n    }, 'spread'], 'source', 'target');\n    \n    spreadGraph.removed = new NonExistedSpreadGraph(\n      [spreadGraph.collection, spreadGraph.fields, spreadGraph._name],\n      spreadGraph._fromField, spreadGraph._toField\n    );\n    \n    var graphSpreading = new GraphSpreading(spreadGraph);\n    graphSpreading.addPathGraph(pathGraph);\n    \n    class QueueSpreading extends AncientQueueSpreading {\n      _getGraph(id) {\n        var splited = id.split('/');\n        if (splited[0] == 'spread') return spreadGraph;\n        else if (splited[0] == 'path') return pathGraph;\n        else throw new Error('Graph is not founded');\n      }\n    }\n    \n    var queueSpreading = new QueueSpreading(graphSpreading);\n    \n    return { pathGraph, spreadGraph, graphSpreading, queueSpreading };\n  };\n  \n  describe('GraphSpreading', function() {\n    testGraphSpreading(generateGraphSpreading, \"abcdefghijklmnopqrstuvwxyz\".split(\"\"));\n  });\n  \n  describe('QueueSpreading', function() {\n    testQueue(generateGraphSpreading, \"abcdefghijklmnopqrstuvwxyz\".split(\"\"));\n  });\n});"]}