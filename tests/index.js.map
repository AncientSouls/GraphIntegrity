{"version":3,"sources":["../src/tests/index.js"],"names":["require","install","NamedGraph","collection","fields","config","arguments","name","index","link","describe","generateGraphSpreading","ExistedGraph","NonExistedGraph","ExistedPathGraph","NonExistedPathGraph","ExistedSpreadGraph","CustomExistedSpreadGraph","prevSpreadLink","pathGraph","pathLink","newSpreadLink","context","callback","fetch","id","undefined","error","pathLinks","source","target","prev","path","root","spreadLinks","length","NonExistedSpreadGraph","removed","launched","process","fromField","toField","spreadGraph","constantField","variableField","graphSpreading","addPathGraph","QueueSpreading","splited","split","Error","queueSpreading","spreader","ExistedSpreaderGraph","NonExistedSpreaderGraph","spreaderGraph"],"mappings":"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","file":"index.js","sourcesContent":["require('source-map-support').install();\n\nimport { Graph } from 'ancient-graph/lib/adapters/object.js';\n\nimport { factoryPathGraph, factorySpreadGraph, factorySpreaderGraph, GraphSpreading, QueueSpreading as AncientQueueSpreading } from '../';\nimport { factoryExistedGraph, factoryNonExistedGraph } from 'ancient-graph-removed';\n\nimport testGraphSpreading from './testSpreading.js';\nimport testQueue from './testQueue.js';\nimport testSpreader from './testSpreader.js';\n\n// Unique id between graphs\n\nclass NamedGraph extends Graph {\n  constructor(collection, fields, config) {\n    super(...arguments);\n    \n    if (config.name) this.name = config.name;\n  }\n  _idGenerator(index, link) { return this.name+'/'+index; }\n}\n\ndescribe('AncientSouls/GraphSpreading', function() {\n  function generateGraphSpreading() {\n    \n    // Removed (Existed and NonExisted)\n    \n    var ExistedGraph = factoryExistedGraph(NamedGraph);\n    var NonExistedGraph = factoryNonExistedGraph(NamedGraph);\n    \n    // PathGraph\n    \n    var ExistedPathGraph = factoryPathGraph(ExistedGraph);\n    var NonExistedPathGraph = NonExistedGraph;\n    \n    // SpreadGraph\n    \n    var ExistedSpreadGraph = (() => {\n      var ExistedSpreadGraph = factorySpreadGraph(ExistedGraph);\n      class CustomExistedSpreadGraph extends ExistedSpreadGraph {\n        _spreadingHandler(prevSpreadLink, pathGraph, pathLink, newSpreadLink, context, callback) {\n          if (!pathLink) {\n            callback(newSpreadLink);\n          } else {\n            pathGraph.fetch(pathLink.id, undefined, (error, pathLinks) => {\n              this.fetch({\n                source: newSpreadLink.source, target: newSpreadLink.target,\n                prev: newSpreadLink.prev, path: newSpreadLink.path, root: newSpreadLink.root\n              }, undefined, (error, spreadLinks) => {\n                callback(!spreadLinks.length&&pathLinks.length?newSpreadLink:undefined);\n              });\n            });\n          }\n        }\n      }\n      return CustomExistedSpreadGraph;\n    })();\n    var NonExistedSpreadGraph = factorySpreadGraph(NonExistedGraph);\n    \n    // Graphs instances\n    \n    // pathGraph\n    \n    var pathGraph = new ExistedPathGraph([], {\n        id: 'id', source: 'source', target: 'target',\n        removed: 'removed', launched: 'launched', process: 'process'\n    }, { name: 'path', fromField: 'source', toField: 'target' });\n    \n    pathGraph.removed = new NonExistedPathGraph(\n      pathGraph.collection, pathGraph.fields, pathGraph.config\n    );\n    \n    // spreadGraph\n    \n    var spreadGraph = new ExistedSpreadGraph([], {\n      id: 'id', source: 'source', target: 'target',\n      removed: 'removed', launched: 'launched', process: 'process',\n      prev: 'prev', path: 'path', root: 'root'\n    }, { name: 'spread', constantField: 'source', variableField: 'target' });\n    \n    spreadGraph.removed = new NonExistedSpreadGraph(\n      spreadGraph.collection, spreadGraph.fields, spreadGraph.config\n    );\n    \n    // GraphSpreading instance\n    \n    var graphSpreading = new GraphSpreading(spreadGraph);\n    graphSpreading.addPathGraph(pathGraph);\n    \n    // QueueSpreading id parser\n    \n    class QueueSpreading extends AncientQueueSpreading {\n      _getGraph(id) {\n        var splited = id.split('/');\n        if (splited[0] == 'spread') return spreadGraph;\n        else if (splited[0] == 'path') return pathGraph;\n        else throw new Error('Graph is not founded');\n      }\n    }\n    \n    var queueSpreading = new QueueSpreading(graphSpreading);\n    \n    return { pathGraph, spreadGraph, graphSpreading, queueSpreading };\n  };\n  \n  describe('GraphSpreading PathGraph SpreadGraph', function() {\n    testGraphSpreading(generateGraphSpreading, \"abcdefghijklmnopqrstuvwxyz\".split(\"\"));\n  });\n  \n  describe('QueueSpreading PathGraph SpreadGraph', function() {\n    testQueue(generateGraphSpreading, \"abcdefghijklmnopqrstuvwxyz\".split(\"\"));\n  });\n  \n  describe('SpreaderGraph PathGraph SpreadGraph', function() {\n    testSpreader(function() {\n      \n      // Removed (Existed and NonExisted)\n      \n      var ExistedGraph = factoryExistedGraph(NamedGraph);\n      var NonExistedGraph = factoryNonExistedGraph(NamedGraph);\n      \n      // PathGraph\n      \n      var ExistedPathGraph = factoryPathGraph(ExistedGraph);\n      var NonExistedPathGraph = NonExistedGraph;\n      \n      // SpreadGraph\n      \n      var ExistedSpreadGraph = (() => {\n        var ExistedSpreadGraph = factorySpreadGraph(ExistedGraph);\n        class CustomExistedSpreadGraph extends ExistedSpreadGraph {\n          _spreadingHandler(prevSpreadLink, pathGraph, pathLink, newSpreadLink, context, callback) {\n            \n            // Spreader support for this SpreadGraph\n            if (prevSpreadLink && prevSpreadLink.spreader) {\n              newSpreadLink.spreader = prevSpreadLink.spreader;\n            }\n            \n            this.fetch({\n              source: newSpreadLink.source, target: newSpreadLink.target,\n              spreader: newSpreadLink.spreader\n            }, undefined, (error, spreadLinks) => {\n              callback((!spreadLinks.length)?newSpreadLink:undefined);\n            });\n          }\n        }\n        return CustomExistedSpreadGraph;\n      })();\n      var NonExistedSpreadGraph = factorySpreadGraph(NonExistedGraph);\n      \n      // SpreaderGraph\n      \n      var ExistedSpreaderGraph = factorySpreaderGraph(ExistedGraph);\n      var NonExistedSpreaderGraph = NonExistedGraph;\n      \n      // Graphs instances\n      \n      // pathGraph\n      \n      var pathGraph = new ExistedPathGraph([], {\n          id: 'id', source: 'source', target: 'target',\n          removed: 'removed', launched: 'launched', process: 'process'\n      }, { name: 'path', fromField: 'source', toField: 'target' });\n      \n      pathGraph.removed = new NonExistedPathGraph(\n        pathGraph.collection, pathGraph.fields, pathGraph.config\n      );\n      \n      // spreadGraph\n      \n      var spreadGraph = new ExistedSpreadGraph([], {\n        id: 'id', source: 'source', target: 'target',\n        removed: 'removed', launched: 'launched', process: 'process', spreader: 'spreader',\n        prev: 'prev', path: 'path', root: 'root'\n      }, { name: 'spread', constantField: 'source', variableField: 'target' });\n      \n      spreadGraph.removed = new NonExistedSpreadGraph(\n        spreadGraph.collection, spreadGraph.fields, spreadGraph.config\n      );\n      \n      // spreaderGraph\n      \n      var spreaderGraph = new ExistedSpreaderGraph([], {\n          id: 'id', source: 'source', target: 'target',\n          removed: 'removed', launched: 'launched', process: 'process'\n      }, { name: 'spreader', constantField: 'source', variableField: 'target' });\n      \n      spreaderGraph.removed = new NonExistedSpreaderGraph(\n        spreaderGraph.collection, spreaderGraph.fields, spreaderGraph.config\n      );\n      \n      // GraphSpreading instance\n      \n      var graphSpreading = new GraphSpreading(spreadGraph);\n      graphSpreading.addPathGraph(pathGraph);\n      \n      // QueueSpreading id parser\n      \n      class QueueSpreading extends AncientQueueSpreading {\n        _getGraph(id) {\n          var splited = id.split('/');\n          if (splited[0] == 'spread') return spreadGraph;\n          else if (splited[0] == 'path') return pathGraph;\n          else if (splited[0] == 'spreader') return spreaderGraph;\n          else throw new Error('Graph is not founded');\n        }\n      }\n      \n      var queueSpreading = new QueueSpreading(graphSpreading);\n      \n      return { pathGraph, spreadGraph, spreaderGraph, graphSpreading, queueSpreading };\n    }, \"abcdefghijklmnopqrstuvwxyz\".split(\"\"));\n  });\n});"]}