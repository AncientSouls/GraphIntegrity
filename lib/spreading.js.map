{"version":3,"sources":["../src/lib/spreading.js"],"names":["GraphSpreading","spreadGraph","pathGraphs","coll","iteratee","callback","each","pathGraph","push","fromField","pathLink","context","handler","query","variableField","wrapSpreadQuery","fetch","undefined","error","spreadLinks","length","spreadLink","next","spreadFromSpreadLinkByPathLink","fromFields","_spreadByPathLink","newSpreadLink","_spreadingHandler","insert","spreadFromSpreadLinkByPathGraph","wrapPathQuery","pathLinks","_spreadFromSpreadLinkByPathGraph","toField","constantField","id","root","toFields","_spreadFromSpreadLinkByPathLink","prev","spreadLinkId","remove","count","pathLinkId","path","_unspreadingHandler","permission","nextPathGraph","nextToField","nextPathLink","spreadByPathLink"],"mappings":"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","file":"spreading.js","sourcesContent":["import async from 'async';\r\n\r\n/**\r\n * Class with methods for spread and unspread of the spreadGraph on pathGraph(s).\r\n * \r\n * @class\r\n * @description `import { GraphSpreading } from 'ancient-graph-spreading';`\r\n */\r\nclass GraphSpreading {\r\n  \r\n  /**\r\n   * @param {SpreadGraph} spreadGraph\r\n   */\r\n  constructor(spreadGraph) {\r\n    this.spreadGraph = spreadGraph;\r\n    this.pathGraphs = [];\r\n  }\r\n  \r\n  /**\r\n   * Custom async callbacks support\r\n   * \r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {function} iteratee - A function to apply to each item in coll.\r\n   * @param {function} callback - A callback which is called when all iteratee functions have finished.\r\n   */\r\n  each(coll, iteratee, callback) {\r\n    async.each(coll, iteratee, callback);\r\n  }\r\n  \r\n  /**\r\n   * @param {PathGraph} pathGraph\r\n   */\r\n  addPathGraph(pathGraph) {\r\n    this.pathGraphs.push(pathGraph);\r\n  }\r\n  \r\n  /**\r\n   * Spread by pathLink and specified fromField with available spreadLinks.\r\n   * \r\n   * @oaram {string} fromField\r\n   * @param {PathGraph} pathGraph\r\n   * @param {PathLink} pathLink\r\n   * @param {Object} [context]\r\n   * @param {Function} [context.wrapSpreadQuery]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathLinkCallback} [handler]\r\n   * @param {GraphSpreading~spreadByPathLinkCallback} [callback]\r\n   */\r\n  _spreadByPathLink(fromField, pathGraph, pathLink, context, handler, callback) {\r\n    var query = {\r\n      [this.spreadGraph.variableField]: pathLink[fromField],\r\n    };\r\n    if (context && context.wrapSpreadQuery) {\r\n      context.wrapSpreadQuery(query);\r\n    }\r\n    this.spreadGraph.fetch(query, undefined, (error, spreadLinks) => {\r\n      if (spreadLinks.length) {\r\n        this.each(spreadLinks, (spreadLink, next) => {\r\n          this.spreadFromSpreadLinkByPathLink(spreadLink, pathGraph, pathLink, context, handler, () => { next(); });\r\n        }, () => {\r\n          if (callback) callback();\r\n        });\r\n      } else {\r\n        if (callback) callback();\r\n      }\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Spread by pathLink with available spreadLinks.\r\n   * \r\n   * @param {PathGraph} pathGraph\r\n   * @param {PathLink} pathLink\r\n   * @param {Object} [context]\r\n   * @param {String[]} [context.fromFields]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathLinkCallback} [handler]\r\n   * @param {GraphSpreading~spreadByPathLinkCallback} [callback]\r\n   */\r\n  spreadByPathLink(pathGraph, pathLink, context, handler, callback) {\r\n    var fromFields = context&&context.fromFields||pathGraph.fromFields;\r\n    this.each(fromFields, (fromField, next) => {\r\n      this._spreadByPathLink(fromField, pathGraph, pathLink, context, handler, next);\r\n    }, callback);\r\n  }\r\n  \r\n  /**\r\n   * Optional callback.\r\n   *\r\n   * @callback GraphSpreading~spreadByPathLinkCallback\r\n   */\r\n  \r\n  /**\r\n   * Spread root of tree spreadLink.\r\n   * \r\n   * @param {SpreadLink} newSpreadLink\r\n   * @param {Object} [context]\r\n   * @param {Graph~insertCallback} [callback]\r\n   */\r\n  spreadNewSpreadLink(newSpreadLink, context, callback) {\r\n    this.spreadGraph._spreadingHandler(undefined, undefined, undefined, newSpreadLink, context, (newSpreadLink) => {\r\n      if (newSpreadLink) {\r\n        this.spreadGraph.insert(newSpreadLink, callback, context);\r\n      } else {\r\n        if (callback) callback();\r\n      }\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Spread by all available paths from spreadLink.\r\n   * \r\n   * @param {SpreadLink} spreadLink\r\n   * @param {Object} [context]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphHandler} [handler]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphCallback} [callback]\r\n   */\r\n  spreadFromSpreadLink(spreadLink, context, handler, callback) {\r\n    this.each(this.pathGraphs, (pathGraph, next) => {\r\n      this.spreadFromSpreadLinkByPathGraph(spreadLink, pathGraph, context, handler, next);\r\n    }, () => {\r\n      if (callback) callback();\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Spread by all available paths in pathGraph from spreadLink and specified fromField.\r\n   * \r\n   * @param {string} fromField\r\n   * @param {SpreadLink} spreadLink\r\n   * @param {PathGraph} pathGraph\r\n   * @param {Object} [context]\r\n   * @param {Function} [context.wrapPathQuery]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphHandler} [handler]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphCallback} [callback]\r\n   */\r\n  _spreadFromSpreadLinkByPathGraph(fromField, spreadLink, pathGraph, context, handler, callback) {\r\n    var query = {\r\n      [fromField]: spreadLink[this.spreadGraph.variableField],\r\n    };\r\n    if (context && context.wrapPathQuery) {\r\n      context.wrapPathQuery(query);\r\n    }\r\n    pathGraph.fetch(query, undefined, (error, pathLinks) => {\r\n      this.each(pathLinks, (pathLink, next) => {\r\n        this.spreadFromSpreadLinkByPathLink(spreadLink, pathGraph, pathLink, context, handler, next);\r\n      }, () => {\r\n        if (callback) callback();\r\n      });\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Spread by all available paths in pathGraph from spreadLink.\r\n   * \r\n   * @param {SpreadLink} spreadLink\r\n   * @param {PathGraph} pathGraph\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphHandler} [handler]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphCallback} [callback]\r\n   */\r\n  spreadFromSpreadLinkByPathGraph(spreadLink, pathGraph, context, handler, callback) {\r\n    this.each(pathGraph.fromFields, (fromField, next) => {\r\n      this._spreadFromSpreadLinkByPathGraph(fromField, spreadLink, pathGraph, context, handler, next);\r\n    }, callback);\r\n  }\r\n  \r\n  /**\r\n   * Optional handler. If present, called with an error object as the first argument and, if no error, others arguments with results of spreading.\r\n   *\r\n   * @callback GraphSpreading~spreadFromSpreadLinkByPathGraphHandler\r\n   * @param {Error} [error]\r\n   * @param {string} [newSpreadLinkId]\r\n   * @param {SpreadLink} [prevSpreadLink]\r\n   * @param {PathGraph} [pathGraph]\r\n   * @param {PathLink} [pathLink]\r\n   */\r\n  \r\n  /**\r\n   * Optional callback.\r\n   *\r\n   * @callback GraphSpreading~spreadFromSpreadLinkByPathGraphCallback\r\n   */\r\n  \r\n  /**\r\n   * Spread by pathLink and specified toField in pathGraph from spreadLink.\r\n   * \r\n   * @param {SpreadLink} spreadLink\r\n   * @param {PathGraph} pathGraph\r\n   * @param {PathLink} pathLink\r\n   * @param {Object} [context]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathLinkCallback} [callback]\r\n   */\r\n  _spreadFromSpreadLinkByPathLink(toField, spreadLink, pathGraph, pathLink, context, callback) {\r\n    this.spreadGraph._spreadingHandler(spreadLink, pathGraph, pathLink, {\r\n      [this.spreadGraph.constantField]: spreadLink[this.spreadGraph.constantField],\r\n      [this.spreadGraph.variableField]: pathLink[toField],\r\n      prev: spreadLink.id,\r\n      path: pathLink.id,\r\n      root: spreadLink.root?spreadLink.root:spreadLink.id\r\n    }, context, (newSpreadLink) => {\r\n      if (newSpreadLink) {\r\n        this.spreadGraph.insert(newSpreadLink, (error, id) => {\r\n          if (callback) callback(error, id, spreadLink, pathGraph, pathLink);\r\n        }, context);\r\n      } else {\r\n        if (callback) callback();\r\n      }\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Spread by pathLink in pathGraph from spreadLink.\r\n   * \r\n   * @param {SpreadLink} spreadLink\r\n   * @param {PathGraph} pathGraph\r\n   * @param {PathLink} pathLink\r\n   * @param {Object} [context]\r\n   * @param {String[]} [context.toFields]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathLinkHandler} [handler]\r\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathLinkCallback} [callback]\r\n   */\r\n  spreadFromSpreadLinkByPathLink(spreadLink, pathGraph, pathLink, context, handler, callback) {\r\n    var toFields = context&&context.toFields||pathGraph.toFields;\r\n    this.each(toFields, (toField, next) => {\r\n      this._spreadFromSpreadLinkByPathLink(toField, spreadLink, pathGraph, pathLink, context, (error, id, prev, pathGraph, pathLink) => {\r\n        if (handler) handler(error, id, prev, pathGraph, pathLink);\r\n        next();\r\n      });\r\n    }, callback);\r\n  }\r\n  \r\n  /**\r\n   * Optional handler.\r\n   *\r\n   * @callback GraphSpreading~spreadFromSpreadLinkByPathLinkCallback\r\n   * @param {Error} [error]\r\n   * @param {string} [newSpreadLinkId]\r\n   * @param {SpreadLink} [prevSpreadLink]\r\n   * @param {PathGraph} [pathGraph]\r\n   * @param {PathLink} [pathLink]\r\n   */\r\n  \r\n  /**\r\n   * Optional callback. If present, called with an error object as the first argument and, if no error, the unique id of inserted spread link as the second.\r\n   *\r\n   * @callback GraphSpreading~spreadFromSpreadLinkByPathLinkCallback\r\n   */\r\n  \r\n  /**\r\n   * Remove spreadLinks with specific prev spreadLink id.\r\n   * \r\n   * @param {string} spreadLinkId\r\n   * @param {Object} [context]\r\n   * @param {Function} [context.wrapSpreadQuery]\r\n   * @param {GraphSpreading~unspreadFromRemovedSpreadLinkByPrevIdHandler} [handler]\r\n   * @param {GraphSpreading~unspreadFromRemovedSpreadLinkByPrevIdCallback} [callback]\r\n   */\r\n  unspreadFromRemovedSpreadLinkByPrevId(spreadLinkId, context, handler, callback) {\r\n    var query = {\r\n      prev: spreadLinkId,\r\n    };\r\n    if (context && context.wrapSpreadQuery) {\r\n      context.wrapSpreadQuery(query);\r\n    }\r\n    if (handler) {\r\n      this.spreadGraph.fetch(query, undefined, (error, spreadLinks) => {\r\n        if (error) {\r\n          if (callback) callback(error);\r\n        } else {\r\n          this.each(spreadLinks, (spreadLink, next) => {\r\n            this.spreadGraph.remove(spreadLink.id, (error, count) => {\r\n              handler(error, spreadLink);\r\n              next();\r\n            }, context);\r\n          }, () => {\r\n            if (callback) callback(undefined, spreadLinks.length);\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      this.spreadGraph.remove(query, callback, context);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Optional handler. If present, called with an error object as the first argument and, if no error, others arguments with results of unspreading.\r\n   *\r\n   * @callback GraphSpreading~unspreadFromRemovedSpreadLinkByPrevIdHandler\r\n   * @param {Error} [error]\r\n   * @param {SpreadLink} [spreadLink]\r\n   */\r\n  \r\n  /**\r\n   * Optional callback.\r\n   *\r\n   * @callback GraphSpreading~unspreadFromRemovedSpreadLinkByPrevIdCallback\r\n   * @param {Error} [error]\r\n   * @param {number} [count]\r\n   */\r\n  \r\n  /**\r\n   * Remove spreadLinks with specific path pathLink id.\r\n   * \r\n   * @param {string} pathLinkId\r\n   * @param {Object} [context]\r\n   * @param {Function} [context.wrapSpreadQuery]\r\n   * @param {GraphSpreading~unspreadByPathIdHandler} [handler]\r\n   * @param {GraphSpreading~unspreadByPathIdCallback} [callback]\r\n   */\r\n  unspreadByPathId(pathLinkId, context, handler, callback) {\r\n    var query = {\r\n      path: pathLinkId,\r\n    };\r\n    if (context && context.wrapSpreadQuery) {\r\n      context.wrapSpreadQuery(query);\r\n    }\r\n    if (handler) {\r\n      this.spreadGraph.fetch(query, undefined, (error, spreadLinks) => {\r\n        if (error) {\r\n          if (callback) callback(error);\r\n        } else {\r\n          this.each(spreadLinks, (spreadLink, next) => {\r\n            this.spreadGraph.remove(spreadLink.id, (error, count) => {\r\n              handler(error, spreadLink);\r\n              next();\r\n            }, context);\r\n          }, () => {\r\n            if (callback) callback(undefined, spreadLinks.length);\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      this.spreadGraph.remove(query, callback, context);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Optional handler.\r\n   *\r\n   * @callback GraphSpreading~unspreadByPathIdHandler\r\n   * @param {Error} [error]\r\n   * @param {SpreadLink} [spreadLink]\r\n   */\r\n  \r\n  /**\r\n   * Optional callback.\r\n   *\r\n   * @callback GraphSpreading~unspreadByPathIdCallback\r\n   * @param {Error} [error]\r\n   * @param {number} [count]\r\n   */\r\n  \r\n  /**\r\n   * Unspread all valid spreadLinks to this id.\r\n   * \r\n   * @param {string} id\r\n   * @param {Object} [context]\r\n   * @param {Function} [context.wrapSpreadQuery]\r\n   * @param {GraphSpreading~unspreadToHandler} [handler]\r\n   * @param {GraphSpreading~unspreadToCallback} [callback]\r\n   */\r\n  unspread(id, context, handler, callback) {\r\n    var query = {\r\n      [this.spreadGraph.variableField]: id,\r\n    };\r\n    if (context && context.wrapSpreadQuery) {\r\n      context.wrapSpreadQuery(query);\r\n    }\r\n    this.spreadGraph.fetch(query, undefined, (error, spreadLinks) => {\r\n      if (error) {\r\n        if (callback) callback(error);\r\n      } else {\r\n        this.each(spreadLinks, (spreadLink, next) => {\r\n          this.spreadGraph._unspreadingHandler(spreadLink, context, (permission) => {\r\n            if (permission) {\r\n              this.spreadGraph.remove(spreadLink.id, (error, count) => {\r\n                if (handler) handler(error, spreadLink);\r\n                next();\r\n              }, context);\r\n            }\r\n          });\r\n        }, () => {\r\n          if (callback) callback(undefined, spreadLinks.length);\r\n        });\r\n      }\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Optional handler.\r\n   *\r\n   * @callback GraphSpreading~unspreadToHandler\r\n   * @param {Error} [error]\r\n   * @param {SpreadLink} [spreadLink]\r\n   */\r\n  \r\n  /**\r\n   * Optional callback.\r\n   *\r\n   * @callback GraphSpreading~unspreadToCallback\r\n   */\r\n  \r\n  /**\r\n   * Spread all spread links from all available paths to this id.\r\n   * \r\n   * @param {string} id\r\n   * @param {Object} [context]\r\n   * @param {String[]} [context.toFields]\r\n   * @param {Function} [context.wrapPathQuery]\r\n   * @param {GraphSpreading~spreadToHandler} [handler]\r\n   * @param {GraphSpreading~spreadToCallback} [callback]\r\n   */\r\n   \r\n  spreadTo(id, context, handler, callback) {\r\n    this.each(this.pathGraphs, (pathGraph, nextPathGraph) => {\r\n      var toFields = context&&context.toFields||pathGraph.toFields;\r\n      this.each(toFields, (toField, nextToField) => {\r\n        var query = {\r\n          [toField]: id,\r\n        };\r\n        if (context && context.wrapPathQuery) {\r\n          context.wrapPathQuery(query);\r\n        }\r\n        pathGraph.fetch(query, undefined, (error, pathLinks) => {\r\n          this.each(pathLinks, (pathLink, nextPathLink) => {\r\n            this.spreadByPathLink(pathGraph, pathLink, context, handler, nextPathLink);\r\n          }, function(error) {\r\n            nextToField();\r\n          });\r\n        });\r\n      }, nextPathGraph);\r\n    }, () => {\r\n      if (callback) callback();\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Optional handler. Fires after each processed spread link.\r\n   * Id can be empty if the `this.spreadGraph._spreadingHandler` banned spreading.\r\n   * \r\n   * @callback GraphSpreading~spreadToHandler\r\n   * @param {Error} [error]\r\n   * @param {string} [newSpreadLinkId]\r\n   * @param {SpreadLink} [prevSpreadLink]\r\n   * @param {PathGraph} [pathGraph]\r\n   * @param {PathLink} [pathLink]\r\n   */\r\n  \r\n  /**\r\n   * Optional callback.\r\n   *\r\n   * @callback GraphSpreading~spreadToCallback\r\n   */\r\n}\r\n\r\nexport { GraphSpreading };"]}