{"version":3,"sources":["../src/tests/index.js"],"names":["require","install","describe","generateGraphSpreading","NamedGraph","collection","fields","config","arguments","name","index","link","ExistedGraph","NonExistedGraph","ExistedPathGraph","NonExistedPathGraph","ExistedSpreadGraph","CustomExistedSpreadGraph","prevSpreadLink","pathGraph","pathLink","newSpreadLink","context","callback","get","id","undefined","error","source","target","prev","path","root","spreadLink","NonExistedSpreadGraph","removed","launched","process","type","fromFields","toFields","spreadGraph","constantField","variableField","graphSpreading","addPathGraph","QueueSpreading","splited","split","Error","queueSpreading","spreader","fetch","spreadLinks","length","ExistedSpreaderGraph","NonExistedSpreaderGraph","spreaderGraph"],"mappings":"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","file":"index.js","sourcesContent":["require('source-map-support').install();\r\n\r\nimport { assert } from 'chai';\r\n\r\nimport { Graph } from 'ancient-graph/lib/adapters/object.js';\r\n\r\nimport {\r\n  factoryLaunchedGraph, \r\n  factoryPathGraph, factorySpreadGraph, factorySpreaderGraph,\r\n  GraphSpreading, QueueSpreading as AncientQueueSpreading\r\n} from '../';\r\nimport { factoryExistedGraph, factoryNonExistedGraph } from 'ancient-graph-removed';\r\n\r\nimport testGraphSpreading from './testSpreading.js';\r\nimport testQueue from './testQueue.js';\r\nimport testSpreader from './testSpreader.js';\r\n\r\ndescribe('AncientSouls/GraphSpreading', function() {\r\n  function generateGraphSpreading() {\r\n    \r\n    // Unique id between graphs\r\n\r\n    class NamedGraph extends Graph {\r\n      constructor(collection, fields, config) {\r\n        super(...arguments);\r\n        \r\n        if (config.name) this.name = config.name;\r\n      }\r\n      _idGenerator(index, link) { return this.name+'/'+index; }\r\n    }\r\n    \r\n    // Removed (Existed and NonExisted)\r\n    \r\n    var ExistedGraph = factoryExistedGraph(NamedGraph);\r\n    var NonExistedGraph = factoryNonExistedGraph(NamedGraph);\r\n    \r\n    // PathGraph\r\n    \r\n    var ExistedPathGraph = factoryLaunchedGraph(factoryPathGraph(ExistedGraph));\r\n    var NonExistedPathGraph = NonExistedGraph;\r\n    \r\n    // SpreadGraph\r\n    \r\n    var ExistedSpreadGraph = (() => {\r\n      var ExistedSpreadGraph = factorySpreadGraph(ExistedGraph);\r\n      class CustomExistedSpreadGraph extends ExistedSpreadGraph {\r\n        _spreadingHandler(prevSpreadLink, pathGraph, pathLink, newSpreadLink, context, callback) {\r\n          if (!pathLink) {\r\n            callback(newSpreadLink);\r\n          } else {\r\n            pathGraph.get(pathLink.id, undefined, (error, pathLink) => {\r\n              if (!pathLink) callback();\r\n              else this.get({\r\n                source: newSpreadLink.source, target: newSpreadLink.target,\r\n                prev: newSpreadLink.prev, path: newSpreadLink.path, root: newSpreadLink.root\r\n              }, undefined, (error, spreadLink) => {\r\n                if (spreadLink) callback();\r\n                else this.get(prevSpreadLink.id, undefined, (error, prevSpreadLink) => {\r\n                  callback(prevSpreadLink?newSpreadLink:undefined);\r\n                });\r\n              });\r\n            });\r\n          }\r\n        }\r\n      }\r\n      return CustomExistedSpreadGraph;\r\n    })();\r\n    var NonExistedSpreadGraph = factorySpreadGraph(NonExistedGraph);\r\n    \r\n    // Graphs instances\r\n    \r\n    // pathGraph\r\n    \r\n    var pathGraph = new ExistedPathGraph([], {\r\n        id: 'id', source: 'source', target: 'target',\r\n        removed: 'removed', launched: 'launched', process: 'process',\r\n        type: 'type',\r\n    }, { name: 'path', fromFields: ['source'], toFields: ['target'] });\r\n    \r\n    pathGraph.removed = new NonExistedPathGraph(\r\n      pathGraph.collection, pathGraph.fields, pathGraph.config\r\n    );\r\n    \r\n    // spreadGraph\r\n    \r\n    var spreadGraph = new ExistedSpreadGraph([], {\r\n      id: 'id', source: 'source', target: 'target',\r\n      removed: 'removed', launched: 'launched', process: 'process',\r\n      prev: 'prev', path: 'path', root: 'root'\r\n    }, { name: 'spread', constantField: 'source', variableField: 'target' });\r\n    \r\n    spreadGraph.removed = new NonExistedSpreadGraph(\r\n      spreadGraph.collection, spreadGraph.fields, spreadGraph.config\r\n    );\r\n    \r\n    // GraphSpreading instance\r\n    \r\n    var graphSpreading = new GraphSpreading(spreadGraph);\r\n    graphSpreading.addPathGraph(pathGraph);\r\n    \r\n    // QueueSpreading id parser\r\n    \r\n    class QueueSpreading extends AncientQueueSpreading {\r\n      _getGraph(id) {\r\n        var splited = id.split('/');\r\n        if (splited[0] == 'spread') return spreadGraph;\r\n        else if (splited[0] == 'path') return pathGraph;\r\n        else throw new Error('Graph is not founded');\r\n      }\r\n    }\r\n    \r\n    var queueSpreading = new QueueSpreading(graphSpreading);\r\n    \r\n    return { pathGraph, spreadGraph, graphSpreading, queueSpreading };\r\n  };\r\n  \r\n  describe('GraphSpreading PathGraph SpreadGraph', function() {\r\n    testGraphSpreading(generateGraphSpreading, \"abcdefghijklmnopqrstuvwxyz\".split(\"\"));\r\n  });\r\n  \r\n  describe('QueueSpreading PathGraph SpreadGraph', function() {\r\n    testQueue(generateGraphSpreading, \"abcdefghijklmnopqrstuvwxyz\".split(\"\"));\r\n  });\r\n  \r\n  describe('SpreaderGraph PathGraph SpreadGraph', function() {\r\n    testSpreader(function() {\r\n      \r\n      // Unique id between graphs\r\n  \r\n      class NamedGraph extends Graph {\r\n        constructor(collection, fields, config) {\r\n          super(...arguments);\r\n          \r\n          if (config.name) this.name = config.name;\r\n        }\r\n        _idGenerator(index, link) { return this.name+'/'+index; }\r\n      }\r\n      \r\n      // Removed (Existed and NonExisted)\r\n      \r\n      var ExistedGraph = factoryExistedGraph(NamedGraph);\r\n      var NonExistedGraph = factoryNonExistedGraph(NamedGraph);\r\n      \r\n      // PathGraph\r\n      \r\n      var ExistedPathGraph = factoryLaunchedGraph(factoryPathGraph(ExistedGraph));\r\n      var NonExistedPathGraph = NonExistedGraph;\r\n      \r\n      // SpreadGraph\r\n      \r\n      var ExistedSpreadGraph = (() => {\r\n        var ExistedSpreadGraph = factorySpreadGraph(ExistedGraph);\r\n        class CustomExistedSpreadGraph extends ExistedSpreadGraph {\r\n          _spreadingHandler(prevSpreadLink, pathGraph, pathLink, newSpreadLink, context, callback) {\r\n            \r\n            // Spreader support for this SpreadGraph\r\n            if (prevSpreadLink && prevSpreadLink.spreader) {\r\n              newSpreadLink.spreader = prevSpreadLink.spreader;\r\n            }\r\n            \r\n            this.fetch({\r\n              source: newSpreadLink.source, target: newSpreadLink.target,\r\n              spreader: newSpreadLink.spreader\r\n            }, undefined, (error, spreadLinks) => {\r\n              callback((!spreadLinks.length)?newSpreadLink:undefined);\r\n            });\r\n          }\r\n        }\r\n        return CustomExistedSpreadGraph;\r\n      })();\r\n      var NonExistedSpreadGraph = factorySpreadGraph(NonExistedGraph);\r\n      \r\n      // SpreaderGraph\r\n      \r\n      var ExistedSpreaderGraph = factoryLaunchedGraph(factorySpreaderGraph(ExistedGraph));\r\n      var NonExistedSpreaderGraph = NonExistedGraph;\r\n      \r\n      // Graphs instances\r\n      \r\n      // pathGraph\r\n      \r\n      var pathGraph = new ExistedPathGraph([], {\r\n          id: 'id', source: 'source', target: 'target',\r\n          removed: 'removed', launched: 'launched', process: 'process'\r\n      }, { name: 'path', fromFields: ['source'], toFields: ['target'] });\r\n      \r\n      pathGraph.removed = new NonExistedPathGraph(\r\n        pathGraph.collection, pathGraph.fields, pathGraph.config\r\n      );\r\n      \r\n      // spreadGraph\r\n      \r\n      var spreadGraph = new ExistedSpreadGraph([], {\r\n        id: 'id', source: 'source', target: 'target',\r\n        removed: 'removed', launched: 'launched', process: 'process', spreader: 'spreader',\r\n        prev: 'prev', path: 'path', root: 'root'\r\n      }, { name: 'spread', constantField: 'source', variableField: 'target' });\r\n      \r\n      spreadGraph.removed = new NonExistedSpreadGraph(\r\n        spreadGraph.collection, spreadGraph.fields, spreadGraph.config\r\n      );\r\n      \r\n      // spreaderGraph\r\n      \r\n      var spreaderGraph = new ExistedSpreaderGraph([], {\r\n          id: 'id', source: 'source', target: 'target',\r\n          removed: 'removed', launched: 'launched', process: 'process'\r\n      }, { name: 'spreader', constantField: 'source', variableField: 'target' });\r\n      \r\n      spreaderGraph.removed = new NonExistedSpreaderGraph(\r\n        spreaderGraph.collection, spreaderGraph.fields, spreaderGraph.config\r\n      );\r\n      \r\n      // GraphSpreading instance\r\n      \r\n      var graphSpreading = new GraphSpreading(spreadGraph);\r\n      graphSpreading.addPathGraph(pathGraph);\r\n      \r\n      // QueueSpreading id parser\r\n      \r\n      class QueueSpreading extends AncientQueueSpreading {\r\n        _getGraph(id) {\r\n          var splited = id.split('/');\r\n          if (splited[0] == 'spread') return spreadGraph;\r\n          else if (splited[0] == 'path') return pathGraph;\r\n          else if (splited[0] == 'spreader') return spreaderGraph;\r\n          else throw new Error('Graph is not founded');\r\n        }\r\n      }\r\n      \r\n      var queueSpreading = new QueueSpreading(graphSpreading);\r\n      \r\n      return { pathGraph, spreadGraph, spreaderGraph, graphSpreading, queueSpreading };\r\n    }, \"abcdefghijklmnopqrstuvwxyz\".split(\"\"));\r\n  });\r\n});"]}