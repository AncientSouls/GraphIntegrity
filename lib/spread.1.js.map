{"version":3,"sources":["../src/lib/spread.1.js"],"names":["factorySpreadGraph","ParentClassGraph","SpreadGraph","collection","selector","config","arguments","constantField","Error","variableField","prevSpreadLink","pathGraph","pathLink","newSpreadLink","context","callback","spreadLink","modifier","process","add"],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;;;;;;AASA,SAASA,kBAAT,CAA4BC,gBAA5B,EAA8C;AAAA,MACtCC,WADsC;AAAA;;AAG1C;;;;;;;AAOA,yBAAYC,UAAZ,EAAwBC,QAAxB,EAAkCC,MAAlC,EAA0C;AAAA;;AAAA,6HAC/BC,SAD+B;;AAGxC,UAAID,OAAOE,aAAX,EAA0B,MAAKA,aAAL,GAAqBF,OAAOE,aAA5B,CAA1B,KACK,MAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;;AAEL,UAAIH,OAAOI,aAAX,EAA0B,MAAKA,aAAL,GAAqBJ,OAAOI,aAA5B,CAA1B,KACK,MAAM,IAAID,KAAJ,CAAU,qCAAV,CAAN;AAPmC;AAQzC;;AAED;;;;;;;;;;;;AApB0C;AAAA;AAAA,wCA8BxBE,cA9BwB,EA8BRC,SA9BQ,EA8BGC,QA9BH,EA8BaC,aA9Bb,EA8B4BC,OA9B5B,EA8BqCC,QA9BrC,EA8B+C;AACvFA,iBAASF,aAAT;AACD;;AAED;;;;;;;AAOA;;;;;;;;;AAzC0C;AAAA;AAAA,0CAiDtBG,UAjDsB,EAiDVF,OAjDU,EAiDDC,QAjDC,EAiDS;AACjDA,iBAAS,IAAT;AACD;;AAED;;;;;;;AAOA;;;;AA5D0C;AAAA;AAAA,6BA+DnCE,QA/DmC,EA+DzBF,QA/DyB,EA+DfD,OA/De,EA+DN;AAClC,YAAIA,WAAWA,QAAQI,OAAvB,EAAgC;AAC9BD,mBAASC,OAAT,GAAmB,CAACJ,QAAQI,OAAT,CAAnB;AACD;AACD,gIAAoBD,QAApB,EAA8BF,QAA9B,EAAwCD,OAAxC;AACD;;AAED;;;;;AAtE0C;AAAA;AAAA,6BA0EnCV,QA1EmC,EA0EzBW,QA1EyB,EA0EfD,OA1Ee,EA0EN;AAClC,YAAIA,WAAWA,QAAQI,OAAvB,EAAgC;AAC9B,cAAI,CAACJ,QAAQG,QAAb,EAAuBH,QAAQG,QAAR,GAAmB,EAAnB;AACvBH,kBAAQG,QAAR,CAAiBC,OAAjB,GAA2B,EAAEC,KAAKL,QAAQI,OAAf,EAA3B;AACD;AACD,gIAAoBd,QAApB,EAA8BW,QAA9B,EAAwCD,OAAxC;AACD;AAhFyC;;AAAA;AAAA,IAClBb,gBADkB;;AAmF5C,SAAOC,WAAP;AACD;;QAEQF,kB,GAAAA,kB","file":"spread.1.js","sourcesContent":["/**\n * This method allows you to use SpreadGraph class to its inheritance chain.\n * Fields launched, process, prev, path and root is required!\n * Manage fields launched and process.\n * \n * @param {Class} ParentClassGraph\n * @return {Class} SpreadGraph\n * @description `import { factorySpreadGraph } from 'ancient-graph-spreading';`\n */\nfunction factorySpreadGraph(ParentClassGraph) {\n  class SpreadGraph extends ParentClassGraph {\n    \n    /**\n     * @param {} collection - A pointer to the collection dannymineobhodimye daapteru to work with the graph. This may be a connection to the SQL database and table name, for example, or a collection of Mongo. \n     * @param {Object} fields - Comparison of the data in the collection of data in the graph. It is necessary for the adapter.\n     * @param {Object} config - Additional config.\n     * @param {String} config.constantField - Constant field in graph\n     * @param {String} config.variableField - Spreadable field in graph\n     */\n    constructor(collection, selector, config) {\n      super(...arguments);\n      \n      if (config.constantField) this.constantField = config.constantField;\n      else throw new Error('config.constantField is not defined');\n      \n      if (config.variableField) this.variableField = config.variableField;\n      else throw new Error('config.variableField is not defined');\n    }\n    \n    /**\n     * Default spreading handler. If spread specified link allowed, callback it link, else callback undefined.\n     * \n     * @param {Object} [prevSpreadLink]\n     * @param {PathGraph} [pathGraph]\n     * @param {Object} [pathLink]\n     * @param {Object} newSpreadLink \n     * @param {Object} [context]\n     * @param {SpreadGraph~_spreadingHandlerCallback} [callback]\n     */\n    _spreadingHandler(prevSpreadLink, pathGraph, pathLink, newSpreadLink, context, callback) {\n      callback(newSpreadLink);\n    }\n    \n    /**\n     * Responce from _spreadingHandler method.\n     *\n     * @callback SpreadGraph~_spreadingHandlerCallback\n     * @param {Object} [newSpreadLink] \n     */\n    \n    /**\n     * Default unspreading handler. If unspread specified link allowed, callback it link, else callback undefined.\n     * It called in cases of dispute. When respread, if this method not replaced, will be respreaded all spread links.\n     * \n     * @param {Object} spreadLink \n     * @param {Object} [context]\n     * @param {SpreadGraph~_unspreadingHandlerCallback} [callback]\n     */\n    _unspreadingHandler(spreadLink, context, callback) {\n      callback(true);\n    }\n    \n    /**\n     * Responce from _unspreadingHandler method.\n     *\n     * @callback SpreadGraph~_unspreadingHandlerCallback\n     * @param {Boolean} [premission = true]\n     */\n    \n    /**\n     * Parent insert with parser of context.process.\n     */\n    insert(modifier, callback, context) {\n      if (context && context.process) {\n        modifier.process = [context.process];\n      }\n      return super.insert(modifier, callback, context);\n    }\n    \n    /**\n     * The method is strictly designed so that the class inherits from ExistedGraph.\n     * Adds to launched field unspread value.\n     */\n    remove(selector, callback, context) {\n      if (context && context.process) {\n        if (!context.modifier) context.modifier = {};\n        context.modifier.process = { add: context.process };\n      }\n      return super.remove(selector, callback, context);\n    }\n  }\n  \n  return SpreadGraph;\n};\n\nexport { factorySpreadGraph };"]}