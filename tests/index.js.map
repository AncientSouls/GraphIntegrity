{"version":3,"sources":["../src/tests/index.js"],"names":["require","install","describe","generateGraphSpreading","NamedGraph","collection","fields","name","_name","index","link","ExistedGraph","NonExistedGraph","ExistedPathGraph","NonExistedPathGraph","ExistedSpreadGraph","CustomExistedSpreadGraph","prevSpreadLink","pathGraph","pathLink","newSpreadLink","context","callback","fetch","id","undefined","error","pathLinks","source","target","prev","path","root","spreadLinks","length","NonExistedSpreadGraph","removed","launched","process","spreadGraph","_fromField","_toField","graphSpreading","addPathGraph","QueueSpreading","splited","split","Error","queueSpreading","spreader","ExistedSpreaderGraph","NonExistedSpreaderGraph","spreaderGraph"],"mappings":"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","file":"index.js","sourcesContent":["require('source-map-support').install();\n\nimport { Graph } from 'ancient-graph/lib/adapters/object.js';\n\nimport { factoryPathGraph, factorySpreadGraph, factorySpreaderGraph, GraphSpreading, QueueSpreading as AncientQueueSpreading } from '../';\nimport { factoryExistedGraph, factoryNonExistedGraph } from 'ancient-graph-removed';\n\nimport testGraphSpreading from './testSpreading.js';\nimport testQueue from './testQueue.js';\nimport testSpreader from './testSpreader.js';\n\ndescribe('AncientSouls/GraphSpreading', function() {\n  function generateGraphSpreading() {\n    \n    // Unique id between graphs\n    \n    class NamedGraph extends Graph {\n      constructor(collection, fields, name) {\n        super(collection, fields);\n        this._name = name;\n      }\n      _idGenerator(index, link) { return this._name+'/'+index; }\n    }\n    \n    // Removed (Existed and NonExisted)\n    \n    var ExistedGraph = factoryExistedGraph(NamedGraph);\n    var NonExistedGraph = factoryNonExistedGraph(NamedGraph);\n    \n    // PathGraph\n    \n    var ExistedPathGraph = factoryPathGraph(ExistedGraph);\n    var NonExistedPathGraph = NonExistedGraph;\n    \n    // SpreadGraph\n    \n    var ExistedSpreadGraph = (() => {\n      var ExistedSpreadGraph = factorySpreadGraph(ExistedGraph);\n      class CustomExistedSpreadGraph extends ExistedSpreadGraph {\n        _spreadingHandler(prevSpreadLink, pathGraph, pathLink, newSpreadLink, context, callback) {\n          if (!pathLink) {\n            callback(newSpreadLink);\n          } else {\n            pathGraph.fetch(pathLink.id, undefined, (error, pathLinks) => {\n              this.fetch({\n                source: newSpreadLink.source, target: newSpreadLink.target,\n                prev: newSpreadLink.prev, path: newSpreadLink.path, root: newSpreadLink.root\n              }, undefined, (error, spreadLinks) => {\n                callback(!spreadLinks.length&&pathLinks.length?newSpreadLink:undefined);\n              });\n            });\n          }\n        }\n      }\n      return CustomExistedSpreadGraph;\n    })();\n    var NonExistedSpreadGraph = factorySpreadGraph(NonExistedGraph);\n    \n    // Graphs instances\n    \n    // pathGraph\n    \n    var pathGraph = new ExistedPathGraph([[], {\n        id: 'id', source: 'source', target: 'target',\n        removed: 'removed', launched: 'launched', process: 'process'\n    }, 'path'], 'source', 'target');\n    \n    pathGraph.removed = new NonExistedPathGraph(\n      pathGraph.collection, pathGraph.fields, pathGraph._name\n    );\n    \n    // spreadGraph\n    \n    var spreadGraph = new ExistedSpreadGraph([[], {\n      id: 'id', source: 'source', target: 'target',\n      removed: 'removed', launched: 'launched', process: 'process',\n      prev: 'prev', path: 'path', root: 'root'\n    }, 'spread'], 'source', 'target');\n    \n    spreadGraph.removed = new NonExistedSpreadGraph(\n      [spreadGraph.collection, spreadGraph.fields, spreadGraph._name],\n      spreadGraph._fromField, spreadGraph._toField\n    );\n    \n    // GraphSpreading instance\n    \n    var graphSpreading = new GraphSpreading(spreadGraph);\n    graphSpreading.addPathGraph(pathGraph);\n    \n    // QueueSpreading id parser\n    \n    class QueueSpreading extends AncientQueueSpreading {\n      _getGraph(id) {\n        var splited = id.split('/');\n        if (splited[0] == 'spread') return spreadGraph;\n        else if (splited[0] == 'path') return pathGraph;\n        else throw new Error('Graph is not founded');\n      }\n    }\n    \n    var queueSpreading = new QueueSpreading(graphSpreading);\n    \n    return { pathGraph, spreadGraph, graphSpreading, queueSpreading };\n  };\n  \n  describe('GraphSpreading PathGraph SpreadGraph', function() {\n    testGraphSpreading(generateGraphSpreading, \"abcdefghijklmnopqrstuvwxyz\".split(\"\"));\n  });\n  \n  describe('QueueSpreading PathGraph SpreadGraph', function() {\n    testQueue(generateGraphSpreading, \"abcdefghijklmnopqrstuvwxyz\".split(\"\"));\n  });\n  \n  describe('SpreaderGraph PathGraph SpreadGraph', function() {\n    testSpreader(function() {\n      \n      // Unique id between graphs\n      \n      class NamedGraph extends Graph {\n        constructor(collection, fields, name) {\n          super(collection, fields);\n          this._name = name;\n        }\n        _idGenerator(index, link) { return this._name+'/'+index; }\n      }\n      \n      // Removed (Existed and NonExisted)\n      \n      var ExistedGraph = factoryExistedGraph(NamedGraph);\n      var NonExistedGraph = factoryNonExistedGraph(NamedGraph);\n      \n      // PathGraph\n      \n      var ExistedPathGraph = factoryPathGraph(ExistedGraph);\n      var NonExistedPathGraph = NonExistedGraph;\n      \n      // SpreadGraph\n      \n      var ExistedSpreadGraph = (() => {\n        var ExistedSpreadGraph = factorySpreadGraph(ExistedGraph);\n        class CustomExistedSpreadGraph extends ExistedSpreadGraph {\n          _spreadingHandler(prevSpreadLink, pathGraph, pathLink, newSpreadLink, context, callback) {\n            \n            // Spreader support for this SpreadGraph\n            if (prevSpreadLink && prevSpreadLink.spreader) {\n              newSpreadLink.spreader = prevSpreadLink.spreader;\n            }\n            \n            this.fetch({\n              source: newSpreadLink.source, target: newSpreadLink.target,\n              spreader: newSpreadLink.spreader\n            }, undefined, (error, spreadLinks) => {\n              callback((!spreadLinks.length)?newSpreadLink:undefined);\n            });\n          }\n        }\n        return CustomExistedSpreadGraph;\n      })();\n      var NonExistedSpreadGraph = factorySpreadGraph(NonExistedGraph);\n      \n      // SpreaderGraph\n      \n      var ExistedSpreaderGraph = factorySpreaderGraph(ExistedGraph);\n      var NonExistedSpreaderGraph = NonExistedGraph;\n      \n      // Graphs instances\n      \n      // pathGraph\n      \n      var pathGraph = new ExistedPathGraph([[], {\n          id: 'id', source: 'source', target: 'target',\n          removed: 'removed', launched: 'launched', process: 'process'\n      }, 'path'], 'source', 'target');\n      \n      pathGraph.removed = new NonExistedPathGraph(\n        pathGraph.collection, pathGraph.fields, pathGraph._name\n      );\n      \n      // spreadGraph\n      \n      var spreadGraph = new ExistedSpreadGraph([[], {\n        id: 'id', source: 'source', target: 'target',\n        removed: 'removed', launched: 'launched', process: 'process', spreader: 'spreader',\n        prev: 'prev', path: 'path', root: 'root'\n      }, 'spread'], 'source', 'target');\n      \n      spreadGraph.removed = new NonExistedSpreadGraph(\n        [spreadGraph.collection, spreadGraph.fields, spreadGraph._name],\n        spreadGraph._fromField, spreadGraph._toField\n      );\n      \n      // spreaderGraph\n      \n      var spreaderGraph = new ExistedSpreaderGraph([[], {\n          id: 'id', source: 'source', target: 'target',\n          removed: 'removed', launched: 'launched', process: 'process'\n      }, 'spreader'], 'source', 'target');\n      \n      spreaderGraph.removed = new NonExistedSpreaderGraph(\n        spreaderGraph.collection, spreaderGraph.fields, spreaderGraph._name\n      );\n      \n      // GraphSpreading instance\n      \n      var graphSpreading = new GraphSpreading(spreadGraph);\n      graphSpreading.addPathGraph(pathGraph);\n      \n      // QueueSpreading id parser\n      \n      class QueueSpreading extends AncientQueueSpreading {\n        _getGraph(id) {\n          var splited = id.split('/');\n          if (splited[0] == 'spread') return spreadGraph;\n          else if (splited[0] == 'path') return pathGraph;\n          else if (splited[0] == 'spreader') return spreaderGraph;\n          else throw new Error('Graph is not founded');\n        }\n      }\n      \n      var queueSpreading = new QueueSpreading(graphSpreading);\n      \n      return { pathGraph, spreadGraph, spreaderGraph, graphSpreading, queueSpreading };\n    }, \"abcdefghijklmnopqrstuvwxyz\".split(\"\"));\n  });\n});"]}