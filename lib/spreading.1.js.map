{"version":3,"sources":["../src/lib/spreading.1.js"],"names":["GraphSpreading","spreadGraph","pathGraphs","pathGraph","push","pathLink","context","handler","callback","fetch","_variableField","_fromField","undefined","error","spreadLinks","queue","spreadLink","spreadFromSpreadLinkByPathLink","id","newSpreadLink","_spreadingHandler","insert","spreadFromSpreadLinkByPathGraph","drain","pathLinks","_constantField","_toField","root","spreadLinkId","prev","next","remove","count","length","pathLinkId","path"],"mappings":"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","file":"spreading.1.js","sourcesContent":["import async from 'async';\n\n/**\n * Class with methods for spread and unspread of the spreadGraph on pathGraph(s).\n * \n * @class\n * @description `import { GraphSpreading } from 'ancient-graph-spreading';`\n */\nclass GraphSpreading {\n  \n  /**\n   * @param {SpreadGraph} spreadGraph\n   */\n  constructor(spreadGraph) {\n    this.spreadGraph = spreadGraph;\n    this.pathGraphs = [];\n  }\n  \n  /**\n   * @param {PathGraph} pathGraph\n   */\n  addPathGraph(pathGraph) {\n    this.pathGraphs.push(pathGraph);\n  }\n  \n  /**\n   * Spread by pathLink with available spreadLinks.\n   * \n   * @param {PathGraph} pathGraph\n   * @param {PathLink} pathLink\n   * @param {Object} [context]\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathLinkCallback} [handler]\n   * @param {GraphSpreading~spreadByPathLinkCallback} [callback]\n   */\n  spreadByPathLink(pathGraph, pathLink, context, handler, callback) {\n    this.spreadGraph.fetch({\n      [this.spreadGraph._variableField]: pathLink[pathGraph._fromField]\n    }, undefined, (error, spreadLinks) => {\n      var queue = async.queue((spreadLink, callback) => {\n        this.spreadFromSpreadLinkByPathLink(spreadLink, pathGraph, pathLink, context, (error, id, spreadLink, pathGraph, pathLink) => {\n          if (handler) handler(error, id, spreadLink, pathGraph, pathLink);\n          callback();\n        });\n      });\n      queue.push(spreadLinks, (error) => {\n        if (callback) callback();\n      });\n    });\n  }\n  \n  /**\n   * Optional callback.\n   *\n   * @callback GraphSpreading~spreadByPathLinkCallback\n   */\n  \n  /**\n   * Spread root of tree spreadLink.\n   * \n   * @param {SpreadLink} newSpreadLink\n   * @param {Object} [context]\n   * @param {Graph~insertCallback} [callback]\n   */\n  spreadNewSpreadLink(newSpreadLink, context, callback) {\n    this.spreadGraph._spreadingHandler(undefined, undefined, undefined, newSpreadLink, context, (newSpreadLink) => {\n      if (newSpreadLink) this.spreadGraph.insert(newSpreadLink, callback, context);\n    });\n  }\n  \n  /**\n   * Spread by all available paths from spreadLink.\n   * \n   * @param {SpreadLink} spreadLink\n   * @param {Object} [context]\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphHandler} [handler]\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphCallback} [callback]\n   */\n  spreadFromSpreadLink(spreadLink, context, handler, callback) {\n    var queue = async.queue((pathGraph, callback) => {\n      this.spreadFromSpreadLinkByPathGraph(spreadLink, pathGraph, context, handler, callback);\n    });\n    queue.drain = () => { if (callback) callback(); }\n    queue.push(this.pathGraphs);\n  }\n  \n  /**\n   * Spread by all available paths in pathGraph from spreadLink.\n   * \n   * @param {SpreadLink} spreadLink\n   * @param {PathGraph} pathGraph\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphHandler} [handler]\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathGraphCallback} [callback]\n   */\n  spreadFromSpreadLinkByPathGraph(spreadLink, pathGraph, context, handler, callback) {\n    pathGraph.fetch({\n      [pathGraph._fromField]: spreadLink[this.spreadGraph._variableField]\n    }, undefined, (error, pathLinks) => {\n      var queue = async.queue((pathLink, callback) => {\n        this.spreadFromSpreadLinkByPathLink(spreadLink, pathGraph, pathLink, context, (error, id) => {\n          if (handler) handler(error, id, spreadLink, pathGraph, pathLink);\n          callback();\n        });\n      });\n      queue.drain = () => { if (callback) callback(); }\n      queue.push(pathLinks);\n    });\n  }\n  \n  /**\n   * Optional handler. If present, called with an error object as the first argument and, if no error, others arguments with results of spreading.\n   *\n   * @callback GraphSpreading~spreadFromSpreadLinkByPathGraphHandler\n   * @param {Error} [error]\n   * @param {string} [id]\n   * @param {SpreadLink} [spreadLink]\n   * @param {PathGraph} [pathGraph]\n   * @param {PathLink} [pathLink]\n   */\n  \n  /**\n   * Optional callback.\n   *\n   * @callback GraphSpreading~spreadFromSpreadLinkByPathGraphCallback\n   */\n  \n  /**\n   * Spread by pathLink in pathGraph from spreadLink.\n   * \n   * @param {SpreadLink} spreadLink\n   * @param {PathGraph} pathGraph\n   * @param {PathLink} pathLink\n   * @param {Object} [context]\n   * @param {GraphSpreading~spreadFromSpreadLinkByPathLinkCallback} [callback]\n   */\n  spreadFromSpreadLinkByPathLink(spreadLink, pathGraph, pathLink, context, callback) {\n    this.spreadGraph._spreadingHandler(spreadLink, pathGraph, pathLink, {\n      [this.spreadGraph._constantField]: spreadLink[this.spreadGraph._constantField],\n      [this.spreadGraph._variableField]: pathLink[pathGraph._toField],\n      prev: spreadLink.id,\n      path: pathLink.id,\n      root: spreadLink.root?spreadLink.root:spreadLink.id\n    }, context, (newSpreadLink) => {\n      if (newSpreadLink) this.spreadGraph.insert(newSpreadLink, (error, id) => {\n        if (callback) callback(error, id, spreadLink, pathGraph, pathLink);\n      }, context);\n    });\n  }\n  \n  /**\n   * Optional callback. If present, called with an error object as the first argument and, if no error, the unique id of inserted spread link as the second.\n   *\n   * @callback GraphSpreading~spreadFromSpreadLinkByPathLinkCallback\n   * @param {Error} [error]\n   * @param {string} [id]\n   * @param {SpreadLink} [spreadLink]\n   * @param {PathGraph} [pathGraph]\n   * @param {PathLink} [pathLink]\n   */\n  \n  /**\n   * Remove spreadLinks with specific prev spreadLink id.\n   * \n   * @param {string} spreadLinkId\n   * @param {Object} [context]\n   * @param {GraphSpreading~unspreadFromRemovedSpreadLinkByPrevIdHandler} [handler]\n   * @param {GraphSpreading~unspreadFromRemovedSpreadLinkByPrevIdCallback} [callback]\n   */\n  unspreadFromRemovedSpreadLinkByPrevId(spreadLinkId, context, handler, callback) {\n    if (handler) {\n      this.spreadGraph.fetch({ prev: spreadLinkId }, undefined, (error, spreadLinks) => {\n        if (error) {\n          if (callback) callback(error);\n        } else {\n          var queue = async.queue((spreadLink, next) => {\n            this.spreadGraph.remove(spreadLink.id, (error, count) => {\n              handler(error, spreadLink);\n              next();\n            }, context);\n          });\n          if (callback) queue.drain = () => { callback(undefined, spreadLinks.length); }\n          queue.push(spreadLinks);\n        }\n      });\n    } else {\n      this.spreadGraph.remove({ prev: spreadLinkId }, callback, context);\n    }\n  }\n  \n  /**\n   * Optional handler. If present, called with an error object as the first argument and, if no error, others arguments with results of unspreading.\n   *\n   * @callback GraphSpreading~unspreadFromRemovedSpreadLinkByPrevIdHandler\n   * @param {Error} [error]\n   * @param {SpreadLink} [spreadLink]\n   */\n  \n  /**\n   * Optional callback.\n   *\n   * @callback GraphSpreading~unspreadFromRemovedSpreadLinkByPrevIdCallback\n   * @param {Error} [error]\n   * @param {number} [count]\n   */\n  \n  /**\n   * Remove spreadLinks with specific path pathLink id.\n   * \n   * @param {string} pathLinkId\n   * @param {Object} [context]\n   * @param {GraphSpreading~unspreadByPathIdHandler} [handler]\n   * @param {GraphSpreading~unspreadByPathIdCallback} [callback]\n   */\n  unspreadByPathId(pathLinkId, context, handler, callback) {\n    if (handler) {\n      this.spreadGraph.fetch({ path: pathLinkId }, undefined, (error, spreadLinks) => {\n        if (error) {\n          if (callback) callback(error);\n        } else {\n          var queue = async.queue((spreadLink, next) => {\n            this.spreadGraph.remove(spreadLink.id, (error, count) => {\n              handler(error, spreadLink);\n              next();\n            }, context);\n          });\n          if (callback) queue.drain = () => { callback(undefined, spreadLinks.length); }\n          queue.push(spreadLinks);\n        }\n      });\n    } else {\n      this.spreadGraph.remove({ path: pathLinkId }, callback, context);\n    }\n  }\n  \n  /**\n   * Optional handler. If present, called with an error object as the first argument and, if no error, others arguments with results of unspreading.\n   *\n   * @callback GraphSpreading~unspreadByPathIdHandler\n   * @param {Error} [error]\n   * @param {SpreadLink} [spreadLink]\n   */\n  \n  /**\n   * Optional callback.\n   *\n   * @callback GraphSpreading~unspreadByPathIdCallback\n   * @param {Error} [error]\n   * @param {number} [count]\n   */\n}\n\nexport { GraphSpreading };"]}