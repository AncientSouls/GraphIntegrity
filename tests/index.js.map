{"version":3,"sources":["../src/tests/index.js"],"names":["require","install","describe","generateGraphSpreading","NamedGraph","collection","fields","config","arguments","name","index","link","ExistedGraph","NonExistedGraph","ExistedPathGraph","NonExistedPathGraph","ExistedSpreadGraph","CustomExistedSpreadGraph","prevSpreadLink","pathGraph","pathLink","newSpreadLink","context","callback","get","id","undefined","error","source","target","prev","path","root","spreadLink","NonExistedSpreadGraph","removed","launched","process","fromFields","toFields","spreadGraph","constantField","variableField","graphSpreading","addPathGraph","QueueSpreading","splited","split","Error","queueSpreading","spreader","fetch","spreadLinks","length","ExistedSpreaderGraph","NonExistedSpreaderGraph","spreaderGraph"],"mappings":"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","file":"index.js","sourcesContent":["require('source-map-support').install();\n\nimport { assert } from 'chai';\n\nimport { Graph } from 'ancient-graph/lib/adapters/object.js';\n\nimport {\n  factoryLaunchedGraph, \n  factoryPathGraph, factorySpreadGraph, factorySpreaderGraph,\n  GraphSpreading, QueueSpreading as AncientQueueSpreading\n} from '../';\nimport { factoryExistedGraph, factoryNonExistedGraph } from 'ancient-graph-removed';\n\nimport testGraphSpreading from './testSpreading.js';\nimport testQueue from './testQueue.js';\nimport testSpreader from './testSpreader.js';\n\ndescribe('AncientSouls/GraphSpreading', function() {\n  function generateGraphSpreading() {\n    \n    // Unique id between graphs\n\n    class NamedGraph extends Graph {\n      constructor(collection, fields, config) {\n        super(...arguments);\n        \n        if (config.name) this.name = config.name;\n      }\n      _idGenerator(index, link) { return this.name+'/'+index; }\n    }\n    \n    // Removed (Existed and NonExisted)\n    \n    var ExistedGraph = factoryExistedGraph(NamedGraph);\n    var NonExistedGraph = factoryNonExistedGraph(NamedGraph);\n    \n    // PathGraph\n    \n    var ExistedPathGraph = factoryLaunchedGraph(factoryPathGraph(ExistedGraph));\n    var NonExistedPathGraph = NonExistedGraph;\n    \n    // SpreadGraph\n    \n    var ExistedSpreadGraph = (() => {\n      var ExistedSpreadGraph = factorySpreadGraph(ExistedGraph);\n      class CustomExistedSpreadGraph extends ExistedSpreadGraph {\n        _spreadingHandler(prevSpreadLink, pathGraph, pathLink, newSpreadLink, context, callback) {\n          if (!pathLink) {\n            callback(newSpreadLink);\n          } else {\n            pathGraph.get(pathLink.id, undefined, (error, pathLink) => {\n              if (!pathLink) callback();\n              else this.get({\n                source: newSpreadLink.source, target: newSpreadLink.target,\n                prev: newSpreadLink.prev, path: newSpreadLink.path, root: newSpreadLink.root\n              }, undefined, (error, spreadLink) => {\n                if (spreadLink) callback();\n                else this.get(prevSpreadLink.id, undefined, (error, prevSpreadLink) => {\n                  callback(prevSpreadLink?newSpreadLink:undefined);\n                });\n              });\n            });\n          }\n        }\n      }\n      return CustomExistedSpreadGraph;\n    })();\n    var NonExistedSpreadGraph = factorySpreadGraph(NonExistedGraph);\n    \n    // Graphs instances\n    \n    // pathGraph\n    \n    var pathGraph = new ExistedPathGraph([], {\n        id: 'id', source: 'source', target: 'target',\n        removed: 'removed', launched: 'launched', process: 'process'\n    }, { name: 'path', fromFields: ['source'], toFields: ['target'] });\n    \n    pathGraph.removed = new NonExistedPathGraph(\n      pathGraph.collection, pathGraph.fields, pathGraph.config\n    );\n    \n    // spreadGraph\n    \n    var spreadGraph = new ExistedSpreadGraph([], {\n      id: 'id', source: 'source', target: 'target',\n      removed: 'removed', launched: 'launched', process: 'process',\n      prev: 'prev', path: 'path', root: 'root'\n    }, { name: 'spread', constantField: 'source', variableField: 'target' });\n    \n    spreadGraph.removed = new NonExistedSpreadGraph(\n      spreadGraph.collection, spreadGraph.fields, spreadGraph.config\n    );\n    \n    // GraphSpreading instance\n    \n    var graphSpreading = new GraphSpreading(spreadGraph);\n    graphSpreading.addPathGraph(pathGraph);\n    \n    // QueueSpreading id parser\n    \n    class QueueSpreading extends AncientQueueSpreading {\n      _getGraph(id) {\n        var splited = id.split('/');\n        if (splited[0] == 'spread') return spreadGraph;\n        else if (splited[0] == 'path') return pathGraph;\n        else throw new Error('Graph is not founded');\n      }\n    }\n    \n    var queueSpreading = new QueueSpreading(graphSpreading);\n    \n    return { pathGraph, spreadGraph, graphSpreading, queueSpreading };\n  };\n  \n  describe('GraphSpreading PathGraph SpreadGraph', function() {\n    testGraphSpreading(generateGraphSpreading, \"abcdefghijklmnopqrstuvwxyz\".split(\"\"));\n  });\n  \n  describe('QueueSpreading PathGraph SpreadGraph', function() {\n    testQueue(generateGraphSpreading, \"abcdefghijklmnopqrstuvwxyz\".split(\"\"));\n  });\n  \n  describe('SpreaderGraph PathGraph SpreadGraph', function() {\n    testSpreader(function() {\n      \n      // Unique id between graphs\n  \n      class NamedGraph extends Graph {\n        constructor(collection, fields, config) {\n          super(...arguments);\n          \n          if (config.name) this.name = config.name;\n        }\n        _idGenerator(index, link) { return this.name+'/'+index; }\n      }\n      \n      // Removed (Existed and NonExisted)\n      \n      var ExistedGraph = factoryExistedGraph(NamedGraph);\n      var NonExistedGraph = factoryNonExistedGraph(NamedGraph);\n      \n      // PathGraph\n      \n      var ExistedPathGraph = factoryLaunchedGraph(factoryPathGraph(ExistedGraph));\n      var NonExistedPathGraph = NonExistedGraph;\n      \n      // SpreadGraph\n      \n      var ExistedSpreadGraph = (() => {\n        var ExistedSpreadGraph = factorySpreadGraph(ExistedGraph);\n        class CustomExistedSpreadGraph extends ExistedSpreadGraph {\n          _spreadingHandler(prevSpreadLink, pathGraph, pathLink, newSpreadLink, context, callback) {\n            \n            // Spreader support for this SpreadGraph\n            if (prevSpreadLink && prevSpreadLink.spreader) {\n              newSpreadLink.spreader = prevSpreadLink.spreader;\n            }\n            \n            this.fetch({\n              source: newSpreadLink.source, target: newSpreadLink.target,\n              spreader: newSpreadLink.spreader\n            }, undefined, (error, spreadLinks) => {\n              callback((!spreadLinks.length)?newSpreadLink:undefined);\n            });\n          }\n        }\n        return CustomExistedSpreadGraph;\n      })();\n      var NonExistedSpreadGraph = factorySpreadGraph(NonExistedGraph);\n      \n      // SpreaderGraph\n      \n      var ExistedSpreaderGraph = factoryLaunchedGraph(factorySpreaderGraph(ExistedGraph));\n      var NonExistedSpreaderGraph = NonExistedGraph;\n      \n      // Graphs instances\n      \n      // pathGraph\n      \n      var pathGraph = new ExistedPathGraph([], {\n          id: 'id', source: 'source', target: 'target',\n          removed: 'removed', launched: 'launched', process: 'process'\n      }, { name: 'path', fromFields: ['source'], toFields: ['target'] });\n      \n      pathGraph.removed = new NonExistedPathGraph(\n        pathGraph.collection, pathGraph.fields, pathGraph.config\n      );\n      \n      // spreadGraph\n      \n      var spreadGraph = new ExistedSpreadGraph([], {\n        id: 'id', source: 'source', target: 'target',\n        removed: 'removed', launched: 'launched', process: 'process', spreader: 'spreader',\n        prev: 'prev', path: 'path', root: 'root'\n      }, { name: 'spread', constantField: 'source', variableField: 'target' });\n      \n      spreadGraph.removed = new NonExistedSpreadGraph(\n        spreadGraph.collection, spreadGraph.fields, spreadGraph.config\n      );\n      \n      // spreaderGraph\n      \n      var spreaderGraph = new ExistedSpreaderGraph([], {\n          id: 'id', source: 'source', target: 'target',\n          removed: 'removed', launched: 'launched', process: 'process'\n      }, { name: 'spreader', constantField: 'source', variableField: 'target' });\n      \n      spreaderGraph.removed = new NonExistedSpreaderGraph(\n        spreaderGraph.collection, spreaderGraph.fields, spreaderGraph.config\n      );\n      \n      // GraphSpreading instance\n      \n      var graphSpreading = new GraphSpreading(spreadGraph);\n      graphSpreading.addPathGraph(pathGraph);\n      \n      // QueueSpreading id parser\n      \n      class QueueSpreading extends AncientQueueSpreading {\n        _getGraph(id) {\n          var splited = id.split('/');\n          if (splited[0] == 'spread') return spreadGraph;\n          else if (splited[0] == 'path') return pathGraph;\n          else if (splited[0] == 'spreader') return spreaderGraph;\n          else throw new Error('Graph is not founded');\n        }\n      }\n      \n      var queueSpreading = new QueueSpreading(graphSpreading);\n      \n      return { pathGraph, spreadGraph, spreaderGraph, graphSpreading, queueSpreading };\n    }, \"abcdefghijklmnopqrstuvwxyz\".split(\"\"));\n  });\n});"]}