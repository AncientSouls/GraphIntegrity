{"version":3,"sources":["../src/tests/testSpreader.js"],"names":["testSpreader","generageGraphSpreading","ids","it","done","pathGraph","spreadGraph","spreaderGraph","graphSpreading","queueSpreading","on","oldLink","newLink","spreadBySpread","unspreadBySpread","spreadBySpreader","lengthOf","launched","fetch","undefined","error","results","deepEqual","source","target","id","process","spreader","prev","path","root","insert","graphLinkId0","graphLinkId1","graphLinkId2","unspreadBySpreader","update","length","remove","removed","spreadLinks","spreaderLinks"],"mappings":"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","file":"testSpreader.js","sourcesContent":["import { assert } from 'chai';\nimport { factoryPathGraph, factorySpreadGraph, GraphSpreading, QueueSpreading } from '../';\nimport lodash from 'lodash';\n\nexport default function testSpreader(generageGraphSpreading, ids) {\n  it('#spreadBySpreader', function(done) {\n    var { pathGraph, spreadGraph, spreaderGraph, graphSpreading, queueSpreading } = generageGraphSpreading();\n    \n    spreadGraph.on('insert', (oldLink, newLink) => {\n      queueSpreading.spreadBySpread(newLink);\n    });\n    spreadGraph.on('remove', (oldLink, newLink) => {\n      queueSpreading.unspreadBySpread(oldLink);\n    });\n    \n    spreaderGraph.on('insert', (oldLink, newLink) => {\n      queueSpreading.spreadBySpreader(spreaderGraph, newLink);\n    });\n    \n    spreaderGraph.on('update', (oldLink, newLink) => {\n      assert.lengthOf(newLink.launched, 0);\n      spreadGraph.fetch({}, undefined, (error, results) => {\n        assert.deepEqual(results, [\n          { source: 'a', target: 'b', id: 'spread/0',\n            process: [], spreader: 'spreader/0'\n          },\n          { source: 'a', target: 'c', id: 'spread/1',\n            prev: 'spread/0', path: 'path/0', root: 'spread/0',\n            process: [], spreader: 'spreader/0'\n          },\n          { source: 'a', target: 'd', id: 'spread/2',\n            prev: 'spread/1', path: 'path/1', root: 'spread/0',\n            process: [], spreader: 'spreader/0'\n          },\n          { source: 'a', target: 'e', id: 'spread/3',\n            prev: 'spread/2', path: 'path/2', root: 'spread/0',\n            process: [], spreader: 'spreader/0'\n          },\n        ]);\n        done();\n      });\n    });\n    \n    pathGraph.insert({ source: ids[1], target: ids[2] }, (error, graphLinkId0) => {\n      pathGraph.insert({ source: ids[2], target: ids[3] }, (error, graphLinkId1) => {\n        pathGraph.insert({ source: ids[3], target: ids[4] }, (error, graphLinkId2) => {\n          spreaderGraph.insert({ source: ids[0], target: ids[1] });\n        });\n      });\n    });\n  });\n  \n  it('#unspreadBySpreader #spreadBySpreader', function(done) {\n    var { pathGraph, spreadGraph, spreaderGraph, graphSpreading, queueSpreading } = generageGraphSpreading();\n    \n    spreadGraph.on('insert', (oldLink, newLink) => {\n      queueSpreading.spreadBySpread(newLink);\n    });\n    spreadGraph.on('remove', (oldLink, newLink) => {\n      queueSpreading.unspreadBySpread(oldLink);\n    });\n    \n    spreaderGraph.on('insert', (oldLink, newLink) => {\n      queueSpreading.spreadBySpreader(spreaderGraph, newLink);\n    });\n    \n    spreaderGraph.on('update', (oldLink, newLink) => {\n      if (oldLink.source != newLink.source || oldLink.target != newLink.target) {\n        queueSpreading.unspreadBySpreader(spreaderGraph, newLink);\n      } else {\n        if (newLink.target == ids[1]) {\n          spreaderGraph.update(newLink.id, { target: ids[2] });\n        } else {\n          if (newLink.launched.length) {\n            queueSpreading.spreadBySpreader(spreaderGraph, newLink);\n          } else {\n            spreadGraph.fetch({}, undefined, (error, results) => {\n              assert.deepEqual(results, [\n                { source: 'a', target: 'c', id: 'spread/4',\n                  process: [], spreader: 'spreader/0'\n                },\n                { source: 'a', target: 'd', id: 'spread/5',\n                  prev: 'spread/4', path: 'path/1', root: 'spread/4',\n                  process: [], spreader: 'spreader/0'\n                },\n                { source: 'a', target: 'e', id: 'spread/6',\n                  prev: 'spread/5', path: 'path/2', root: 'spread/4',\n                  process: [], spreader: 'spreader/0'\n                },\n              ]);\n              done();\n            });\n          }\n        }\n      }\n    });\n    \n    pathGraph.insert({ source: ids[1], target: ids[2] }, (error, graphLinkId0) => {\n      pathGraph.insert({ source: ids[2], target: ids[3] }, (error, graphLinkId1) => {\n        pathGraph.insert({ source: ids[3], target: ids[4] }, (error, graphLinkId2) => {\n          spreaderGraph.insert({ source: ids[0], target: ids[1] });\n        });\n      });\n    });\n  });\n  \n  it('#unspreadBySpreader', function(done) {\n    var { pathGraph, spreadGraph, spreaderGraph, graphSpreading, queueSpreading } = generageGraphSpreading();\n    \n    spreadGraph.on('insert', (oldLink, newLink) => {\n      queueSpreading.spreadBySpread(newLink);\n    });\n    spreadGraph.on('remove', (oldLink, newLink) => {\n      queueSpreading.unspreadBySpread(oldLink);\n    });\n    \n    spreaderGraph.on('insert', (oldLink, newLink) => {\n      queueSpreading.spreadBySpreader(spreaderGraph, newLink);\n    });\n    spreaderGraph.on('update', (oldLink, newLink) => {\n      assert.lengthOf(newLink.launched, 0);\n      spreaderGraph.remove(newLink.id);\n    });\n    spreaderGraph.on('remove', (oldLink, newLink) => {\n      queueSpreading.unspreadBySpreader(spreaderGraph, oldLink);\n    });\n    \n    spreaderGraph.removed.on('update', (oldLink, newLink) => {\n      assert.lengthOf(newLink.launched, 0);\n      spreadGraph.fetch({}, undefined, (error, spreadLinks) => {\n        assert.lengthOf(spreadLinks, 0);\n        spreaderGraph.fetch({}, undefined, (error, spreaderLinks) => {\n          assert.lengthOf(spreaderLinks, 0);\n          done();\n        });\n      });\n    });\n    \n    pathGraph.insert({ source: ids[1], target: ids[2] }, (error, graphLinkId0) => {\n      pathGraph.insert({ source: ids[2], target: ids[3] }, (error, graphLinkId1) => {\n        pathGraph.insert({ source: ids[3], target: ids[4] }, (error, graphLinkId2) => {\n          spreaderGraph.insert({ source: ids[0], target: ids[1] });\n        });\n      });\n    });\n  });\n};"]}